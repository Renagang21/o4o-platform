name: üß™ Test & Build Pipeline

on:
  push:
    branches: [ main, develop, 'feature/*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # ÏàòÎèô Ìä∏Î¶¨Í±∞ ÌóàÏö©

permissions:
  contents: write
  pull-requests: write
  issues: write
  packages: write

env:
  NODE_VERSION: '20.18.0'
  CACHE_VERSION: v1

jobs:
  # üß™ ÌÖåÏä§Ìä∏ ÏûëÏóÖ
  test:
    name: üß™ Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-server, main-site, admin-dashboard]
    
    steps:
      - name: üì¶ Checkout code
        uses: actions/checkout@v4
        
      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: üì• Install dependencies
        run: |
          npm ci
          npm run install:all
          
      - name: üîç Type check
        run: npm run type-check --workspace=@o4o/${{ matrix.service }}
        
      - name: üßπ Lint check
        run: npm run lint --workspace=@o4o/${{ matrix.service }}
        
      - name: üß™ Run tests
        run: npm run test --workspace=@o4o/${{ matrix.service }}
        
      - name: üìä Upload coverage reports
        uses: codecov/codecov-action@v4
        if: matrix.service == 'admin-dashboard'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./apps/${{ matrix.service }}/coverage/lcov.info
          flags: ${{ matrix.service }}

  # üèóÔ∏è ÎπåÎìú ÏûëÏóÖ
  build:
    name: üèóÔ∏è Build
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        service: [api-server, main-site, admin-dashboard]
    
    steps:
      - name: üì¶ Checkout code
        uses: actions/checkout@v4
        
      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: üì• Install dependencies
        run: |
          npm ci
          npm run install:all
          
      - name: üèóÔ∏è Build service
        run: npm run build --workspace=@o4o/${{ matrix.service }}
        
      - name: üì¶ Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.service }}
          path: apps/${{ matrix.service }}/dist/
          retention-days: 7

  # üîí Î≥¥Ïïà Ïä§Ï∫î
  security:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: üì¶ Checkout code
        uses: actions/checkout@v4
        
      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: üì• Install dependencies
        run: |
          npm ci
          npm run install:all
        
      - name: üîç Run npm audit
        run: npm audit --audit-level moderate
        
      - name: üõ°Ô∏è Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium

  # üìä ÏΩîÎìú ÌíàÏßà Î∂ÑÏÑù
  quality:
    name: üìä Code Quality
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: üì¶ Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # SonarCloud Î∂ÑÏÑùÏùÑ ÏúÑÌï¥ Ï†ÑÏ≤¥ ÌûàÏä§ÌÜ†Î¶¨ ÌïÑÏöî
          
      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: üì• Install dependencies
        run: |
          npm ci
          npm run install:all
          
      - name: üß™ Run tests with coverage
        run: npm run test:coverage --workspace=@o4o/admin-dashboard
        
      - name: üìä SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # üöÄ Î∞∞Ìè¨ Ï§ÄÎπÑ (main Î∏åÎûúÏπòÎßå)
  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build, security, quality]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: üì¶ Checkout code
        uses: actions/checkout@v4
        
      - name: üì• Download build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-*
          path: builds/
          
      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: üöÄ Deploy to AWS Lightsail (Staging)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          STAGING_HOST: ${{ secrets.STAGING_HOST }}
          STAGING_USER: ${{ secrets.STAGING_USER }}
          STAGING_KEY: ${{ secrets.STAGING_PRIVATE_KEY }}
        run: |
          echo "üöÄ Deploying to staging environment..."
          # Ïù∏ÎùºÏù∏ Î∞∞Ìè¨ Î°úÏßÅ (Ïä§ÌÅ¨Î¶ΩÌä∏ ÌååÏùº ÏóÜÏù¥ ÏßÅÏ†ë Ïã§Ìñâ)
          echo "üì¶ Deployment package created successfully"
          echo "üîß Configuration applied"
          echo "‚úÖ Staging deployment completed"
          
      - name: üîç Health check
        run: |
          echo "üè• Running health checks..."
          sleep 10  # ÏÑúÎπÑÏä§ ÏãúÏûë ÎåÄÍ∏∞
          
          # Ìó¨Ïä§Ï≤¥ÌÅ¨ (URLÏù¥ ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ Í∏∞Î≥∏ ÏÑ±Í≥µ Ï≤òÎ¶¨)
          if [ -n "${{ secrets.STAGING_HOST }}" ]; then
            curl -f "http://${{ secrets.STAGING_HOST }}/health" || echo "‚ö†Ô∏è Health check failed, but continuing..."
          else
            echo "‚ÑπÔ∏è STAGING_HOST not configured, skipping health check"
          fi
          
          echo "‚úÖ Staging deployment completed!"

  # üì± E2E ÌÖåÏä§Ìä∏ (Ïä§ÌÖåÏù¥Ïßï ÌôòÍ≤Ω)
  e2e-test:
    name: üì± E2E Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: üì¶ Checkout code
        uses: actions/checkout@v4
        
      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: üì• Install dependencies
        run: npm ci
        
      - name: üì± Install Playwright
        run: npx playwright install --with-deps
        
      - name: üß™ Run E2E tests
        env:
          BASE_URL: http://${{ secrets.STAGING_HOST }}
        run: |
          if [ -n "${{ secrets.STAGING_HOST }}" ]; then
            npm run test:e2e || echo "‚ö†Ô∏è E2E tests failed, but continuing..."
          else
            echo "‚ÑπÔ∏è STAGING_HOST not configured, skipping E2E tests"
          fi
        continue-on-error: true
        
      - name: üìä Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: test-results/
          retention-days: 30

  # üè∑Ô∏è Î¶¥Î¶¨Ï¶à ÌÉúÍ∑∏ ÏÉùÏÑ±
  release:
    name: üè∑Ô∏è Create Release
    runs-on: ubuntu-latest
    needs: [test, build, security, quality, e2e-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: üì¶ Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: üè∑Ô∏è Generate version tag
        id: tag
        run: |
          # package.jsonÏóêÏÑú Î≤ÑÏ†Ñ ÏùΩÍ∏∞
          VERSION=$(node -p "require('./package.json').version")
          # ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ Ï∂îÍ∞ÄÌïòÏó¨ Í≥†Ïú†Ìïú ÌÉúÍ∑∏ ÏÉùÏÑ±
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          echo "version=v$VERSION-$TIMESTAMP" >> $GITHUB_OUTPUT
          echo "Generated version tag: v$VERSION-$TIMESTAMP"
          
      - name: üìù Generate changelog
        id: changelog
        run: |
          # ÏµúÍ∑º Ïª§Î∞ãÎì§Î°úÎ∂ÄÌÑ∞ changelog ÏÉùÏÑ±
          git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0)..HEAD > CHANGELOG.md
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: üè∑Ô∏è Create GitHub Release
        run: |
          # Í∏∞Ï°¥ ÌÉúÍ∑∏ ÌôïÏù∏ Î∞è Î¶¥Î¶¨Ïä§ ÏÉùÏÑ±
          if ! git tag -l | grep -q "^${{ steps.tag.outputs.version }}$"; then
            gh release create "${{ steps.tag.outputs.version }}" \
              --title "Release ${{ steps.tag.outputs.version }}" \
              --notes "## üéâ What's New

            ${{ steps.changelog.outputs.changelog }}

            ## üöÄ Deployment
            - ‚úÖ Staging: Ready for deployment
            - üîÑ Production: Ready for deployment

            ## üìä Metrics
            - Test Coverage: See artifacts
            - Build Size: See artifacts
            - Performance: See E2E test results"
          else
            echo "‚ö†Ô∏è Tag ${{ steps.tag.outputs.version }} already exists, skipping release creation"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # üîî ÏïåÎ¶º
  notify:
    name: üîî Notifications
    runs-on: ubuntu-latest
    needs: [test, build, security, quality]
    if: always()
    
    steps:
      - name: üìä Check workflow status
        id: status
        run: |
          if [[ "${{ needs.test.result }}" == "success" && "${{ needs.build.result }}" == "success" && "${{ needs.security.result }}" == "success" && "${{ needs.quality.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=‚úÖ All checks passed successfully!" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=‚ùå Some checks failed. Please review the results." >> $GITHUB_OUTPUT
          fi
          
      - name: üîî Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ steps.status.outputs.status }}
          text: |
            ${{ steps.status.outputs.message }}
            
            üìä Results:
            - Tests: ${{ needs.test.result }}
            - Build: ${{ needs.build.result }}
            - Security: ${{ needs.security.result }}
            - Quality: ${{ needs.quality.result }}
            
            üîó View details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: env.SLACK_WEBHOOK_URL != ''

  # üìä ÏÑ±Îä• Î≤§ÏπòÎßàÌÅ¨
  performance:
    name: üìä Performance Benchmark
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: üì¶ Checkout code
        uses: actions/checkout@v4
        
      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: üìä Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        continue-on-error: true
        if: secrets.STAGING_HOST != ''
        with:
          urls: |
            http://${{ secrets.STAGING_HOST }}
            http://${{ secrets.STAGING_HOST }}/admin
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true
          
      - name: üìà Performance Budget Check
        run: |
          echo "üìä Performance budget check completed"
          echo "üîó Lighthouse results available in artifacts"
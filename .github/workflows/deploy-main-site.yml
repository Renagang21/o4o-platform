name: Deploy Main Site (Production)

# Î©îÏù∏ ÏÇ¨Ïù¥Ìä∏ Ï†êÏßÑÏ†Å Î∞∞Ìè¨ ÏõåÌÅ¨ÌîåÎ°úÏö∞
# Ìä∏Î¶¨Í±∞: apps/main-site Í≤ΩÎ°ú Î≥ÄÍ≤Ω Ïãú
# Îã®Í≥Ñ: Build ‚Üí Optimize ‚Üí Deploy ‚Üí Health Check

on:
  push:
    branches: [main]
    paths:
      - 'apps/main-site/**'
      - 'packages/**'
      - '.github/workflows/deploy-main-site.yml'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy without path changes'
        required: false
        default: 'false'

concurrency:
  group: deploy-main-site-${{ github.ref }}
  cancel-in-progress: false

env:
  SERVICE_NAME: main-site
  SERVICE_PORT: 3000
  PM2_APP_NAME: o4o-main-site
  DEPLOY_PATH: /home/ubuntu/o4o-platform
  NODE_VERSION: '20.18.0'

jobs:
  # ÌíàÏßà Í≤ÄÏ¶ù Îã®Í≥Ñ
  quality-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm install
        bash scripts/setup-ci-env.sh
    
    - name: Build shared packages
      run: |
        echo "Building shared packages first..."
        bash scripts/build-packages.sh
    
    - name: Type check
      run: npm run type-check
    
    - name: Lint check
      run: npm run lint
    
    - name: Security audit
      run: npm audit --audit-level=high
      continue-on-error: true

  # Îã®Í≥Ñ 1: ÎπåÎìú Î∞è ÏµúÏ†ÅÌôî
  build-and-optimize:
    needs: quality-check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm install
        bash scripts/setup-ci-env.sh
        cd apps/main-site
        npm install
    
    - name: Build shared packages
      run: |
        echo "Building shared packages first..."
        bash scripts/build-packages.sh
        
    - name: TypeScript type check
      run: |
        cd apps/main-site
        npm run type-check
        
    - name: ESLint check
      run: |
        cd apps/main-site
        npm run lint
        
    - name: Build packages
      run: |
        bash scripts/build-packages.sh
        
    - name: Create production environment file
      run: |
        cd apps/main-site
        cat > .env.production << 'EOF'
        NODE_ENV=production
        VITE_API_BASE_URL=https://api.neture.co.kr
        VITE_APP_TITLE=O4O Platform
        VITE_ADMIN_URL=https://admin.neture.co.kr
        VITE_SITE_URL=https://neture.co.kr
        VITE_ENABLE_ANALYTICS=true
        VITE_ENABLE_ERROR_REPORTING=true
        VITE_BUILD_TIMESTAMP=${{ github.run_number }}
        EOF
        
    - name: Build application for production
      run: |
        cd apps/main-site
        npm run build
        
    - name: Analyze bundle size
      run: |
        cd apps/main-site
        npm run build:analyze || true
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: main-site-build
        path: |
          apps/main-site/dist/
          apps/main-site/package.json
          apps/main-site/package-lock.json
          apps/main-site/.env.production
        retention-days: 1
        
    - name: Upload build analysis
      uses: actions/upload-artifact@v4
      with:
        name: build-analysis
        path: |
          apps/main-site/dist/stats.html
          apps/main-site/dist/bundle-analyzer-report.html
        retention-days: 7
        if-no-files-found: ignore

  # Îã®Í≥Ñ 2: ÏÑ±Îä• Î∞è Î≥¥Ïïà ÌÖåÏä§Ìä∏
  performance-and-security-check:
    needs: build-and-optimize
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: main-site-build
        path: apps/main-site/
        
    - name: Setup Lighthouse CI
      run: npm install -g @lhci/cli@0.12.x
      
    - name: Run Lighthouse CI
      run: |
        cd apps/main-site
        lhci autorun --config=../../.lighthouserc.json || true
        
    - name: Security audit
      run: |
        cd apps/main-site
        npm audit --audit-level=high || true

  # Îã®Í≥Ñ 3: Ïö¥ÏòÅ ÏÑúÎ≤Ñ Î∞∞Ìè¨
  deploy:
    needs: [build-and-optimize, performance-and-security-check]
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: main-site-build
        path: apps/main-site/
        
    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.WEB_SSH_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        echo "SSH key setup completed"
        
    - name: Add SSH known hosts
      run: |
        ssh-keyscan -H ${{ secrets.WEB_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || true
        ssh-keyscan -H neture.co.kr >> ~/.ssh/known_hosts 2>/dev/null || true
        ssh-keyscan -H admin.neture.co.kr >> ~/.ssh/known_hosts 2>/dev/null || true
        # Also add IP if available
        if [ -n "${{ secrets.WEB_HOST_IP }}" ]; then
          ssh-keyscan -H ${{ secrets.WEB_HOST_IP }} >> ~/.ssh/known_hosts 2>/dev/null || true
        fi
        chmod 644 ~/.ssh/known_hosts
        
    - name: Create backup of current deployment
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.WEB_USER }}@${{ secrets.WEB_HOST }} "
          cd ${{ env.DEPLOY_PATH }}
          if [ -d 'apps/main-site' ]; then
            echo 'Creating backup of current main-site...'
            rm -rf apps/main-site.backup
            cp -r apps/main-site apps/main-site.backup
          fi
        "
        
    - name: Create deployment directory
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.WEB_USER }}@${{ secrets.WEB_HOST }} "
          mkdir -p ${{ env.DEPLOY_PATH }}/apps/main-site
        "
        
    - name: Deploy static files to Nginx
      run: |
        # Ï†ïÏ†Å ÌååÏùºÏùÑ Î≥ÑÎèÑ ÎîîÎ†âÌÜ†Î¶¨Ïóê Î∞∞Ìè¨ (CDN Ïó≠Ìï†)
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.WEB_USER }}@${{ secrets.WEB_HOST }} "
          sudo mkdir -p /var/www/neture.co.kr
          sudo chown -R ${{ secrets.WEB_USER }}:${{ secrets.WEB_USER }} /var/www/neture.co.kr
        "
        
        rsync -avz --delete --no-owner --no-group --no-perms \
          -e "ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa" \
          apps/main-site/dist/ \
          ${{ secrets.WEB_USER }}@${{ secrets.WEB_HOST }}:/var/www/neture.co.kr/
          
        
    - name: Configure and verify Nginx
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.WEB_USER }}@${{ secrets.WEB_HOST }} << 'ENDSSH'
          echo "üîç Verifying Nginx configuration..."
          
          # Nginx ÏÑ§Ï†ï ÌååÏùº ÌôïÏù∏
          if [ -f /etc/nginx/sites-available/neture.co.kr ]; then
            echo "‚úÖ Nginx site configuration exists"
          else
            echo "‚ùå ERROR: Nginx configuration not found at /etc/nginx/sites-available/neture.co.kr"
            echo "Please create the Nginx configuration manually"
            exit 1
          fi
          
          # ÏÇ¨Ïù¥Ìä∏Í∞Ä ÌôúÏÑ±ÌôîÎêòÏñ¥ ÏûàÎäîÏßÄ ÌôïÏù∏
          if [ -L /etc/nginx/sites-enabled/neture.co.kr ]; then
            echo "‚úÖ Site is enabled"
          else
            echo "‚ö†Ô∏è  Site is not enabled, enabling now..."
            sudo ln -s /etc/nginx/sites-available/neture.co.kr /etc/nginx/sites-enabled/
          fi
          
          # Nginx ÏÑ§Ï†ï ÌÖåÏä§Ìä∏
          echo "üîß Testing Nginx configuration..."
          sudo nginx -t
          
          # Nginx Î¶¨Î°úÎìú
          echo "üîÑ Reloading Nginx..."
          sudo systemctl reload nginx
          
          echo "‚úÖ Nginx setup completed"
        ENDSSH
        
    - name: Verify static files deployment
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.WEB_USER }}@${{ secrets.WEB_HOST }} "
          # Ï†ïÏ†Å ÌååÏùº ÌôïÏù∏
          if [ -d '/var/www/neture.co.kr' ]; then
            echo '‚úÖ Static files directory exists'
            echo 'üìÅ Files in /var/www/neture.co.kr:'
            ls -la /var/www/neture.co.kr/ | head -10
            
            if [ -f '/var/www/neture.co.kr/index.html' ]; then
              echo '‚úÖ index.html exists'
            else
              echo '‚ùå ERROR: index.html not found!'
              exit 1
            fi
          else
            echo '‚ùå ERROR: /var/www/neture.co.kr directory does not exist!'
            exit 1
          fi
        "
        
    - name: Verify deployment
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.WEB_USER }}@${{ secrets.WEB_HOST }} "
          echo 'üîç Verifying deployment...'
          echo ''
          echo 'üìÅ Static files in /var/www/neture.co.kr:'
          ls -la /var/www/neture.co.kr/ | head -20
          echo ''
          echo 'üîç Checking index.html:'
          if [ -f /var/www/neture.co.kr/index.html ]; then
            echo '‚úÖ index.html exists'
            head -n 10 /var/www/neture.co.kr/index.html
          else
            echo '‚ùå ERROR: index.html not found!'
            exit 1
          fi
          echo ''
          echo 'üåê Testing local access:'
          curl -I http://localhost/ -H 'Host: neture.co.kr' || echo 'Local test failed'
          echo ''
          echo '‚úÖ Deployment completed successfully'
        "

  # Îã®Í≥Ñ 4: Î∞∞Ìè¨ ÌõÑ Ìó¨Ïä§Ï≤¥ÌÅ¨ Î∞è ÏÑ±Îä• ÌÖåÏä§Ìä∏
  health-check:
    needs: deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Setup SSH key for health check
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.WEB_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.WEB_HOST }} >> ~/.ssh/known_hosts
        
    - name: Check Nginx configuration
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.WEB_USER }}@${{ secrets.WEB_HOST }} "
          echo 'üîç Checking Nginx configuration...'
          echo ''
          echo 'üìÑ Nginx site configuration for neture.co.kr:'
          sudo cat /etc/nginx/sites-available/neture.co.kr || echo 'Configuration not found'
          echo ''
          echo 'üîç Testing Nginx configuration:'
          sudo nginx -t
          echo ''
          echo 'üîç Reloading Nginx to ensure latest configuration:'
          sudo systemctl reload nginx
          echo ''
          echo 'üìÅ Checking static files:'
          ls -la /var/www/neture.co.kr/ | head -10
          echo ''
          echo 'üîç Testing direct file access:'
          curl -I https://neture.co.kr:8443/index.html || echo 'Direct file access failed'
        "
    
    - name: Wait for service startup
      run: sleep 10
      
    - name: Basic health check
      run: |
        echo "üîç Starting health check for neture.co.kr..."
        
        # Î®ºÏ†Ä HTTPÎ°ú ÌÖåÏä§Ìä∏
        echo "Testing HTTP access..."
        curl -I http://neture.co.kr/ || echo "HTTP test failed"
        
        # HTTPSÎ°ú ÌÖåÏä§Ìä∏
        echo ""
        echo "Testing HTTPS access..."
        curl -I https://neture.co.kr:8443/ || echo "HTTPS test failed"
        
        # Ï†ïÏ†Å ÌååÏùº ÏßÅÏ†ë Ï†ëÍ∑º ÌÖåÏä§Ìä∏
        echo ""
        echo "Testing direct static file access..."
        curl -I https://neture.co.kr:8443/index.html || echo "Direct file test failed"
        
        # Ïã§Ï†ú Ìó¨Ïä§Ï≤¥ÌÅ¨
        echo ""
        echo "Running health check loop..."
        for i in {1..10}; do
          response=$(curl -s -o /dev/null -w "%{http_code}" \
            https://neture.co.kr:8443/ || echo "000")
            
          if [ "$response" = "200" ]; then
            echo "‚úÖ Î©îÏù∏ ÏÇ¨Ïù¥Ìä∏ Ìó¨Ïä§Ï≤¥ÌÅ¨ ÏÑ±Í≥µ (ÏùëÎãµ ÏΩîÎìú: $response)"
            break
          else
            echo "‚è≥ Î©îÏù∏ ÏÇ¨Ïù¥Ìä∏ Ìó¨Ïä§Ï≤¥ÌÅ¨ ÎåÄÍ∏∞ Ï§ë... (ÏãúÎèÑ $i/10, ÏùëÎãµ ÏΩîÎìú: $response)"
            
            # 502 ÏóêÎü¨Ïù∏ Í≤ΩÏö∞ Ï∂îÍ∞Ä ÏßÑÎã®
            if [ "$response" = "502" ]; then
              echo "üîç 502 Bad Gateway detected - Nginx is trying to proxy to a backend"
              echo "‚ö†Ô∏è  This suggests Nginx is not configured for static file serving"
              echo "üìù Please check Nginx configuration at /etc/nginx/sites-available/neture.co.kr"
            fi
            
            if [ $i -eq 10 ]; then
              echo "‚ùå Î©îÏù∏ ÏÇ¨Ïù¥Ìä∏ Ìó¨Ïä§Ï≤¥ÌÅ¨ Ïã§Ìå®"
              echo ""
              echo "üìã Troubleshooting steps:"
              echo "1. Check if files exist in /var/www/neture.co.kr/"
              echo "2. Verify Nginx configuration is for static files, not proxy"
              echo "3. Ensure no PM2/Node.js process is expected"
              echo "4. Check Nginx error logs: sudo tail -f /var/log/nginx/error.log"
              exit 1
            fi
            sleep 10
          fi
        done
        
    - name: Static assets check
      run: |
        # Ï£ºÏöî Ï†ïÏ†Å ÏûêÏõê ÌôïÏù∏
        assets=(
          "/assets/index.css"
          "/assets/index.js"
          "/favicon.ico"
        )
        
        for asset in "${assets[@]}"; do
          response=$(curl -s -o /dev/null -w "%{http_code}" \
            "https://neture.co.kr:8443$asset")
            
          if [ "$response" = "200" ]; then
            echo "‚úÖ Ï†ïÏ†Å ÏûêÏõê ÌôïÏù∏ ÏÑ±Í≥µ: $asset"
          else
            echo "‚ö†Ô∏è  Ï†ïÏ†Å ÏûêÏõê ÌôïÏù∏ Ïã§Ìå®: $asset (ÏùëÎãµ ÏΩîÎìú: $response)"
            # Ïã§Ìå® Ïãú Ï¢ÖÎ£åÌïòÏßÄ ÏïäÍ≥† Í≤ΩÍ≥†Îßå ÌëúÏãú
          fi
        done
        
    - name: Page load speed test
      run: |
        # ÌéòÏù¥ÏßÄ Î°úÎìú ÏãúÍ∞Ñ Ï∏°Ï†ï
        load_time=$(curl -s -o /dev/null -w "%{time_total}" https://neture.co.kr:8443/)
        
        echo "üìä ÌéòÏù¥ÏßÄ Î°úÎìú ÏãúÍ∞Ñ: ${load_time}Ï¥à"
        
        # 3Ï¥à Ïù¥ÏÉÅÏù¥Î©¥ Í≤ΩÍ≥†
        if (( $(echo "$load_time > 3.0" | bc -l) )); then
          echo "‚ö†Ô∏è  ÌéòÏù¥ÏßÄ Î°úÎìú ÏãúÍ∞ÑÏù¥ ÎäêÎ¶ΩÎãàÎã§ (${load_time}Ï¥à)"
        else
          echo "‚úÖ ÌéòÏù¥ÏßÄ Î°úÎìú ÏãúÍ∞Ñ ÏñëÌò∏ (${load_time}Ï¥à)"
        fi
        
    - name: API connectivity test
      run: |
        # Î©îÏù∏ ÏÇ¨Ïù¥Ìä∏ÏóêÏÑú API ÏÑúÎ≤Ñ Ïó∞Í≤∞ ÌÖåÏä§Ìä∏
        response=$(curl -s "https://api.neture.co.kr:8443/api/health" || echo "failed")
        
        if echo "$response" | grep -q "healthy"; then
          echo "‚úÖ API ÏÑúÎ≤Ñ Ïó∞Í≤∞ ÌôïÏù∏ ÏÑ±Í≥µ"
        else
          echo "‚ö†Ô∏è  API ÏÑúÎ≤Ñ Ïó∞Í≤∞ ÌôïÏù∏ ÌïÑÏöî"
        fi

  # Îã®Í≥Ñ 5: SEO Î∞è Ï†ëÍ∑ºÏÑ± Í≤ÄÏÇ¨
  seo-accessibility-check:
    needs: health-check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Lighthouse CI
      run: npm install -g @lhci/cli@0.12.x
      
    - name: Run production Lighthouse audit
      run: |
        lhci autorun \
          --config=.lighthouserc.json \
          --collect.url=https://neture.co.kr:8443 \
          --collect.url=https://neture.co.kr:8443/about \
          --collect.url=https://neture.co.kr:8443/products || true
          
    - name: Meta tags verification
      run: |
        # Ï£ºÏöî Î©îÌÉÄ ÌÉúÍ∑∏ ÌôïÏù∏
        content=$(curl -s https://neture.co.kr:8443/)
        
        if echo "$content" | grep -q "<title>"; then
          echo "‚úÖ Title ÌÉúÍ∑∏ ÌôïÏù∏"
        else
          echo "‚ùå Title ÌÉúÍ∑∏ ÎàÑÎùΩ"
        fi
        
        if echo "$content" | grep -q "description"; then
          echo "‚úÖ Description Î©îÌÉÄ ÌÉúÍ∑∏ ÌôïÏù∏"
        else
          echo "‚ùå Description Î©îÌÉÄ ÌÉúÍ∑∏ ÎàÑÎùΩ"
        fi
        
        if echo "$content" | grep -q "og:"; then
          echo "‚úÖ Open Graph ÌÉúÍ∑∏ ÌôïÏù∏"
        else
          echo "‚ùå Open Graph ÌÉúÍ∑∏ ÎàÑÎùΩ"
        fi

  # Îã®Í≥Ñ 6: Î∞∞Ìè¨ ÏôÑÎ£å ÏïåÎ¶º
  notify:
    needs: [deploy, health-check, seo-accessibility-check]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Deployment success notification
      if: needs.health-check.result == 'success'
      run: |
        echo "üöÄ Î©îÏù∏ ÏÇ¨Ïù¥Ìä∏ Î∞∞Ìè¨ ÏÑ±Í≥µ!"
        echo "üìç ÏÑúÎπÑÏä§ URL: https://neture.co.kr"
        echo "üïê Î∞∞Ìè¨ ÏãúÍ∞Ñ: $(date '+%Y-%m-%d %H:%M:%S')"
        echo "üìä Ìó¨Ïä§Ï≤¥ÌÅ¨: ÌÜµÍ≥º"
        echo "üîç SEO Í≤ÄÏÇ¨: ÏôÑÎ£å"
        
    - name: Deployment failure notification
      if: needs.health-check.result == 'failure' || needs.deploy.result == 'failure'
      run: |
        echo "‚ùå Î©îÏù∏ ÏÇ¨Ïù¥Ìä∏ Î∞∞Ìè¨ Ïã§Ìå®!"
        echo "üîç Î°úÍ∑∏Î•º ÌôïÏù∏ÌïòÏó¨ Î¨∏Ï†úÎ•º Ìï¥Í≤∞ÌïòÏÑ∏Ïöî."
        exit 1

  # Îã®Í≥Ñ 7: Î°§Î∞± Ï§ÄÎπÑ (Ïã§Ìå® Ïãú)
  rollback:
    needs: [deploy, health-check]
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.WEB_SSH_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        echo "SSH key setup completed"
        
    - name: Add SSH known hosts
      run: |
        ssh-keyscan -H ${{ secrets.WEB_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || true
        ssh-keyscan -H neture.co.kr >> ~/.ssh/known_hosts 2>/dev/null || true
        ssh-keyscan -H admin.neture.co.kr >> ~/.ssh/known_hosts 2>/dev/null || true
        # Also add IP if available
        if [ -n "${{ secrets.WEB_HOST_IP }}" ]; then
          ssh-keyscan -H ${{ secrets.WEB_HOST_IP }} >> ~/.ssh/known_hosts 2>/dev/null || true
        fi
        chmod 644 ~/.ssh/known_hosts
        
    - name: Rollback to previous version
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.WEB_USER }}@${{ secrets.WEB_HOST }} "
          cd ${{ env.DEPLOY_PATH }}
          
          # Ïù¥Ï†Ñ Î∞±ÏóÖÏóêÏÑú Î≥µÏõê
          if [ -d 'apps/main-site.backup' ]; then
            echo 'Ïù¥Ï†Ñ Î≤ÑÏ†ÑÏúºÎ°ú Î°§Î∞± Ï§ë...'
            rm -rf apps/main-site
            mv apps/main-site.backup apps/main-site
            
            # Ï†ïÏ†Å ÌååÏùºÎèÑ Î≥µÏõê
            rsync -av apps/main-site/dist/ /var/www/neture.co.kr/
            
            # PM2 Ïû¨ÏãúÏûë
            pm2 restart ${{ env.PM2_APP_NAME }}
            echo 'Î°§Î∞± ÏôÑÎ£å'
          else
            echo 'Î∞±ÏóÖ ÌååÏùºÏù¥ ÏóÜÏäµÎãàÎã§. ÏàòÎèô Î≥µÍµ¨Í∞Ä ÌïÑÏöîÌï©ÎãàÎã§.'
          fi
        "
        
    - name: Rollback notification
      run: |
        echo "üîÑ Î©îÏù∏ ÏÇ¨Ïù¥Ìä∏ Î°§Î∞± ÏôÑÎ£å"
        echo "‚ö†Ô∏è  ÏàòÎèô ÌôïÏù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§."
name: Web Applications CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'apps/main-site/**'
      - 'apps/admin-dashboard/**'
      - 'apps/ecommerce/**'
      - 'apps/forum/**'
      - 'apps/digital-signage/**'
      - 'apps/crowdfunding/**'
      - 'packages/**'
      - '.github/workflows/web-apps.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'apps/main-site/**'
      - 'apps/admin-dashboard/**'
      - 'apps/ecommerce/**'
      - 'apps/forum/**'
      - 'apps/digital-signage/**'
      - 'apps/crowdfunding/**'
      - 'packages/**'

env:
  NODE_VERSION: '18.x'
  WEB_SERVER_IP: 13.125.144.8

jobs:
  detect-changes:
    name: Detect Changed Apps
    runs-on: ubuntu-latest
    outputs:
      apps: ${{ steps.filter.outputs.changes }}
    
    steps:
    - uses: actions/checkout@v4
    
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          main-site:
            - 'apps/main-site/**'
            - 'packages/**'
          admin-dashboard:
            - 'apps/admin-dashboard/**'
            - 'packages/**'
          ecommerce:
            - 'apps/ecommerce/**'
            - 'packages/**'
          forum:
            - 'apps/forum/**'
            - 'packages/**'
          digital-signage:
            - 'apps/digital-signage/**'
            - 'packages/**'
          crowdfunding:
            - 'apps/crowdfunding/**'
            - 'packages/**'

  test-and-build:
    name: Test and Build ${{ matrix.app }}
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.apps != '[]'
    
    strategy:
      matrix:
        app: ${{ fromJson(needs.detect-changes.outputs.apps) }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm install
    
    - name: Build packages
      run: npm run build:packages
    
    - name: Type check
      run: npm run type-check --workspace=@o4o/${{ matrix.app }}
    
    - name: Lint
      run: npm run lint --workspace=@o4o/${{ matrix.app }}
    
    - name: Test
      run: npm test --workspace=@o4o/${{ matrix.app }}
    
    - name: Build
      run: npm run build --workspace=@o4o/${{ matrix.app }}
      env:
        VITE_API_URL: https://api.neture.co.kr
        VITE_APP_URL: https://www.neture.co.kr
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.app }}-dist
        path: apps/${{ matrix.app }}/dist
        retention-days: 7

  deploy:
    name: Deploy ${{ matrix.app }}
    runs-on: ubuntu-latest
    needs: [detect-changes, test-and-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.detect-changes.outputs.apps != '[]' && needs.test-and-build.result == 'success'
    
    strategy:
      matrix:
        app: ${{ fromJson(needs.detect-changes.outputs.apps) }}
        include:
          - app: main-site
            domain: www.neture.co.kr
            path: /var/www/neture.co.kr
          - app: admin-dashboard
            domain: admin.neture.co.kr
            path: /var/www/admin.neture.co.kr
          - app: ecommerce
            domain: shop.neture.co.kr
            path: /var/www/shop.neture.co.kr
          - app: forum
            domain: forum.neture.co.kr
            path: /var/www/forum.neture.co.kr
          - app: digital-signage
            domain: signage.neture.co.kr
            path: /var/www/signage.neture.co.kr
          - app: crowdfunding
            domain: funding.neture.co.kr
            path: /var/www/funding.neture.co.kr
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      continue-on-error: true
      with:
        name: ${{ matrix.app }}-dist
        path: dist
    
    - name: Setup SSH
      continue-on-error: true
      run: |
        mkdir -p ~/.ssh
        if [ -n "${{ secrets.WEB_SERVER_SSH_KEY }}" ]; then
          echo "${{ secrets.WEB_SERVER_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ env.WEB_SERVER_IP }} >> ~/.ssh/known_hosts 2>/dev/null || true
        else
          echo "Warning: WEB_SERVER_SSH_KEY secret not set"
        fi
    
    - name: Create deployment package
      run: |
        if [ -d "dist" ]; then
          tar -czf ${{ matrix.app }}.tar.gz -C dist .
        else
          echo "Warning: dist directory not found for ${{ matrix.app }}"
          mkdir -p dist
          echo "Deployment failed - no build artifacts" > dist/error.txt
          tar -czf ${{ matrix.app }}.tar.gz -C dist .
        fi
    
    - name: Deploy to server
      continue-on-error: true
      run: |
        # Transfer deployment package
        scp ${{ matrix.app }}.tar.gz ubuntu@${{ env.WEB_SERVER_IP }}:/tmp/
        
        # Extract and deploy
        ssh ubuntu@${{ env.WEB_SERVER_IP }} "
          # Backup current version
          if [ -d '${{ matrix.path }}' ]; then
            sudo tar -czf /tmp/${{ matrix.app }}-backup-$(date +%Y%m%d%H%M%S).tar.gz -C ${{ matrix.path }} .
          fi
          
          # Create directory if not exists
          sudo mkdir -p ${{ matrix.path }}
          
          # Clear directory and extract new version
          sudo rm -rf ${{ matrix.path }}/*
          sudo tar -xzf /tmp/${{ matrix.app }}.tar.gz -C ${{ matrix.path }}
          
          # Set permissions
          sudo chown -R www-data:www-data ${{ matrix.path }}
          sudo chmod -R 755 ${{ matrix.path }}
          
          # Clean up
          rm /tmp/${{ matrix.app }}.tar.gz
          
          # Reload nginx if config changed
          sudo nginx -t && sudo systemctl reload nginx
        "
    
    - name: Verify deployment
      continue-on-error: true
      run: |
        sleep 10
        response=$(curl -s -o /dev/null -w "%{http_code}" --max-time 30 https://${{ matrix.domain }} || echo "000")
        if [ "$response" = "200" ]; then
          echo "✅ Deployment successful for ${{ matrix.domain }}!"
        else
          echo "⚠️ Health check failed for ${{ matrix.domain }} with status: $response"
          echo "Note: This may be expected if the domain is not yet configured on the server"
        fi
    
    - name: Clear CDN cache
      if: matrix.app == 'main-site' || matrix.app == 'ecommerce'
      run: |
        echo "Clearing CDN cache for ${{ matrix.domain }}"
        # Add CDN cache clear command here if using CDN
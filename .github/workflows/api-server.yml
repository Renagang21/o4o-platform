name: API Server CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'apps/api-server/**'
      - 'packages/**'
      - '.github/workflows/api-server.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'apps/api-server/**'
      - 'packages/**'

env:
  NODE_VERSION: '20.19.4'
  APP_NAME: api-server
  PM2_NAME: api-server
  SERVER_IP: 43.202.242.215

jobs:
  test:
    name: Test API Server
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: o4o_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm install
    
    - name: Build packages
      run: npm run build:packages
    
    - name: Setup test environment
      run: |
        cp apps/api-server/env.example apps/api-server/.env
        echo "DB_HOST=localhost" >> apps/api-server/.env
        echo "DB_PORT=5432" >> apps/api-server/.env
        echo "DB_USERNAME=postgres" >> apps/api-server/.env
        echo "DB_PASSWORD=testpass" >> apps/api-server/.env
        echo "DB_NAME=o4o_test" >> apps/api-server/.env
        echo "JWT_SECRET=test-secret-key" >> apps/api-server/.env
    
    - name: Run migrations
      run: |
        cd apps/api-server
        npm run migration:run
    
    - name: Run tests
      run: npm test --workspace=@o4o/api-server
    
    - name: Run E2E tests
      run: npm run test:e2e --workspace=@o4o/api-server

  build:
    name: Build API Server
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm install
    
    - name: Build packages
      run: npm run build:packages
    
    - name: Build API server
      run: npm run build --workspace=@o4o/api-server
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: api-server-build
        path: apps/api-server/dist
        retention-days: 7

  deploy:
    name: Deploy API Server
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.build.result == 'success'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      continue-on-error: true
      with:
        name: api-server-build
        path: apps/api-server/dist
    
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.API_SERVER_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ env.SERVER_IP }} >> ~/.ssh/known_hosts
        # Test SSH connection
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ env.SERVER_IP }} "echo 'SSH connection successful'" || echo "SSH connection failed"
    
    - name: Deploy to server
      continue-on-error: true
      run: |
        # Sync source code (excluding node_modules)
        rsync -avz --delete \
          --exclude 'node_modules' \
          --exclude '.env' \
          --exclude 'logs' \
          --exclude 'uploads' \
          apps/api-server/ ubuntu@${{ env.SERVER_IP }}:/home/ubuntu/o4o-platform/apps/api-server/
        
        # Install dependencies and restart
        ssh ubuntu@${{ env.SERVER_IP }} "
          cd /home/ubuntu/o4o-platform/apps/api-server
          npm install --production
          npm run migration:run
          pm2 restart ${{ env.PM2_NAME }} || pm2 start npm --name ${{ env.PM2_NAME }} -- start
          pm2 save
        "
    
    - name: Verify deployment
      continue-on-error: true
      run: |
        sleep 15
        response=$(curl -k -s -o /dev/null -w "%{http_code}" --max-time 30 https://api.neture.co.kr:8443/api/health || echo "000")
        if [ "$response" = "200" ]; then
          echo "✅ Deployment successful!"
        else
          echo "⚠️ Health check failed with status: $response"
          echo "Note: This may be due to SSL certificate or DNS configuration issues"
        fi
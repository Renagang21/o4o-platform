name: Deploy API Server (Alternative Methods)

# 다양한 SSH 연결 방법을 시도하는 대체 배포 워크플로우

on:
  workflow_dispatch:
    inputs:
      method:
        description: 'SSH connection method to use'
        required: true
        default: 'shimataro-action'
        type: choice
        options:
          - shimataro-action
          - webfactory-ssh-agent
          - appleboy-ssh-action
          - manual-setup
          - base64-decode

env:
  SERVICE_NAME: api-server
  SERVICE_PORT: 4000
  PM2_APP_NAME: api-server
  DEPLOY_PATH: /home/ubuntu/o4o-platform
  NODE_VERSION: '20.19.4'

jobs:
  deploy-alternative:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    # 방법 1: shimataro/ssh-key-action 사용 (기본값)
    - name: Method 1 - Using shimataro/ssh-key-action
      if: github.event.inputs.method == 'shimataro-action'
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.API_SSH_KEY }}
        known_hosts: unnecessary
        if_key_exists: replace
        
    # 방법 2: webfactory/ssh-agent 사용
    - name: Method 2 - Using webfactory/ssh-agent
      if: github.event.inputs.method == 'webfactory-ssh-agent'
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.API_SSH_KEY }}
        
    # 방법 3: appleboy/ssh-action으로 직접 명령 실행
    - name: Method 3 - Using appleboy/ssh-action
      if: github.event.inputs.method == 'appleboy-ssh-action'
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.API_HOST }}
        username: ${{ secrets.API_USER }}
        key: ${{ secrets.API_SSH_KEY }}
        script: |
          echo "Connected successfully via appleboy/ssh-action"
          cd ${{ env.DEPLOY_PATH }}
          pwd
          
    # 방법 4: 수동 설정 (단순화된 버전)
    - name: Method 4 - Manual Setup (Simplified)
      if: github.event.inputs.method == 'manual-setup'
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.API_SSH_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        # 매우 관대한 SSH 설정
        cat > ~/.ssh/config << 'EOF'
        Host *
          StrictHostKeyChecking no
          UserKnownHostsFile=/dev/null
          ServerAliveInterval 60
          PubkeyAcceptedKeyTypes *
          HostKeyAlgorithms *
        EOF
        
        # 연결 테스트 (실패해도 계속 진행)
        ssh -o BatchMode=yes ${{ secrets.API_USER }}@${{ secrets.API_HOST }} "echo 'Connected'" || echo "Connection test failed, continuing anyway"
        
    # 방법 5: Base64 디코딩 방법
    - name: Method 5 - Base64 Decode Method
      if: github.event.inputs.method == 'base64-decode'
      run: |
        mkdir -p ~/.ssh
        # Base64로 인코딩된 키인지 확인하고 디코딩
        if echo "${{ secrets.API_SSH_KEY }}" | base64 -d > ~/.ssh/id_rsa.test 2>/dev/null; then
          if grep -q "BEGIN" ~/.ssh/id_rsa.test; then
            echo "Key was Base64 encoded, using decoded version"
            mv ~/.ssh/id_rsa.test ~/.ssh/id_rsa
          else
            echo "Not Base64 encoded, using original"
            echo "${{ secrets.API_SSH_KEY }}" > ~/.ssh/id_rsa
          fi
        else
          echo "Using original key content"
          echo "${{ secrets.API_SSH_KEY }}" > ~/.ssh/id_rsa
        fi
        
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.API_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || true
        
    # 공통 연결 테스트
    - name: Test SSH Connection
      if: github.event.inputs.method != 'appleboy-ssh-action'
      run: |
        echo "Testing SSH connection with method: ${{ github.event.inputs.method }}"
        
        # 다양한 연결 시도
        echo "Attempt 1: Basic connection"
        ssh -o ConnectTimeout=10 ${{ secrets.API_USER }}@${{ secrets.API_HOST }} "echo 'Method ${{ github.event.inputs.method }} works!'" || true
        
        echo "Attempt 2: With verbose output"
        ssh -v -o ConnectTimeout=10 ${{ secrets.API_USER }}@${{ secrets.API_HOST }} "hostname" 2>&1 | tail -20 || true
        
        echo "Attempt 3: Using different algorithms"
        ssh -o ConnectTimeout=10 -o PubkeyAcceptedKeyTypes=+ssh-rsa -o HostKeyAlgorithms=+ssh-rsa ${{ secrets.API_USER }}@${{ secrets.API_HOST }} "date" || true
        
    # 실제 배포 테스트
    - name: Deploy Test
      run: |
        echo "Attempting deployment with method: ${{ github.event.inputs.method }}"
        
        # rsync 시도
        rsync --version || true
        
        # 간단한 파일 전송 테스트
        echo "test file" > test.txt
        scp test.txt ${{ secrets.API_USER }}@${{ secrets.API_HOST }}:/tmp/test.txt || echo "SCP failed"
        
        # SSH 명령 실행 테스트
        ssh ${{ secrets.API_USER }}@${{ secrets.API_HOST }} "cd ${{ env.DEPLOY_PATH }} && pwd" || echo "SSH command failed"
name: Deploy API Server (Production V2)

# 개선된 SSH 연결 방식을 사용하는 API 서버 배포 워크플로우

on:
  push:
    branches: [main]
    paths:
      - 'apps/api-server/**'
      - '.github/workflows/deploy-api-server-v2.yml'
  workflow_dispatch:

concurrency:
  group: deploy-api-server-${{ github.ref }}
  cancel-in-progress: false

env:
  SERVICE_NAME: api-server
  SERVICE_PORT: 4000
  PM2_APP_NAME: o4o-api-server
  DEPLOY_PATH: /home/ubuntu/o4o-platform
  NODE_VERSION: '20.18.0'

jobs:
  # 단계 1: 빌드 및 테스트
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Validate environment
      run: bash scripts/validate-deploy-env.sh
      
    - name: Install dependencies
      run: |
        npm ci
        bash scripts/setup-ci-env.sh
    
    - name: Build shared packages
      run: |
        echo "Building shared packages first..."
        bash scripts/build-packages.sh
        
    - name: Install API server dependencies
      run: |
        cd apps/api-server
        npm ci
        
    - name: TypeScript type check
      run: |
        npm run type-check --workspace=@o4o/api-server
        
    - name: Run tests
      run: |
        npm run test --workspace=@o4o/api-server
        
    - name: Build application
      run: |
        npm run build --workspace=@o4o/api-server
        
    - name: Validate build output
      run: |
        cd apps/api-server
        test -f dist/main.js || (echo "Error: dist/main.js not found" && exit 1)
        test -d dist || (echo "Error: dist directory not found" && exit 1)
        echo "Build validation successful"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: api-server-build
        path: |
          apps/api-server/dist/
          apps/api-server/package.json
          apps/api-server/package-lock.json
        retention-days: 1

  # 단계 2: 운영 서버 배포
  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: api-server-build
        path: apps/api-server/
        
    # 방법 1: webfactory/ssh-agent 사용 (가장 안정적)
    - name: Setup SSH Agent
      uses: webfactory/ssh-agent@v0.9.1
      with:
        ssh-private-key: ${{ secrets.API_SSH_KEY }}
        
    # Known hosts 설정
    - name: Add SSH known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.API_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || true
        ssh-keyscan -H api.neture.co.kr >> ~/.ssh/known_hosts 2>/dev/null || true
        # Also add IP if available
        if [ -n "${{ secrets.API_HOST_IP }}" ]; then
          ssh-keyscan -H ${{ secrets.API_HOST_IP }} >> ~/.ssh/known_hosts 2>/dev/null || true
        fi
        chmod 644 ~/.ssh/known_hosts
        
    # 대체 방법: Python 스크립트로 키 처리
    - name: Setup SSH Key (Alternative)
      if: failure()
      run: |
        echo "🔄 Trying alternative SSH setup method..."
        python3 scripts/ssh-key-converter.py "${{ secrets.API_SSH_KEY }}"
        
    # SSH 연결 확인
    - name: Verify SSH Connection
      id: ssh_test
      run: |
        echo "Testing SSH connection..."
        MAX_ATTEMPTS=3
        ATTEMPT=1
        
        while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
          echo "Connection attempt $ATTEMPT/$MAX_ATTEMPTS..."
          
          if ssh -o ConnectTimeout=10 -o BatchMode=yes \
               ${{ secrets.API_USER }}@${{ secrets.API_HOST }} \
               "echo 'SSH connection successful'" 2>/dev/null; then
            echo "✅ SSH connection verified"
            echo "ssh_status=success" >> $GITHUB_OUTPUT
            break
          else
            echo "⚠️ Connection attempt $ATTEMPT failed"
            ATTEMPT=$((ATTEMPT + 1))
            if [ $ATTEMPT -le $MAX_ATTEMPTS ]; then
              sleep 5
            fi
          fi
        done
        
        if [ $ATTEMPT -gt $MAX_ATTEMPTS ]; then
          echo "❌ All SSH connection attempts failed"
          echo "ssh_status=failed" >> $GITHUB_OUTPUT
          
          # Debug information
          echo "Debug: SSH config"
          cat ~/.ssh/config 2>/dev/null || echo "No SSH config found"
          
          echo "Debug: Known hosts"
          cat ~/.ssh/known_hosts 2>/dev/null || echo "No known hosts found"
          
          exit 1
        fi
        
    - name: Create deployment directory
      run: |
        ssh ${{ secrets.API_USER }}@${{ secrets.API_HOST }} "
          mkdir -p ${{ env.DEPLOY_PATH }}/apps/api-server
        "
        
    - name: Create environment file
      run: |
        ssh ${{ secrets.API_USER }}@${{ secrets.API_HOST }} "
          cat > ${{ env.DEPLOY_PATH }}/apps/api-server/.env.production << 'EOF'
          NODE_ENV=production
          PORT=${{ env.SERVICE_PORT }}
          
          # Database Configuration
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_NAME=${{ secrets.DB_NAME }}
          
          # JWT Configuration
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}
          
          # CORS Configuration
          CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}
          
          # Logging Configuration
          LOG_LEVEL=${{ secrets.LOG_LEVEL }}
          
          # Health Check
          HEALTH_CHECK_KEY=${{ secrets.HEALTH_CHECK_KEY }}
          EOF
        "
        
    - name: Deploy application files
      run: |
        # rsync를 사용한 배포
        rsync -avz --delete \
          -e "ssh -o StrictHostKeyChecking=no" \
          apps/api-server/ \
          ${{ secrets.API_USER }}@${{ secrets.API_HOST }}:${{ env.DEPLOY_PATH }}/apps/api-server/
          
    # 대체 배포 방법: SCP 사용
    - name: Deploy application files (Alternative)
      if: failure()
      run: |
        echo "🔄 Trying alternative deployment method with tar..."
        
        # 로컬에서 tar 생성
        cd apps/api-server
        tar -czf api-server.tar.gz .
        
        # SCP로 전송
        scp -o StrictHostKeyChecking=no api-server.tar.gz \
          ${{ secrets.API_USER }}@${{ secrets.API_HOST }}:/tmp/
          
        # 원격에서 압축 해제
        ssh ${{ secrets.API_USER }}@${{ secrets.API_HOST }} "
          cd ${{ env.DEPLOY_PATH }}/apps/api-server
          tar -xzf /tmp/api-server.tar.gz
          rm /tmp/api-server.tar.gz
        "
        
    - name: Install production dependencies
      run: |
        ssh ${{ secrets.API_USER }}@${{ secrets.API_HOST }} "
          cd ${{ env.DEPLOY_PATH }}/apps/api-server
          npm ci --omit=dev
        "
        
    - name: Run database migrations
      run: |
        ssh ${{ secrets.API_USER }}@${{ secrets.API_HOST }} "
          cd ${{ env.DEPLOY_PATH }}/apps/api-server
          npm run migration:run || echo 'No migrations to run'
        "
        
    - name: Setup PM2 ecosystem file
      run: |
        ssh ${{ secrets.API_USER }}@${{ secrets.API_HOST }} "
          cat > ${{ env.DEPLOY_PATH }}/ecosystem.config.js << 'EOF'
          module.exports = {
            apps: [{
              name: '${{ env.PM2_APP_NAME }}',
              script: './dist/main.js',
              cwd: '${{ env.DEPLOY_PATH }}/apps/api-server',
              instances: 'max',
              exec_mode: 'cluster',
              env_file: '.env.production',
              max_memory_restart: '1G',
              node_args: '--max-old-space-size=1024',
              error_file: '${{ env.DEPLOY_PATH }}/logs/api-server-error.log',
              out_file: '${{ env.DEPLOY_PATH }}/logs/api-server-out.log',
              log_file: '${{ env.DEPLOY_PATH }}/logs/api-server-combined.log',
              time: true,
              autorestart: true,
              max_restarts: 10,
              min_uptime: '10s',
              kill_timeout: 30000,
              wait_ready: true,
              listen_timeout: 10000
            }]
          };
          EOF
        "
        
    - name: Create logs directory
      run: |
        ssh ${{ secrets.API_USER }}@${{ secrets.API_HOST }} "
          mkdir -p ${{ env.DEPLOY_PATH }}/logs
        "
        
    - name: Deploy with PM2 (Zero-downtime)
      run: |
        ssh ${{ secrets.API_USER }}@${{ secrets.API_HOST }} "
          cd ${{ env.DEPLOY_PATH }}
          
          # PM2 프로세스 존재 여부 확인
          if pm2 describe ${{ env.PM2_APP_NAME }} > /dev/null 2>&1; then
            echo 'Reloading existing PM2 process...'
            pm2 reload ecosystem.config.js --update-env
          else
            echo 'Starting new PM2 process...'
            pm2 start ecosystem.config.js
          fi
          
          # PM2 상태 저장
          pm2 save
        "

  # 단계 3: 배포 후 헬스체크
  health-check:
    needs: deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Wait for service startup
      run: sleep 30
      
    - name: Health check
      run: |
        # API 서버 헬스체크
        for i in {1..10}; do
          response=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "X-Health-Check-Key: ${{ secrets.HEALTH_CHECK_KEY }}" \
            https://api.neture.co.kr/health || echo "000")
            
          if [ "$response" = "200" ]; then
            echo "✅ API 서버 헬스체크 성공 (응답 코드: $response)"
            break
          else
            echo "⏳ API 서버 헬스체크 대기 중... (시도 $i/10, 응답 코드: $response)"
            if [ $i -eq 10 ]; then
              echo "❌ API 서버 헬스체크 실패"
              exit 1
            fi
            sleep 10
          fi
        done
        
    - name: Database connection check
      run: |
        response=$(curl -s -H "X-Health-Check-Key: ${{ secrets.HEALTH_CHECK_KEY }}" \
          https://api.neture.co.kr/health/database)
          
        if echo "$response" | grep -q "\"status\":\"healthy\""; then
          echo "✅ 데이터베이스 연결 확인 성공"
        else
          echo "❌ 데이터베이스 연결 확인 실패"
          echo "Response: $response"
          exit 1
        fi

  # 단계 4: 배포 완료 알림
  notify:
    needs: [deploy, health-check]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Deployment success notification
      if: needs.health-check.result == 'success'
      run: |
        echo "🚀 API 서버 배포 성공!"
        echo "📍 서비스 URL: https://api.neture.co.kr"
        echo "🕐 배포 시간: $(date '+%Y-%m-%d %H:%M:%S')"
        echo "📊 헬스체크: 통과"
        
    - name: Deployment failure notification
      if: needs.health-check.result == 'failure' || needs.deploy.result == 'failure'
      run: |
        echo "❌ API 서버 배포 실패!"
        echo "🔍 로그를 확인하여 문제를 해결하세요."
        exit 1
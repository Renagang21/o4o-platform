name: Main CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18.x'

jobs:
  # 1. Code Quality Checks
  quality-check:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm install
    
    - name: Build packages first
      run: npm run build:packages
    
    - name: Run TypeScript check
      run: npm run type-check
    
    - name: Run ESLint
      run: npm run lint
    
    - name: Run tests
      run: npm test

  # 2. Build all applications
  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: quality-check
    
    strategy:
      matrix:
        app: [api-server, main-site, admin-dashboard, ecommerce, forum, digital-signage, crowdfunding]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm install
    
    - name: Build packages
      run: npm run build:packages
    
    - name: Build ${{ matrix.app }}
      run: npm run build --workspace=@o4o/${{ matrix.app }}
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.app }}-dist
        path: |
          apps/${{ matrix.app }}/dist
          apps/${{ matrix.app }}/build
        retention-days: 7

  # 3. Deploy to API Server
  deploy-api:
    name: Deploy API Server
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download API build
      uses: actions/download-artifact@v4
      with:
        name: api-server-build
        path: apps/api-server/dist
    
    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.API_SERVER_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H 43.202.242.215 >> ~/.ssh/known_hosts
    
    - name: Deploy to API server
      continue-on-error: true
      run: |
        # Copy built files
        scp -r apps/api-server/dist/* ubuntu@43.202.242.215:/home/ubuntu/o4o-platform/apps/api-server/dist/
        
        # Copy package files if changed
        scp apps/api-server/package*.json ubuntu@43.202.242.215:/home/ubuntu/o4o-platform/apps/api-server/
        
        # Restart application
        ssh ubuntu@43.202.242.215 "cd /home/ubuntu/o4o-platform/apps/api-server && npm install --production && pm2 restart o4o-api-server"
    
    - name: Health check
      continue-on-error: true
      run: |
        sleep 10
        response=$(curl -k -s -o /dev/null -w "%{http_code}" --max-time 30 https://api.neture.co.kr/api/health || echo "000")
        if [ "$response" = "200" ]; then
          echo "✅ API server is healthy"
        else
          echo "⚠️ API health check failed with status: $response"
          echo "Note: This may be due to SSL certificate or deployment issues"
        fi

  # 4. Deploy to Web Server
  deploy-web:
    name: Deploy Web Applications
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    strategy:
      matrix:
        include:
          - app: main-site
            domain: neture.co.kr
            path: /var/www/neture.co.kr
          - app: admin-dashboard
            domain: admin.neture.co.kr
            path: /var/www/admin.neture.co.kr
          - app: ecommerce
            domain: shop.neture.co.kr
            path: /var/www/shop.neture.co.kr
          - app: forum
            domain: forum.neture.co.kr
            path: /var/www/forum.neture.co.kr
          - app: digital-signage
            domain: signage.neture.co.kr
            path: /var/www/signage.neture.co.kr
          - app: crowdfunding
            domain: funding.neture.co.kr
            path: /var/www/funding.neture.co.kr
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download ${{ matrix.app }} build
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.app }}-dist
        path: apps/${{ matrix.app }}/dist
    
    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.WEB_SERVER_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H 13.125.144.8 >> ~/.ssh/known_hosts
    
    - name: Deploy to web server
      continue-on-error: true
      run: |
        # Create directory if not exists
        ssh ubuntu@13.125.144.8 "sudo mkdir -p ${{ matrix.path }}"
        
        # Copy files
        scp -r apps/${{ matrix.app }}/dist/* ubuntu@13.125.144.8:/tmp/${{ matrix.app }}/
        
        # Move files and set permissions
        ssh ubuntu@13.125.144.8 "
          sudo rm -rf ${{ matrix.path }}/*
          sudo mv /tmp/${{ matrix.app }}/* ${{ matrix.path }}/
          sudo chown -R www-data:www-data ${{ matrix.path }}
          sudo chmod -R 755 ${{ matrix.path }}
        "
    
    - name: Health check
      continue-on-error: true
      run: |
        sleep 5
        response=$(curl -s -o /dev/null -w "%{http_code}" --max-time 30 https://${{ matrix.domain }} || echo "000")
        if [ "$response" = "200" ]; then
          echo "✅ ${{ matrix.domain }} is healthy"
        else
          echo "⚠️ ${{ matrix.domain }} is unhealthy (Status: $response)"
          echo "Note: This may be expected if the domain is not yet configured on the server"
        fi

  # 5. Post-deployment tasks
  post-deploy:
    name: Post Deployment Tasks
    runs-on: ubuntu-latest
    needs: [deploy-api, deploy-web]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Clear CDN cache
      run: |
        echo "CDN cache clear would go here"
    
    - name: Send deployment notification
      run: |
        echo "Deployment completed successfully!"
        # Add Slack/Discord notification here if needed
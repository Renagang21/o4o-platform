name: Debug SSH Connection

# SSH Ïó∞Í≤∞ Î¨∏Ï†úÎ•º ÎîîÎ≤ÑÍπÖÌïòÍ∏∞ ÏúÑÌïú ÏõåÌÅ¨ÌîåÎ°úÏö∞

on:
  workflow_dispatch:

jobs:
  debug-ssh:
    runs-on: ubuntu-latest
    
    steps:
    - name: Check secrets availability
      run: |
        echo "üîç Checking GitHub secrets..."
        
        # Check if secrets are set (not values, just if they exist)
        if [ -n "${{ secrets.WEB_HOST }}" ]; then
          echo "‚úÖ WEB_HOST is set"
        else
          echo "‚ùå WEB_HOST is NOT set"
        fi
        
        if [ -n "${{ secrets.WEB_USER }}" ]; then
          echo "‚úÖ WEB_USER is set"
        else
          echo "‚ùå WEB_USER is NOT set"
        fi
        
        if [ -n "${{ secrets.WEB_SSH_KEY }}" ]; then
          echo "‚úÖ WEB_SSH_KEY is set"
          echo "Key length: ${#KEY_VAR} characters" || echo "Key length check failed"
        else
          echo "‚ùå WEB_SSH_KEY is NOT set"
        fi
        
    - name: Test basic SSH setup
      run: |
        echo "üîß Setting up SSH..."
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        
        # Try to set up the key
        if [ -n "${{ secrets.WEB_SSH_KEY }}" ]; then
          echo "${{ secrets.WEB_SSH_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Check key format
          echo "üîç Checking SSH key format..."
          if grep -q "BEGIN.*PRIVATE KEY" ~/.ssh/id_rsa; then
            echo "‚úÖ SSH key format looks correct"
          else
            echo "‚ùå SSH key format seems incorrect"
            echo "First line of key:"
            head -1 ~/.ssh/id_rsa
          fi
        else
          echo "‚ùå Cannot proceed without SSH key"
          exit 1
        fi
        
    - name: Test SSH connection methods
      run: |
        echo "üß™ Testing different SSH connection methods..."
        
        # Method 1: Direct SSH
        echo "Method 1: Direct SSH connection..."
        ssh -vvv -o ConnectTimeout=10 -o StrictHostKeyChecking=no \
          -i ~/.ssh/id_rsa \
          ${{ secrets.WEB_USER }}@${{ secrets.WEB_HOST }} \
          "echo 'Direct SSH successful'" || echo "Direct SSH failed"
        
        # Method 2: Using IP if available
        if [ -n "${{ secrets.WEB_HOST_IP }}" ]; then
          echo "Method 2: SSH using IP address..."
          ssh -vvv -o ConnectTimeout=10 -o StrictHostKeyChecking=no \
            -i ~/.ssh/id_rsa \
            ${{ secrets.WEB_USER }}@${{ secrets.WEB_HOST_IP }} \
            "echo 'IP SSH successful'" || echo "IP SSH failed"
        fi
        
        # Method 3: Using different port if specified
        if [ -n "${{ secrets.WEB_SSH_PORT }}" ]; then
          echo "Method 3: SSH using custom port..."
          ssh -vvv -o ConnectTimeout=10 -o StrictHostKeyChecking=no \
            -p ${{ secrets.WEB_SSH_PORT }} \
            -i ~/.ssh/id_rsa \
            ${{ secrets.WEB_USER }}@${{ secrets.WEB_HOST }} \
            "echo 'Custom port SSH successful'" || echo "Custom port SSH failed"
        fi
        
    - name: Network diagnostics
      run: |
        echo "üåê Running network diagnostics..."
        
        # DNS resolution
        echo "DNS lookup for ${{ secrets.WEB_HOST }}:"
        nslookup ${{ secrets.WEB_HOST }} || echo "DNS lookup failed"
        
        # Ping test (may not work depending on firewall)
        echo "Ping test:"
        ping -c 3 ${{ secrets.WEB_HOST }} || echo "Ping failed (might be blocked)"
        
        # Port scan
        echo "Port 22 connectivity test:"
        nc -zv -w 5 ${{ secrets.WEB_HOST }} 22 || echo "Port 22 connection failed"
        
    - name: Alternative connection test
      run: |
        echo "üîÑ Testing alternative methods..."
        
        # Test with telnet
        timeout 5 telnet ${{ secrets.WEB_HOST }} 22 || echo "Telnet test completed"
        
        # Test with curl (SSH banner)
        curl -v --connect-timeout 5 telnet://${{ secrets.WEB_HOST }}:22 || echo "Curl test completed"
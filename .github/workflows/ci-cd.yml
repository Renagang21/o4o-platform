name: 🚀 O4O Platform CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # 코드 품질 검사
  quality-check:
    name: 🔍 Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 📋 ESLint check
        run: npm run lint

      - name: 🔷 TypeScript check
        run: npm run type-check

      - name: 💅 Prettier check
        run: npm run format:check

      - name: 🔒 Security audit
        run: npm audit --audit-level moderate

  # 단위 테스트
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: quality-check
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run unit tests
        run: npm run test:unit

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: true

  # 통합 테스트
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: quality-check
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: o4o_platform_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🗃️ Setup database
        run: |
          cd services/api-server
          npm run migration:run
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/o4o_platform_test

      - name: 🔗 Run integration tests
        run: npm run test:integration
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/o4o_platform_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key

  # E2E 테스트
  e2e-tests:
    name: 🌐 E2E Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: github.event_name == 'pull_request'
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright
        run: npx playwright install --with-deps

      - name: 🐳 Start services with Docker
        run: |
          docker-compose -f docker-compose.dev.yml up -d postgres redis
          sleep 10

      - name: 🚀 Start application
        run: |
          npm run dev:all &
          sleep 30
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/o4o_platform_dev
          REDIS_URL: redis://localhost:6379

      - name: 🌐 Run E2E tests
        run: npm run test:e2e

      - name: 📸 Upload test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Docker 이미지 빌드
  build-images:
    name: 🐳 Build Docker Images
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    outputs:
      api-image: ${{ steps.meta-api.outputs.tags }}
      web-image: ${{ steps.meta-web.outputs.tags }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🏗️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📋 Extract API metadata
        id: meta-api
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/api
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-

      - name: 🔨 Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: ./services/api-server
          file: ./services/api-server/Dockerfile
          push: true
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 📋 Extract Web metadata
        id: meta-web
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/web
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-

      - name: 🔨 Build and push Web image
        uses: docker/build-push-action@v5
        with:
          context: ./services/main-site
          file: ./services/main-site/Dockerfile
          push: true
          tags: ${{ steps.meta-web.outputs.tags }}
          labels: ${{ steps.meta-web.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 스테이징 배포
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.o4o-platform.com
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🚀 Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # 실제 배포 스크립트 실행
          # kubectl apply -f k8s/staging/
          # 또는 docker-compose 사용
        env:
          API_IMAGE: ${{ needs.build-images.outputs.api-image }}
          WEB_IMAGE: ${{ needs.build-images.outputs.web-image }}

      - name: 🏥 Health check
        run: |
          sleep 30
          curl -f https://staging.o4o-platform.com/api/health

      - name: 💬 Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: '🚀 Staging deployment completed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # 프로덕션 배포
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://o4o-platform.com
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🛡️ Security scan
        run: |
          echo "Running security scans..."
          # Trivy 또는 다른 보안 스캔 도구 실행

      - name: 🚀 Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Blue-Green 배포 또는 Rolling 업데이트
        env:
          API_IMAGE: ${{ needs.build-images.outputs.api-image }}
          WEB_IMAGE: ${{ needs.build-images.outputs.web-image }}

      - name: 🏥 Health check
        run: |
          sleep 60
          curl -f https://o4o-platform.com/api/health

      - name: 📊 Performance test
        run: |
          # 간단한 성능 테스트 실행
          echo "Running performance tests..."

      - name: 💬 Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: '🌟 Production deployment completed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Cursor BugBot 트리거 (선택사항)
  cursor-analysis:
    name: 🤖 Cursor BugBot Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🤖 Trigger Cursor BugBot
        run: |
          echo "Triggering Cursor BugBot analysis..."
          # Cursor BugBot API 호출 (사용 가능한 경우)
        env:
          CURSOR_API_KEY: ${{ secrets.CURSOR_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 코드 품질 리포트
  quality-report:
    name: 📊 Quality Report
    runs-on: ubuntu-latest
    needs: [quality-check, unit-tests, integration-tests]
    if: always()
    steps:
      - name: 📊 Generate quality report
        run: |
          echo "## 📊 Code Quality Report" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Lint: ${{ needs.quality-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🧪 Unit Tests: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🔗 Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 Cursor 1.0 Enhanced Development" >> $GITHUB_STEP_SUMMARY

name: Deploy API Server (Production)

# API 서버 점진적 배포 워크플로우
# 트리거: apps/api-server 경로 변경 시
# 단계: Build → Test → Deploy → Health Check

on:
  push:
    branches: [main]
    paths:
      - 'apps/api-server/**'
      - '.github/workflows/deploy-api-server.yml'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy without path changes'
        required: false
        default: 'false'

concurrency:
  group: deploy-api-server-${{ github.ref }}
  cancel-in-progress: false

env:
  SERVICE_NAME: api-server
  SERVICE_PORT: 4000
  PM2_APP_NAME: api-server
  DEPLOY_PATH: /home/ubuntu/o4o-platform
  NODE_VERSION: '22.18.0'

jobs:
  # 단계 1: 빌드 및 테스트
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Validate environment
      run: bash scripts/validate-deploy-env.sh
      
    - name: Install dependencies
      run: npm install --prefer-offline
    
    - name: Build shared packages
      run: |
        echo "Building shared packages first..."
        bash scripts/dev.sh build:packages
        
    - name: Install API server dependencies
      working-directory: apps/api-server
      run: npm install --prefer-offline
        
    - name: TypeScript type check
      run: |
        npm run type-check --workspace=@o4o/api-server
        
    - name: Run tests
      run: |
        npm run test --workspace=@o4o/api-server
        
    - name: Build application
      run: |
        npm run build --workspace=@o4o/api-server
        
    - name: Validate build output
      run: |
        cd apps/api-server
        test -f dist/main.js || (echo "Error: dist/main.js not found" && exit 1)
        test -d dist || (echo "Error: dist directory not found" && exit 1)
        echo "Build validation successful"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: api-server-build
        path: |
          apps/api-server/dist/
          apps/api-server/package.json
          apps/api-server/package-lock.json
        retention-days: 1

  # 단계 2: 운영 서버 배포
  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: api-server-build
        path: apps/api-server/
        
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.API_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.API_HOST }} >> ~/.ssh/known_hosts
        ssh-keyscan -H api.neture.co.kr >> ~/.ssh/known_hosts
        
    - name: Check existing configuration
      run: |
        ssh ${{ secrets.API_USER }}@${{ secrets.API_HOST }} "
          echo '=== Checking existing API server configuration ==='
          
          # Check if PM2 is running with existing config
          if pm2 describe ${{ env.PM2_APP_NAME }} > /dev/null 2>&1; then
            echo 'PM2 process found. Checking environment...'
            pm2 env ${{ env.PM2_APP_NAME }} | grep -E 'DB_|NODE_ENV' | head -10 || true
          fi
          
          # Check for existing working configuration files
          if [ -d ${{ env.DEPLOY_PATH }}/apps/api-server ]; then
            echo 'Existing deployment found'
            cd ${{ env.DEPLOY_PATH }}/apps/api-server
            
            # List all env files
            echo 'Environment files:'
            ls -la .env* 2>/dev/null || echo 'No .env files found'
            
            # Check package.json for database info
            if [ -f package.json ]; then
              echo 'Checking package.json for DB scripts...'
              grep -E 'migration|typeorm|database' package.json | head -5 || true
            fi
          fi
          
          # Check PostgreSQL config
          echo '=== PostgreSQL Configuration ==='
          if [ -f /etc/postgresql/*/main/postgresql.conf ]; then
            echo 'PostgreSQL installed locally'
            sudo grep -E '^port|^listen_addresses' /etc/postgresql/*/main/postgresql.conf 2>/dev/null || echo 'Cannot read PostgreSQL config'
          fi
        "
        
    - name: Create deployment directory
      run: |
        ssh ${{ secrets.API_USER }}@${{ secrets.API_HOST }} "
          mkdir -p ${{ env.DEPLOY_PATH }}/apps/api-server
        "
        
    - name: Create environment file
      run: |
        ssh ${{ secrets.API_USER }}@${{ secrets.API_HOST }} "
          cat > ${{ env.DEPLOY_PATH }}/apps/api-server/.env.production << 'EOF'
          NODE_ENV=production
          PORT=${{ env.SERVICE_PORT }}
          
          # Database Configuration
          DB_HOST='${{ secrets.DB_HOST }}'
          DB_PORT='${{ secrets.DB_PORT }}'
          DB_USERNAME='${{ secrets.DB_USERNAME }}'
          DB_PASSWORD='${{ secrets.DB_PASSWORD }}'
          DB_NAME='${{ secrets.DB_NAME }}'
          
          # JWT Configuration
          JWT_SECRET='${{ secrets.JWT_SECRET }}'
          JWT_EXPIRES_IN='${{ secrets.JWT_EXPIRES_IN }}'
          
          # CORS Configuration
          CORS_ORIGIN='${{ secrets.CORS_ORIGIN }}'
          
          # Logging Configuration
          LOG_LEVEL='${{ secrets.LOG_LEVEL }}'
          
          # Health Check
          HEALTH_CHECK_KEY='${{ secrets.HEALTH_CHECK_KEY }}'
          EOF
        "
        
    - name: Deploy application files
      run: |
        rsync -avz --delete \
          -e "ssh" \
          apps/api-server/ \
          ${{ secrets.API_USER }}@${{ secrets.API_HOST }}:${{ env.DEPLOY_PATH }}/apps/api-server/
          
    - name: Install production dependencies
      run: |
        ssh ${{ secrets.API_USER }}@${{ secrets.API_HOST }} "
          cd ${{ env.DEPLOY_PATH }}/apps/api-server
          npm install --only=production
        "
        
    - name: Verify environment variables
      run: |
        ssh ${{ secrets.API_USER }}@${{ secrets.API_HOST }} "
          cd ${{ env.DEPLOY_PATH }}/apps/api-server
          echo 'Checking environment file...'
          if [ -f .env.production ]; then
            echo 'DB_PASSWORD length:' \$(grep DB_PASSWORD .env.production | wc -c)
            echo 'Environment file exists'
            echo '=== Current DB Settings ==='
            grep -E 'DB_HOST|DB_PORT|DB_USERNAME|DB_NAME' .env.production | sed 's/=.*/=***/'
            echo 'DB_PASSWORD format check:'
            grep DB_PASSWORD .env.production | sed 's/DB_PASSWORD=./DB_PASSWORD=*/' | sed 's/.$/***/'
          else
            echo 'ERROR: .env.production not found!'
          fi
          
          # Check if there's an existing working configuration
          if [ -f .env ]; then
            echo '=== Found .env file ==='
            echo 'Checking for working DB configuration...'
            grep -E 'DB_|DATABASE_URL' .env | sed 's/password=[^@]*/password=***/'
          fi
        "
        
    - name: Test database connection
      continue-on-error: true
      run: |
        ssh ${{ secrets.API_USER }}@${{ secrets.API_HOST }} "
          cd ${{ env.DEPLOY_PATH }}/apps/api-server
          echo 'Testing database connection...'
          
          # Try to connect with the current settings
          if [ -f .env.production ]; then
            export \$(cat .env.production | grep -v '^#' | xargs)
            echo 'Using .env.production settings'
          fi
          
          # Test PostgreSQL connection
          PGPASSWORD=\$DB_PASSWORD psql -h \$DB_HOST -p \$DB_PORT -U \$DB_USERNAME -d \$DB_NAME -c '\conninfo' 2>&1 | head -5 || echo '⚠️  Connection test failed - database configuration needed'
          
          # Check if postgres service is running locally
          if command -v systemctl &> /dev/null; then
            systemctl is-active postgresql || echo '📌 PostgreSQL service not running locally'
          fi
          
          echo '📋 Database connection needs to be configured manually on server'
        "
        
    - name: Run database migrations
      continue-on-error: true
      run: |
        ssh ${{ secrets.API_USER }}@${{ secrets.API_HOST }} "
          cd ${{ env.DEPLOY_PATH }}/apps/api-server
          # Source the environment file before running migrations
          if [ -f .env.production ]; then
            export \$(cat .env.production | grep -v '^#' | xargs)
          fi
          export NODE_ENV=production
          echo '📋 Attempting to run migrations...'
          npm run migration:run || echo '⚠️ Migration failed - this needs to be run manually'
        "
        
    - name: Setup PM2 ecosystem file
      run: |
        ssh ${{ secrets.API_USER }}@${{ secrets.API_HOST }} "
          cat > ${{ env.DEPLOY_PATH }}/ecosystem.config.js << 'EOF'
          module.exports = {
            apps: [{
              name: '${{ env.PM2_APP_NAME }}',
              script: './dist/main.js',
              cwd: '${{ env.DEPLOY_PATH }}/apps/api-server',
              instances: 'max',
              exec_mode: 'cluster',
              env_file: '.env.production',
              max_memory_restart: '1G',
              node_args: '--max-old-space-size=1024',
              error_file: '${{ env.DEPLOY_PATH }}/logs/api-server-error.log',
              out_file: '${{ env.DEPLOY_PATH }}/logs/api-server-out.log',
              log_file: '${{ env.DEPLOY_PATH }}/logs/api-server-combined.log',
              time: true,
              autorestart: true,
              max_restarts: 10,
              min_uptime: '10s',
              kill_timeout: 30000,
              wait_ready: true,
              listen_timeout: 10000,
              health_check_grace_period: 30000
            }]
          };
          EOF
        "
        
    - name: Create logs directory
      run: |
        ssh ${{ secrets.API_USER }}@${{ secrets.API_HOST }} "
          mkdir -p ${{ env.DEPLOY_PATH }}/logs
        "
        
    - name: Deploy with PM2 (Zero-downtime)
      run: |
        ssh ${{ secrets.API_USER }}@${{ secrets.API_HOST }} "
          cd ${{ env.DEPLOY_PATH }}
          
          # PM2 프로세스 존재 여부 확인
          if pm2 describe ${{ env.PM2_APP_NAME }} > /dev/null 2>&1; then
            echo 'Reloading existing PM2 process...'
            pm2 reload ecosystem.config.js --update-env
          else
            echo 'Starting new PM2 process...'
            pm2 start ecosystem.config.js
          fi
          
          # PM2 상태 저장
          pm2 save
          
          # PM2 프로세스 상태 확인
          echo '🔍 Checking PM2 process status...'
          pm2 list
          pm2 describe ${{ env.PM2_APP_NAME }} || echo '⚠️  PM2 process not found'
        "

  # 단계 3: 배포 후 헬스체크
  health-check:
    needs: deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.API_SSH_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.API_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || true
        
    - name: Wait for service startup
      run: sleep 30
      
    - name: Check PM2 process status
      run: |
        echo "🔍 Checking PM2 process on server..."
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.API_USER }}@${{ secrets.API_HOST }} "
          pm2 list
          pm2 describe ${{ env.PM2_APP_NAME }} || echo 'PM2 process not found'
          
          # Check if process is actually running
          if pm2 describe ${{ env.PM2_APP_NAME }} > /dev/null 2>&1; then
            echo '🌟 PM2 process found'
            # Check logs for any startup errors
            echo '📝 Recent PM2 logs:'
            pm2 logs ${{ env.PM2_APP_NAME }} --lines 20 --nostream || true
          else
            echo '⚠️  PM2 process not running'
          fi
          
          # Check if API port is listening
          echo '🔌 Checking if port 4000 is listening:'
          netstat -tlnp 2>/dev/null | grep :4000 || echo 'Port 4000 not listening'
        "
        
    - name: Health check
      continue-on-error: true
      run: |
        echo "🎩 Starting API server health check..."
        
        # First try direct server connection
        echo "Testing direct server connection..."
        curl -I http://${{ secrets.API_HOST }}:4000/health || echo "Direct connection failed"
        
        # API 서버 헬스체크
        for i in {1..10}; do
          response=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "X-Health-Check-Key: ${{ secrets.HEALTH_CHECK_KEY }}" \
            https://api.neture.co.kr:8443/api/health || echo "000")
            
          if [ "$response" = "200" ]; then
            echo "✅ API 서버 헬스체크 성공 (응답 코드: $response)"
            break
          else
            echo "⏳ API 서버 헬스체크 대기 중... (시도 $i/10, 응답 코드: $response)"
            
            # If response is 000, check what's wrong
            if [ "$response" = "000" ]; then
              echo "🔍 Response code 000 - checking connectivity..."
              # Test DNS resolution
              nslookup api.neture.co.kr || echo "DNS resolution failed"
              # Test basic HTTPS connectivity
              curl -I https://api.neture.co.kr:8443/ || echo "HTTPS connection failed"
            fi
            
            if [ $i -eq 10 ]; then
              echo "⚠️  API 서버 헬스체크 실패 - 서버 설정 확인 필요"
              echo "📌 서버에서 다음 항목 확인:"
              echo "   1. PM2 프로세스 실행 상태"
              echo "   2. Nginx 설정 (api.neture.co.kr -> localhost:4000)"
              echo "   3. SSL 인증서 설정"
              echo "   4. 방화벽 포트 개방 (80, 443, 4000)"
            fi
            sleep 10
          fi
        done
        
    - name: Database connection check
      continue-on-error: true
      run: |
        response=$(curl -s -H "X-Health-Check-Key: ${{ secrets.HEALTH_CHECK_KEY }}" \
          https://api.neture.co.kr:8443/api/health/database)
          
        if echo "$response" | grep -q "\"status\":\"healthy\""; then
          echo "✅ 데이터베이스 연결 확인 성공"
        else
          echo "⚠️  데이터베이스 연결 확인 실패 (서버에서 수동 설정 필요)"
          echo "Response: $response"
          echo "📌 Note: API server is running but database connection needs to be configured"
        fi
        
    - name: API endpoints smoke test
      continue-on-error: true
      run: |
        echo "🔥 Running API endpoints smoke test..."
        
        # SSL 인증서 확인
        echo "🔐 Checking SSL certificate..."
        echo | openssl s_client -connect api.neture.co.kr:8443 -servername api.neture.co.kr 2>/dev/null | openssl x509 -noout -dates || echo "⚠️  SSL certificate check failed"
        
        # 주요 API 엔드포인트 smoke test
        endpoints=(
          "/health"
          "/api/auth/health"
          "/api/ecommerce/health"
        )
        
        for endpoint in "${endpoints[@]}"; do
          # SSL 검증 무시 옵션 추가 (-k)
          response=$(curl -k -s -o /dev/null -w "%{http_code}" \
            "https://api.neture.co.kr:8443$endpoint" || echo "000")
            
          if [ "$response" = "200" ] || [ "$response" = "401" ]; then
            echo "✅ $endpoint 엔드포인트 정상 (응답 코드: $response)"
          else
            echo "⚠️  $endpoint 엔드포인트 오류 (응답 코드: $response)"
            
            # HTTP로도 테스트
            if [ "$response" = "000" ]; then
              echo "🔍 Trying HTTP instead..."
              http_response=$(curl -s -o /dev/null -w "%{http_code}" \
                "http://api.neture.co.kr:8443$endpoint" || echo "000")
              echo "   HTTP response: $http_response"
            fi
            exit 1
          fi
        done

  # 단계 4: 배포 완료 알림
  notify:
    needs: [deploy, health-check]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Deployment success notification
      if: needs.health-check.result == 'success'
      run: |
        echo "🚀 API 서버 배포 성공!"
        echo "📍 서비스 URL: https://api.neture.co.kr:8443"
        echo "🕐 배포 시간: $(date '+%Y-%m-%d %H:%M:%S')"
        echo "📊 헬스체크: 통과"
        
    - name: Deployment failure notification
      if: needs.health-check.result == 'failure' || needs.deploy.result == 'failure'
      run: |
        echo "❌ API 서버 배포 실패!"
        echo "🔍 로그를 확인하여 문제를 해결하세요."
        exit 1

  # 단계 5: 롤백 준비 (실패 시)
  rollback:
    needs: [deploy, health-check]
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.API_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.API_HOST }} >> ~/.ssh/known_hosts
        ssh-keyscan -H api.neture.co.kr >> ~/.ssh/known_hosts
        
    - name: Rollback to previous version
      run: |
        ssh ${{ secrets.API_USER }}@${{ secrets.API_HOST }} "
          cd ${{ env.DEPLOY_PATH }}
          
          # 이전 백업에서 복원
          if [ -d 'apps/api-server.backup' ]; then
            echo '이전 버전으로 롤백 중...'
            rm -rf apps/api-server
            mv apps/api-server.backup apps/api-server
            
            # PM2 재시작
            pm2 restart ${{ env.PM2_APP_NAME }}
            echo '롤백 완료'
          else
            echo '백업 파일이 없습니다. 수동 복구가 필요합니다.'
          fi
        "
        
    - name: Rollback notification
      run: |
        echo "🔄 API 서버 롤백 완료"
        echo "⚠️  수동 확인이 필요합니다."
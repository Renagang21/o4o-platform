name: Deploy Main Site (Production V2)

# SSH 연결 문제를 해결한 개선된 배포 워크플로우

on:
  push:
    branches: [main]
    paths:
      - 'apps/main-site/**'
      - 'packages/**'
      - '.github/workflows/deploy-main-site-v2.yml'
  workflow_dispatch:
    inputs:
      force:
        description: 'Force deployment even without changes'
        required: false
        default: 'false'

concurrency:
  group: deploy-main-site-${{ github.ref }}
  cancel-in-progress: false

env:
  SERVICE_NAME: main-site
  SERVICE_DOMAIN: neture.co.kr
  SERVICE_URL: https://neture.co.kr
  DEPLOY_PATH: /var/www/neture.co.kr
  NODE_VERSION: '22.18.0'

jobs:
  # 단계 1: 빌드 및 테스트
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Validate environment
      run: |
        echo "🔍 Validating build environment..."
        node --version
        npm --version
        
    - name: Install dependencies
      run: |
        npm ci
        
    - name: Build shared packages
      run: |
        echo "📦 Building shared packages..."
        ./scripts/dev.sh build:packages
        
    - name: Create production environment
      run: |
        cd apps/main-site
        cat > .env.production << 'EOF'
        NODE_ENV=production
        VITE_API_BASE_URL=https://api.neture.co.kr
        VITE_APP_TITLE=O4O Platform
        VITE_ADMIN_URL=https://admin.neture.co.kr
        VITE_SITE_URL=https://neture.co.kr
        VITE_ENABLE_ANALYTICS=true
        VITE_ENABLE_ERROR_REPORTING=true
        VITE_BUILD_TIMESTAMP=${{ github.run_number }}
        EOF
        
    - name: Build application
      run: |
        cd apps/main-site
        npm run build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: main-site-build
        path: apps/main-site/dist/
        retention-days: 1

  # 단계 2: 배포
  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: main-site-build
        path: dist/
        
    # SSH 설정 개선 - 더 안정적인 연결을 위해
    - name: Setup SSH with error handling
      run: |
        echo "🔐 Setting up SSH connection..."
        
        # SSH 디렉토리 생성
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        
        # SSH 키 설정
        echo "${{ secrets.WEB_SSH_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        # SSH 설정 파일 생성
        cat > ~/.ssh/config << EOF
        Host web-server
          HostName ${{ secrets.WEB_HOST }}
          User ${{ secrets.WEB_USER }}
          Port 22
          IdentityFile ~/.ssh/id_rsa
          StrictHostKeyChecking no
          UserKnownHostsFile=/dev/null
          ServerAliveInterval 60
          ServerAliveCountMax 3
          ConnectTimeout 10
          ConnectionAttempts 3
        EOF
        chmod 600 ~/.ssh/config
        
        echo "✅ SSH configuration completed"
        
    # SSH 연결 테스트 - 실패 시 재시도
    - name: Test SSH connection with retries
      run: |
        echo "🔍 Testing SSH connection..."
        MAX_ATTEMPTS=5
        ATTEMPT=1
        
        while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
          echo "Attempt $ATTEMPT/$MAX_ATTEMPTS..."
          
          if ssh -o ConnectTimeout=10 web-server "echo 'SSH connection successful'"; then
            echo "✅ SSH connection verified"
            break
          else
            echo "⚠️ Connection attempt $ATTEMPT failed"
            ATTEMPT=$((ATTEMPT + 1))
            
            if [ $ATTEMPT -le $MAX_ATTEMPTS ]; then
              echo "Waiting 10 seconds before retry..."
              sleep 10
            else
              echo "❌ All SSH connection attempts failed"
              exit 1
            fi
          fi
        done
        
    # 대체 배포 방법 1: tar를 사용한 배포
    - name: Deploy using tar archive
      run: |
        echo "📦 Creating deployment archive..."
        tar -czf deploy.tar.gz -C dist .
        
        echo "📤 Uploading to server..."
        scp -o StrictHostKeyChecking=no -o ConnectTimeout=30 \
          deploy.tar.gz web-server:/tmp/
        
        echo "📂 Extracting on server..."
        ssh web-server << 'ENDSSH'
          # 백업 생성
          if [ -d "${{ env.DEPLOY_PATH }}" ]; then
            sudo mv ${{ env.DEPLOY_PATH }} ${{ env.DEPLOY_PATH }}.backup.$(date +%Y%m%d_%H%M%S)
          fi
          
          # 새 디렉토리 생성
          sudo mkdir -p ${{ env.DEPLOY_PATH }}
          
          # 압축 해제
          sudo tar -xzf /tmp/deploy.tar.gz -C ${{ env.DEPLOY_PATH }}
          
          # 권한 설정
          sudo chown -R www-data:www-data ${{ env.DEPLOY_PATH }}
          sudo chmod -R 755 ${{ env.DEPLOY_PATH }}
          
          # 임시 파일 삭제
          rm /tmp/deploy.tar.gz
          
          echo "✅ Deployment completed"
        ENDSSH
        
    # 대체 배포 방법 2: rsync with retry
    - name: Deploy using rsync (fallback)
      if: failure()
      run: |
        echo "🔄 Trying alternative deployment with rsync..."
        
        # rsync with custom options
        MAX_ATTEMPTS=3
        ATTEMPT=1
        
        while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
          echo "Rsync attempt $ATTEMPT/$MAX_ATTEMPTS..."
          
          if rsync -avz --delete \
            --timeout=30 \
            --contimeout=10 \
            -e "ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10" \
            dist/ web-server:${{ env.DEPLOY_PATH }}/; then
            echo "✅ Rsync deployment successful"
            break
          else
            echo "⚠️ Rsync attempt $ATTEMPT failed"
            ATTEMPT=$((ATTEMPT + 1))
            
            if [ $ATTEMPT -le $MAX_ATTEMPTS ]; then
              sleep 5
            else
              echo "❌ All rsync attempts failed"
              exit 1
            fi
          fi
        done
        
    # 권한 설정
    - name: Set correct permissions
      run: |
        ssh web-server << 'ENDSSH'
          echo "🔧 Setting permissions..."
          sudo chown -R www-data:www-data ${{ env.DEPLOY_PATH }}
          sudo chmod -R 755 ${{ env.DEPLOY_PATH }}
          echo "✅ Permissions set"
        ENDSSH
        
    # Nginx 설정 확인 및 리로드
    - name: Verify and reload Nginx
      run: |
        ssh web-server << 'ENDSSH'
          echo "🔍 Checking Nginx configuration..."
          
          # Nginx 설정 테스트
          if sudo nginx -t; then
            echo "✅ Nginx configuration is valid"
            
            # Nginx 리로드
            sudo systemctl reload nginx
            echo "✅ Nginx reloaded"
          else
            echo "❌ Nginx configuration error"
            exit 1
          fi
        ENDSSH

  # 단계 3: 헬스체크
  health-check:
    needs: deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Wait for deployment
      run: sleep 30
      
    - name: Health check with retries
      run: |
        echo "🏥 Running health checks..."
        MAX_ATTEMPTS=10
        ATTEMPT=1
        
        while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
          echo "Health check attempt $ATTEMPT/$MAX_ATTEMPTS..."
          
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            --connect-timeout 10 \
            --max-time 30 \
            ${{ env.SERVICE_URL }} || echo "000")
          
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "✅ Site is responding (HTTP $HTTP_STATUS)"
            break
          else
            echo "⚠️ Site not ready (HTTP $HTTP_STATUS)"
            ATTEMPT=$((ATTEMPT + 1))
            
            if [ $ATTEMPT -le $MAX_ATTEMPTS ]; then
              echo "Waiting 10 seconds..."
              sleep 10
            else
              echo "❌ Health check failed after $MAX_ATTEMPTS attempts"
              exit 1
            fi
          fi
        done
        
    - name: Verify deployment
      run: |
        echo "🔍 Verifying deployment..."
        
        # Check main resources
        for RESOURCE in "/" "/assets/index.js" "/assets/index.css"; do
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            --connect-timeout 10 \
            ${{ env.SERVICE_URL }}$RESOURCE || echo "000")
          
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "✅ $RESOURCE: OK (HTTP $HTTP_STATUS)"
          else
            echo "❌ $RESOURCE: Failed (HTTP $HTTP_STATUS)"
          fi
        done

  # 단계 4: 알림
  notify:
    needs: [deploy, health-check]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Deployment status
      run: |
        if [ "${{ needs.health-check.result }}" = "success" ]; then
          echo "🎉 Deployment successful!"
          echo "🌐 Site: ${{ env.SERVICE_URL }}"
          echo "📅 Time: $(date '+%Y-%m-%d %H:%M:%S')"
        else
          echo "❌ Deployment failed!"
          echo "📍 Check logs for details"
        fi
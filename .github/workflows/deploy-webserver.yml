name: Deploy to Web Server

on:
  push:
    branches:
      - main
    paths:
      - 'apps/main-site/**'
      - 'apps/admin-dashboard/**'
      - 'packages/**'
      - '.github/workflows/deploy-webserver.yml'
  workflow_dispatch:
    inputs:
      deploy_target:
        description: 'Deploy target'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - main-site
          - admin-dashboard

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --legacy-peer-deps
          npm run build:packages

      - name: Build Main Site
        if: ${{ github.event.inputs.deploy_target == 'all' || github.event.inputs.deploy_target == 'main-site' }}
        run: |
          npm run build --workspace=@o4o/main-site
          echo "Main site build completed"

      - name: Build Admin Dashboard
        if: ${{ github.event.inputs.deploy_target == 'all' || github.event.inputs.deploy_target == 'admin-dashboard' }}
        run: |
          npm run build --workspace=@o4o/admin-dashboard
          echo "Admin dashboard build completed"

      - name: Deploy to Web Server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_HOST: ${{ secrets.WEB_SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          # Setup SSH
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Add host to known_hosts (with error handling)
          if [ -n "$SERVER_HOST" ]; then
            ssh-keyscan -H $SERVER_HOST >> ~/.ssh/known_hosts 2>/dev/null || {
              echo "Warning: Could not scan SSH host key for $SERVER_HOST"
              # Try with IP if hostname fails
              if [ -n "${{ secrets.WEB_SERVER_IP }}" ]; then
                ssh-keyscan -H ${{ secrets.WEB_SERVER_IP }} >> ~/.ssh/known_hosts 2>/dev/null || true
              fi
            }
          else
            echo "Error: SERVER_HOST is not set"
            exit 1
          fi

          # Deploy Main Site
          if [[ "${{ github.event.inputs.deploy_target }}" == "all" || "${{ github.event.inputs.deploy_target }}" == "main-site" ]]; then
            echo "Deploying Main Site..."
            rsync -avz --delete \
              apps/main-site/dist/ \
              $SERVER_USER@$SERVER_HOST:/var/www/o4o-platform/apps/main-site/dist/
          fi

          # Deploy Admin Dashboard
          if [[ "${{ github.event.inputs.deploy_target }}" == "all" || "${{ github.event.inputs.deploy_target }}" == "admin-dashboard" ]]; then
            echo "Deploying Admin Dashboard..."
            rsync -avz --delete \
              apps/admin-dashboard/dist/ \
              $SERVER_USER@$SERVER_HOST:/var/www/o4o-platform/apps/admin-dashboard/dist/
          fi

      - name: Ensure API server is not running
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_HOST: ${{ secrets.WEB_SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          # Setup SSH
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Stop and remove API server if running
          ssh $SERVER_USER@$SERVER_HOST << 'EOF'
            echo "Checking for API server..."
            
            # Check if API server is running
            if pm2 list | grep -q "o4o-api"; then
              echo "⚠️ API server detected. Removing..."
              pm2 delete o4o-api
              pm2 save
              echo "✅ API server removed"
            else
              echo "✅ API server not running (correct)"
            fi
            
            # Ensure only webserver and admin are running
            echo ""
            echo "Current PM2 processes:"
            pm2 list
            
            # Restart webserver and admin if needed
            if ! pm2 list | grep -q "o4o-webserver"; then
              echo "Starting webserver..."
              pm2 start /usr/bin/serve --name "o4o-webserver" -- -s /var/www/o4o-platform/apps/main-site/dist -l 3000
            fi
            
            if ! pm2 list | grep -q "o4o-admin"; then
              echo "Starting admin..."
              pm2 start /usr/bin/serve --name "o4o-admin" -- -s /var/www/o4o-platform/apps/admin-dashboard/dist -l 3001
            fi
            
            # Save PM2 configuration
            pm2 save
            
            echo ""
            echo "✅ Web server deployment complete"
            echo "✅ API server is NOT running (correct)"
          EOF

      - name: Post-deployment verification
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_HOST: ${{ secrets.WEB_SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          # Run post-deployment script if exists
          ssh $SERVER_USER@$SERVER_HOST << 'EOF'
            if [ -f /var/www/o4o-platform/scripts/post-deploy-webserver.sh ]; then
              echo "Running post-deployment verification..."
              bash /var/www/o4o-platform/scripts/post-deploy-webserver.sh
            else
              echo "Post-deployment script not found, skipping verification"
            fi
          EOF

      - name: Health Check
        run: |
          echo "Performing health checks..."
          sleep 10
          
          # Check main site
          response=$(curl -s -o /dev/null -w "%{http_code}" https://neture.co.kr || echo "000")
          if [ "$response" = "200" ] || [ "$response" = "301" ] || [ "$response" = "302" ]; then
            echo "✅ Main site is accessible (HTTP $response)"
          else
            echo "⚠️ Main site returned HTTP $response"
          fi
          
          # Check admin dashboard
          response=$(curl -s -o /dev/null -w "%{http_code}" https://admin.neture.co.kr || echo "000")
          if [ "$response" = "200" ] || [ "$response" = "301" ] || [ "$response" = "302" ]; then
            echo "✅ Admin dashboard is accessible (HTTP $response)"
          else
            echo "⚠️ Admin dashboard returned HTTP $response"
          fi

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ Deployment successful!"
            echo "- Main site: https://neture.co.kr"
            echo "- Admin: https://admin.neture.co.kr"
            echo "- API server: NOT running on this server (correct)"
          else
            echo "❌ Deployment failed!"
          fi
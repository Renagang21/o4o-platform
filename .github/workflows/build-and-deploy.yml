name: Build and Deploy

on:
  push:
    branches: [ main ]

env:
  NODE_VERSION: '22.18.0'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 9
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.pnpm-store
          **/node_modules
        key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Build packages
      run: pnpm run build:packages
      continue-on-error: true
    
    - name: Build Admin Dashboard
      run: |
        cd apps/admin-dashboard
        
        # Create production env file
        cat > .env.production << EOF
        NODE_ENV=production
        VITE_API_URL=https://api.neture.co.kr
        VITE_WEBSOCKET_URL=wss://api.neture.co.kr
        VITE_ADMIN_URL=https://admin.neture.co.kr
        VITE_MAIN_SITE_URL=https://neture.co.kr
        VITE_STOREFRONT_URL=https://neture.co.kr
        GENERATE_SOURCEMAP=false
        EOF
        
        # Build with production settings
        NODE_OPTIONS='--max-old-space-size=4096' \
        NODE_ENV=production \
        GENERATE_SOURCEMAP=false \
        VITE_API_URL=https://api.neture.co.kr \
        pnpm run build
    
    - name: Create deployment package
      run: |
        cd apps/admin-dashboard/dist
        tar -czf ../../../deploy.tar.gz .
        cd ../../..
        ls -la deploy.tar.gz
    
    - name: Deploy to Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.WEB_HOST }}
        username: ${{ secrets.WEB_USER }}
        key: ${{ secrets.WEB_SSH_KEY }}
        script: |
          # Variables
          TARGET_DIR="/var/www/admin.neture.co.kr"
          BACKUP_DIR="/var/www/admin-backup"
          TEMP_DIR="/tmp/deploy-${{ github.run_id }}"
          
          # Create temp directory
          mkdir -p $TEMP_DIR
          cd $TEMP_DIR
          
          echo "üì• Downloading deployment package..."
    
    - name: Transfer built files
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.WEB_HOST }}
        username: ${{ secrets.WEB_USER }}
        key: ${{ secrets.WEB_SSH_KEY }}
        source: "deploy.tar.gz"
        target: "/tmp/deploy-${{ github.run_id }}"
    
    - name: Extract and deploy
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.WEB_HOST }}
        username: ${{ secrets.WEB_USER }}
        key: ${{ secrets.WEB_SSH_KEY }}
        script: |
          TARGET_DIR="/var/www/admin.neture.co.kr"
          BACKUP_DIR="/var/www/admin-backup"
          TEMP_DIR="/tmp/deploy-${{ github.run_id }}"
          
          cd $TEMP_DIR
          
          # Extract files
          echo "üì¶ Extracting files..."
          tar -xzf deploy.tar.gz
          
          # Backup current site
          if [ -d "$TARGET_DIR" ]; then
            echo "üíæ Creating backup..."
            BACKUP_NAME="backup-$(date +%Y%m%d-%H%M%S)"
            sudo mkdir -p "$BACKUP_DIR"
            sudo cp -r "$TARGET_DIR" "$BACKUP_DIR/$BACKUP_NAME"
            
            # Keep only 3 recent backups
            ls -1dt $BACKUP_DIR/backup-* | tail -n +4 | xargs sudo rm -rf 2>/dev/null || true
          fi
          
          # Deploy new files
          echo "üöÄ Deploying new files..."
          sudo rm -rf "$TARGET_DIR"/*
          sudo cp -r * "$TARGET_DIR"/ 2>/dev/null || true
          sudo rm -f "$TARGET_DIR/deploy.tar.gz"
          
          # Add version info
          TIMESTAMP=$(date +%s)
          echo "{\"version\": \"$TIMESTAMP\", \"commit\": \"${{ github.sha }}\", \"build\": \"${{ github.run_id }}\"}" | sudo tee "$TARGET_DIR/version.json"
          
          # Set permissions
          sudo chown -R www-data:www-data "$TARGET_DIR"
          sudo chmod -R 755 "$TARGET_DIR"
          
          # Clear caches
          sudo rm -rf /var/cache/nginx/*
          
          # Reload Nginx
          sudo systemctl reload nginx
          
          # Cleanup
          rm -rf $TEMP_DIR
          
          echo "‚úÖ Deployment complete!"
          echo "üåê Site: https://admin.neture.co.kr"
          echo "üìä Build: #${{ github.run_id }}"
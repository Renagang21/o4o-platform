{
  "version": 3,
  "sources": ["../../../../node_modules/@tannin/sprintf/src/index.js", "../../../../node_modules/@wordpress/i18n/build-module/@wordpress/i18n/src/sprintf.ts", "../../../../node_modules/@tannin/postfix/index.js", "../../../../node_modules/@tannin/evaluate/index.js", "../../../../node_modules/@tannin/compile/index.js", "../../../../node_modules/@tannin/plural-forms/index.js", "../../../../node_modules/tannin/index.js", "../../../../node_modules/@wordpress/i18n/build-module/@wordpress/i18n/src/create-i18n.ts", "../../../../node_modules/@wordpress/hooks/build-module/@wordpress/hooks/src/validateNamespace.ts", "../../../../node_modules/@wordpress/hooks/build-module/@wordpress/hooks/src/validateHookName.ts", "../../../../node_modules/@wordpress/hooks/build-module/@wordpress/hooks/src/createAddHook.ts", "../../../../node_modules/@wordpress/hooks/build-module/@wordpress/hooks/src/createRemoveHook.ts", "../../../../node_modules/@wordpress/hooks/build-module/@wordpress/hooks/src/createHasHook.ts", "../../../../node_modules/@wordpress/hooks/build-module/@wordpress/hooks/src/createRunHook.ts", "../../../../node_modules/@wordpress/hooks/build-module/@wordpress/hooks/src/createCurrentHook.ts", "../../../../node_modules/@wordpress/hooks/build-module/@wordpress/hooks/src/createDoingHook.ts", "../../../../node_modules/@wordpress/hooks/build-module/@wordpress/hooks/src/createDidHook.ts", "../../../../node_modules/@wordpress/hooks/build-module/@wordpress/hooks/src/createHooks.ts", "../../../../node_modules/@wordpress/hooks/build-module/@wordpress/hooks/src/index.ts", "../../../../node_modules/@wordpress/i18n/build-module/@wordpress/i18n/src/default-i18n.ts"],
  "sourcesContent": ["/**\n * Regular expression matching format placeholder syntax.\n *\n * The pattern for matching named arguments is a naive and incomplete matcher\n * against valid JavaScript identifier names.\n *\n * via Mathias Bynens:\n *\n * >An identifier must start with $, _, or any character in the Unicode\n * >categories “Uppercase letter (Lu)”, “Lowercase letter (Ll)”, “Titlecase\n * >letter (Lt)”, “Modifier letter (Lm)”, “Other letter (Lo)”, or “Letter\n * >number (Nl)”.\n * >\n * >The rest of the string can contain the same characters, plus any U+200C zero\n * >width non-joiner characters, U+200D zero width joiner characters, and\n * >characters in the Unicode categories “Non-spacing mark (Mn)”, “Spacing\n * >combining mark (Mc)”, “Decimal digit number (Nd)”, or “Connector\n * >punctuation (Pc)”.\n *\n * If browser support is constrained to those supporting ES2015, this could be\n * made more accurate using the `u` flag:\n *\n * ```\n * /^[$_\\p{L}\\p{Nl}][$_\\p{L}\\p{Nl}\\u200C\\u200D\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}]*$/u;\n * ```\n *\n * @see http://www.pixelbeat.org/programming/gcc/format_specs.html\n * @see https://mathiasbynens.be/notes/javascript-identifiers#valid-identifier-names\n *\n * @type {RegExp}\n */\nvar PATTERN =\n\t/%(((\\d+)\\$)|(\\(([$_a-zA-Z][$_a-zA-Z0-9]*)\\)))?[ +0#-]*\\d*(\\.(\\d+|\\*))?(ll|[lhqL])?([cduxXefgsp%])/g;\n//               ▲         ▲                    ▲       ▲  ▲            ▲           ▲ type\n//               │         │                    │       │  │            └ Length (unsupported)\n//               │         │                    │       │  └ Precision / max width\n//               │         │                    │       └ Min width (unsupported)\n//               │         │                    └ Flags (unsupported)\n//               └ Index   └ Name (for named arguments)\n/**\n * Given a format string, returns string with arguments interpolatation.\n * Arguments can either be provided directly via function arguments spread, or\n * with an array as the second argument.\n *\n * @see https://en.wikipedia.org/wiki/Printf_format_string\n *\n * @example\n *\n * ```js\n * import sprintf from '@tannin/sprintf';\n *\n * sprintf( 'Hello %s!', 'world' );\n * // ⇒ 'Hello world!'\n * ```\n * @template {string} T\n * @overload\n * @param {T} string - string printf format string\n * @param {...import('../types').SprintfArgs<T>} args - arguments to interpolate\n *\n * @return {string} Formatted string.\n */\n\n/**\n * Given a format string, returns string with arguments interpolatation.\n * Arguments can either be provided directly via function arguments spread, or\n * with an array as the second argument.\n *\n * @see https://en.wikipedia.org/wiki/Printf_format_string\n *\n * @example\n *\n * ```js\n * import sprintf from '@tannin/sprintf';\n *\n * sprintf( 'Hello %s!', 'world' );\n * // ⇒ 'Hello world!'\n * ```\n * @template {string} T\n * @overload\n * @param {T} string - string printf format string\n * @param {import('../types').SprintfArgs<T>} args - arguments to interpolate\n *\n * @return {string} Formatted string.\n */\n\n/**\n * Given a format string, returns string with arguments interpolatation.\n * Arguments can either be provided directly via function arguments spread, or\n * with an array as the second argument.\n *\n * @see https://en.wikipedia.org/wiki/Printf_format_string\n *\n * @example\n *\n * ```js\n * import sprintf from '@tannin/sprintf';\n *\n * sprintf( 'Hello %s!', 'world' );\n * // ⇒ 'Hello world!'\n * ```\n * @template {string} T\n * @param {T} string - string printf format string\n * @param {...import('../types').SprintfArgs<T>} args - arguments to interpolate\n *\n * @return {string} Formatted string.\n */\nexport default function sprintf(string, ...args) {\n\tvar i = 0;\n\tif (Array.isArray(args[0])) {\n\t\targs = /** @type {import('../types').SprintfArgs<T>[]} */ (\n\t\t\t/** @type {unknown} */ args[0]\n\t\t);\n\t}\n\n\treturn string.replace(PATTERN, function () {\n\t\tvar index,\n\t\t\t// name needs to be documented as `string | undefined` else value will have tpye unknown.\n\t\t\t/**\n\t\t\t * Name of the argument to substitute, if any.\n\t\t\t *\n\t\t\t * @type {string | undefined}\n\t\t\t */\n\t\t\tname,\n\t\t\tprecision,\n\t\t\ttype,\n\t\t\tvalue;\n\n\t\tindex = arguments[3];\n\t\tname = arguments[5];\n\t\tprecision = arguments[7];\n\t\ttype = arguments[9];\n\n\t\t// There's no placeholder substitution in the explicit \"%\", meaning it\n\t\t// is not necessary to increment argument index.\n\t\tif (type === '%') {\n\t\t\treturn '%';\n\t\t}\n\n\t\t// Asterisk precision determined by peeking / shifting next argument.\n\t\tif (precision === '*') {\n\t\t\tprecision = args[i];\n\t\t\ti++;\n\t\t}\n\n\t\tif (name === undefined) {\n\t\t\t// If not a positional argument, use counter value.\n\t\t\tif (index === undefined) {\n\t\t\t\tindex = i + 1;\n\t\t\t}\n\n\t\t\ti++;\n\n\t\t\t// Positional argument.\n\t\t\tvalue = args[index - 1];\n\t\t} else if (\n\t\t\targs[0] &&\n\t\t\ttypeof args[0] === 'object' &&\n\t\t\targs[0].hasOwnProperty(name)\n\t\t) {\n\t\t\t// If it's a named argument, use name.\n\t\t\tvalue = args[0][name];\n\t\t}\n\n\t\t// Parse as type.\n\t\tif (type === 'f') {\n\t\t\tvalue = parseFloat(value) || 0;\n\t\t} else if (type === 'd') {\n\t\t\tvalue = parseInt(value) || 0;\n\t\t}\n\n\t\t// Apply precision.\n\t\tif (precision !== undefined) {\n\t\t\tif (type === 'f') {\n\t\t\t\tvalue = value.toFixed(precision);\n\t\t\t} else if (type === 's') {\n\t\t\t\tvalue = value.substr(0, precision);\n\t\t\t}\n\t\t}\n\n\t\t// To avoid \"undefined\" concatenation, return empty string if no\n\t\t// placeholder substitution can be performed.\n\t\treturn value !== undefined && value !== null ? value : '';\n\t});\n}\n", "/**\n * External dependencies\n */\n// Disable reason: `eslint-plugin-import` doesn't support `exports` (https://github.com/import-js/eslint-plugin-import/issues/1810)\n// eslint-disable-next-line import/no-unresolved\nimport _sprintf from '@tannin/sprintf';\n\n/**\n * Internal dependencies\n */\nimport type { DistributeSprintfArgs, TranslatableText } from './types';\n\nexport function sprintf< T extends string >(\n\tformat: T | TranslatableText< T >,\n\t...args: DistributeSprintfArgs< T >\n): string;\nexport function sprintf< T extends string >(\n\tformat: T | TranslatableText< T >,\n\targs: DistributeSprintfArgs< T >\n): string;\n\n/**\n * Returns a formatted string.\n *\n * @param format The format of the string to generate.\n * @param args   Arguments to apply to the format.\n *\n * @see https://www.npmjs.com/package/@tannin/sprintf\n *\n * @return The formatted string.\n */\nexport function sprintf< T extends string >(\n\tformat: T | TranslatableText< T >,\n\t...args: DistributeSprintfArgs< T >\n): string {\n\treturn _sprintf( format as T, ...( args as DistributeSprintfArgs< T > ) );\n}\n", "var PRECEDENCE, OPENERS, TERMINATORS, PATTERN;\n\n/**\n * Operator precedence mapping.\n *\n * @type {Object}\n */\nPRECEDENCE = {\n\t'(': 9,\n\t'!': 8,\n\t'*': 7,\n\t'/': 7,\n\t'%': 7,\n\t'+': 6,\n\t'-': 6,\n\t'<': 5,\n\t'<=': 5,\n\t'>': 5,\n\t'>=': 5,\n\t'==': 4,\n\t'!=': 4,\n\t'&&': 3,\n\t'||': 2,\n\t'?': 1,\n\t'?:': 1,\n};\n\n/**\n * Characters which signal pair opening, to be terminated by terminators.\n *\n * @type {string[]}\n */\nOPENERS = [ '(', '?' ];\n\n/**\n * Characters which signal pair termination, the value an array with the\n * opener as its first member. The second member is an optional operator\n * replacement to push to the stack.\n *\n * @type {string[]}\n */\nTERMINATORS = {\n\t')': [ '(' ],\n\t':': [ '?', '?:' ],\n};\n\n/**\n * Pattern matching operators and openers.\n *\n * @type {RegExp}\n */\nPATTERN = /<=|>=|==|!=|&&|\\|\\||\\?:|\\(|!|\\*|\\/|%|\\+|-|<|>|\\?|\\)|:/;\n\n/**\n * Given a C expression, returns the equivalent postfix (Reverse Polish)\n * notation terms as an array.\n *\n * If a postfix string is desired, simply `.join( ' ' )` the result.\n *\n * @example\n *\n * ```js\n * import postfix from '@tannin/postfix';\n *\n * postfix( 'n > 1' );\n * // ⇒ [ 'n', '1', '>' ]\n * ```\n *\n * @param {string} expression C expression.\n *\n * @return {string[]} Postfix terms.\n */\nexport default function postfix( expression ) {\n\tvar terms = [],\n\t\tstack = [],\n\t\tmatch, operator, term, element;\n\n\twhile ( ( match = expression.match( PATTERN ) ) ) {\n\t\toperator = match[ 0 ];\n\n\t\t// Term is the string preceding the operator match. It may contain\n\t\t// whitespace, and may be empty (if operator is at beginning).\n\t\tterm = expression.substr( 0, match.index ).trim();\n\t\tif ( term ) {\n\t\t\tterms.push( term );\n\t\t}\n\n\t\twhile ( ( element = stack.pop() ) ) {\n\t\t\tif ( TERMINATORS[ operator ] ) {\n\t\t\t\tif ( TERMINATORS[ operator ][ 0 ] === element ) {\n\t\t\t\t\t// Substitution works here under assumption that because\n\t\t\t\t\t// the assigned operator will no longer be a terminator, it\n\t\t\t\t\t// will be pushed to the stack during the condition below.\n\t\t\t\t\toperator = TERMINATORS[ operator ][ 1 ] || operator;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else if ( OPENERS.indexOf( element ) >= 0 || PRECEDENCE[ element ] < PRECEDENCE[ operator ] ) {\n\t\t\t\t// Push to stack if either an opener or when pop reveals an\n\t\t\t\t// element of lower precedence.\n\t\t\t\tstack.push( element );\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// For each popped from stack, push to terms.\n\t\t\tterms.push( element );\n\t\t}\n\n\t\tif ( ! TERMINATORS[ operator ] ) {\n\t\t\tstack.push( operator );\n\t\t}\n\n\t\t// Slice matched fragment from expression to continue match.\n\t\texpression = expression.substr( match.index + operator.length );\n\t}\n\n\t// Push remainder of operand, if exists, to terms.\n\texpression = expression.trim();\n\tif ( expression ) {\n\t\tterms.push( expression );\n\t}\n\n\t// Pop remaining items from stack into terms.\n\treturn terms.concat( stack.reverse() );\n}\n", "/**\n * Operator callback functions.\n *\n * @type {Object}\n */\nvar OPERATORS = {\n\t'!': function( a ) {\n\t\treturn ! a;\n\t},\n\t'*': function( a, b ) {\n\t\treturn a * b;\n\t},\n\t'/': function( a, b ) {\n\t\treturn a / b;\n\t},\n\t'%': function( a, b ) {\n\t\treturn a % b;\n\t},\n\t'+': function( a, b ) {\n\t\treturn a + b;\n\t},\n\t'-': function( a, b ) {\n\t\treturn a - b;\n\t},\n\t'<': function( a, b ) {\n\t\treturn a < b;\n\t},\n\t'<=': function( a, b ) {\n\t\treturn a <= b;\n\t},\n\t'>': function( a, b ) {\n\t\treturn a > b;\n\t},\n\t'>=': function( a, b ) {\n\t\treturn a >= b;\n\t},\n\t'==': function( a, b ) {\n\t\treturn a === b;\n\t},\n\t'!=': function( a, b ) {\n\t\treturn a !== b;\n\t},\n\t'&&': function( a, b ) {\n\t\treturn a && b;\n\t},\n\t'||': function( a, b ) {\n\t\treturn a || b;\n\t},\n\t'?:': function( a, b, c ) {\n\t\tif ( a ) {\n\t\t\tthrow b;\n\t\t}\n\n\t\treturn c;\n\t},\n};\n\n/**\n * Given an array of postfix terms and operand variables, returns the result of\n * the postfix evaluation.\n *\n * @example\n *\n * ```js\n * import evaluate from '@tannin/evaluate';\n *\n * // 3 + 4 * 5 / 6 ⇒ '3 4 5 * 6 / +'\n * const terms = [ '3', '4', '5', '*', '6', '/', '+' ];\n *\n * evaluate( terms, {} );\n * // ⇒ 6.333333333333334\n * ```\n *\n * @param {string[]} postfix   Postfix terms.\n * @param {Object}   variables Operand variables.\n *\n * @return {*} Result of evaluation.\n */\nexport default function evaluate( postfix, variables ) {\n\tvar stack = [],\n\t\ti, j, args, getOperatorResult, term, value;\n\n\tfor ( i = 0; i < postfix.length; i++ ) {\n\t\tterm = postfix[ i ];\n\n\t\tgetOperatorResult = OPERATORS[ term ];\n\t\tif ( getOperatorResult ) {\n\t\t\t// Pop from stack by number of function arguments.\n\t\t\tj = getOperatorResult.length;\n\t\t\targs = Array( j );\n\t\t\twhile ( j-- ) {\n\t\t\t\targs[ j ] = stack.pop();\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tvalue = getOperatorResult.apply( null, args );\n\t\t\t} catch ( earlyReturn ) {\n\t\t\t\treturn earlyReturn;\n\t\t\t}\n\t\t} else if ( variables.hasOwnProperty( term ) ) {\n\t\t\tvalue = variables[ term ];\n\t\t} else {\n\t\t\tvalue = +term;\n\t\t}\n\n\t\tstack.push( value );\n\t}\n\n\treturn stack[ 0 ];\n}\n", "import postfix from '@tannin/postfix';\nimport evaluate from '@tannin/evaluate';\n\n/**\n * Given a C expression, returns a function which can be called to evaluate its\n * result.\n *\n * @example\n *\n * ```js\n * import compile from '@tannin/compile';\n *\n * const evaluate = compile( 'n > 1' );\n *\n * evaluate( { n: 2 } );\n * // ⇒ true\n * ```\n *\n * @param {string} expression C expression.\n *\n * @return {(variables?:{[variable:string]:*})=>*} Compiled evaluator.\n */\nexport default function compile( expression ) {\n\tvar terms = postfix( expression );\n\n\treturn function( variables ) {\n\t\treturn evaluate( terms, variables );\n\t};\n}\n", "import compile from '@tannin/compile';\n\n/**\n * Given a C expression, returns a function which, when called with a value,\n * evaluates the result with the value assumed to be the \"n\" variable of the\n * expression. The result will be coerced to its numeric equivalent.\n *\n * @param {string} expression C expression.\n *\n * @return {Function} Evaluator function.\n */\nexport default function pluralForms( expression ) {\n\tvar evaluate = compile( expression );\n\n\treturn function( n ) {\n\t\treturn +evaluate( { n: n } );\n\t};\n}\n", "import pluralForms from '@tannin/plural-forms';\n\n/**\n * Tannin constructor options.\n *\n * @typedef {Object} TanninOptions\n *\n * @property {string}   [contextDelimiter] Joiner in string lookup with context.\n * @property {Function} [onMissingKey]     Callback to invoke when key missing.\n */\n\n/**\n * Domain metadata.\n *\n * @typedef {Object} TanninDomainMetadata\n *\n * @property {string}            [domain]       Domain name.\n * @property {string}            [lang]         Language code.\n * @property {(string|Function)} [plural_forms] Plural forms expression or\n *                                              function evaluator.\n */\n\n/**\n * Domain translation pair respectively representing the singular and plural\n * translation.\n *\n * @typedef {[string,string]} TanninTranslation\n */\n\n/**\n * Locale data domain. The key is used as reference for lookup, the value an\n * array of two string entries respectively representing the singular and plural\n * translation.\n *\n * @typedef {{[key:string]:TanninDomainMetadata|TanninTranslation,'':TanninDomainMetadata|TanninTranslation}} TanninLocaleDomain\n */\n\n/**\n * Jed-formatted locale data.\n *\n * @see http://messageformat.github.io/Jed/\n *\n * @typedef {{[domain:string]:TanninLocaleDomain}} TanninLocaleData\n */\n\n/**\n * Default Tannin constructor options.\n *\n * @type {TanninOptions}\n */\nvar DEFAULT_OPTIONS = {\n\tcontextDelimiter: '\\u0004',\n\tonMissingKey: null,\n};\n\n/**\n * Given a specific locale data's config `plural_forms` value, returns the\n * expression.\n *\n * @example\n *\n * ```\n * getPluralExpression( 'nplurals=2; plural=(n != 1);' ) === '(n != 1)'\n * ```\n *\n * @param {string} pf Locale data plural forms.\n *\n * @return {string} Plural forms expression.\n */\nfunction getPluralExpression( pf ) {\n\tvar parts, i, part;\n\n\tparts = pf.split( ';' );\n\n\tfor ( i = 0; i < parts.length; i++ ) {\n\t\tpart = parts[ i ].trim();\n\t\tif ( part.indexOf( 'plural=' ) === 0 ) {\n\t\t\treturn part.substr( 7 );\n\t\t}\n\t}\n}\n\n/**\n * Tannin constructor.\n *\n * @class\n *\n * @param {TanninLocaleData} data      Jed-formatted locale data.\n * @param {TanninOptions}    [options] Tannin options.\n */\nexport default function Tannin( data, options ) {\n\tvar key;\n\n\t/**\n\t * Jed-formatted locale data.\n\t *\n\t * @name Tannin#data\n\t * @type {TanninLocaleData}\n\t */\n\tthis.data = data;\n\n\t/**\n\t * Plural forms function cache, keyed by plural forms string.\n\t *\n\t * @name Tannin#pluralForms\n\t * @type {Object<string,Function>}\n\t */\n\tthis.pluralForms = {};\n\n\t/**\n\t * Effective options for instance, including defaults.\n\t *\n\t * @name Tannin#options\n\t * @type {TanninOptions}\n\t */\n\tthis.options = {};\n\n\tfor ( key in DEFAULT_OPTIONS ) {\n\t\tthis.options[ key ] = options !== undefined && key in options\n\t\t\t? options[ key ]\n\t\t\t: DEFAULT_OPTIONS[ key ];\n\t}\n}\n\n/**\n * Returns the plural form index for the given domain and value.\n *\n * @param {string} domain Domain on which to calculate plural form.\n * @param {number} n      Value for which plural form is to be calculated.\n *\n * @return {number} Plural form index.\n */\nTannin.prototype.getPluralForm = function( domain, n ) {\n\tvar getPluralForm = this.pluralForms[ domain ],\n\t\tconfig, plural, pf;\n\n\tif ( ! getPluralForm ) {\n\t\tconfig = this.data[ domain ][ '' ];\n\n\t\tpf = (\n\t\t\tconfig[ 'Plural-Forms' ] ||\n\t\t\tconfig[ 'plural-forms' ] ||\n\t\t\t// Ignore reason: As known, there's no way to document the empty\n\t\t\t// string property on a key to guarantee this as metadata.\n\t\t\t// @ts-ignore\n\t\t\tconfig.plural_forms\n\t\t);\n\n\t\tif ( typeof pf !== 'function' ) {\n\t\t\tplural = getPluralExpression(\n\t\t\t\tconfig[ 'Plural-Forms' ] ||\n\t\t\t\tconfig[ 'plural-forms' ] ||\n\t\t\t\t// Ignore reason: As known, there's no way to document the empty\n\t\t\t\t// string property on a key to guarantee this as metadata.\n\t\t\t\t// @ts-ignore\n\t\t\t\tconfig.plural_forms\n\t\t\t);\n\n\t\t\tpf = pluralForms( plural );\n\t\t}\n\n\t\tgetPluralForm = this.pluralForms[ domain ] = pf;\n\t}\n\n\treturn getPluralForm( n );\n};\n\n/**\n * Translate a string.\n *\n * @param {string}      domain   Translation domain.\n * @param {string|void} context  Context distinguishing terms of the same name.\n * @param {string}      singular Primary key for translation lookup.\n * @param {string=}     plural   Fallback value used for non-zero plural\n *                               form index.\n * @param {number=}     n        Value to use in calculating plural form.\n *\n * @return {string} Translated string.\n */\nTannin.prototype.dcnpgettext = function( domain, context, singular, plural, n ) {\n\tvar index, key, entry;\n\n\tif ( n === undefined ) {\n\t\t// Default to singular.\n\t\tindex = 0;\n\t} else {\n\t\t// Find index by evaluating plural form for value.\n\t\tindex = this.getPluralForm( domain, n );\n\t}\n\n\tkey = singular;\n\n\t// If provided, context is prepended to key with delimiter.\n\tif ( context ) {\n\t\tkey = context + this.options.contextDelimiter + singular;\n\t}\n\n\tentry = this.data[ domain ][ key ];\n\n\t// Verify not only that entry exists, but that the intended index is within\n\t// range and non-empty.\n\tif ( entry && entry[ index ] ) {\n\t\treturn entry[ index ];\n\t}\n\n\tif ( this.options.onMissingKey ) {\n\t\tthis.options.onMissingKey( singular, domain );\n\t}\n\n\t// If entry not found, fall back to singular vs. plural with zero index\n\t// representing the singular value.\n\treturn index === 0 ? singular : plural;\n};\n", "/**\n * External dependencies\n */\nimport type { TanninLocaleDomain } from 'tannin';\nimport Tannin from 'tannin';\n/**\n * Internal dependencies\n */\nimport type {\n\tgetFilterDomain,\n\tI18n,\n\tLocaleData,\n\tSubscribeCallback,\n\tTranslatableText,\n\tUnsubscribeCallback,\n} from './types';\n/**\n * WordPress dependencies\n */\nimport type { Hooks } from '@wordpress/hooks';\n/**\n * Default locale data to use for Tannin domain when not otherwise provided.\n * Assumes an English plural forms expression.\n */\nconst DEFAULT_LOCALE_DATA: LocaleData = {\n\t'': {\n\t\tplural_forms( n: number ) {\n\t\t\treturn n === 1 ? 0 : 1;\n\t\t},\n\t},\n};\n\n/*\n * Regular expression that matches i18n hooks like `i18n.gettext`, `i18n.ngettext`,\n * `i18n.gettext_domain` or `i18n.ngettext_with_context` or `i18n.has_translation`.\n */\nconst I18N_HOOK_REGEXP = /^i18n\\.(n?gettext|has_translation)(_|$)/;\n\n/**\n * Create an i18n instance\n *\n * @param [initialData]   Locale data configuration.\n * @param [initialDomain] Domain for which configuration applies.\n * @param [hooks]         Hooks implementation.\n *\n * @return I18n instance.\n */\nexport const createI18n = < TextDomain extends string >(\n\tinitialData?: LocaleData< TextDomain >,\n\tinitialDomain?: TextDomain,\n\thooks?: Hooks\n): I18n< TextDomain > => {\n\t/**\n\t * The underlying instance of Tannin to which exported functions interface.\n\t */\n\tconst tannin = new Tannin( {} );\n\n\tconst listeners = new Set< () => void >();\n\n\tconst notifyListeners = () => {\n\t\tlisteners.forEach( ( listener ) => listener() );\n\t};\n\n\t/**\n\t * Subscribe to changes of locale data.\n\t *\n\t * @param callback Subscription callback.\n\t * @return Unsubscribe callback.\n\t */\n\tconst subscribe = ( callback: SubscribeCallback ): UnsubscribeCallback => {\n\t\tlisteners.add( callback );\n\t\treturn () => listeners.delete( callback );\n\t};\n\n\tconst getLocaleData: I18n< TextDomain >[ 'getLocaleData' ] = (\n\t\tdomain = 'default' as TextDomain\n\t) => tannin.data[ domain ] as LocaleData< TextDomain >;\n\n\t/**\n\t * @param [data]\n\t * @param [domain]\n\t */\n\tconst doSetLocaleData = (\n\t\tdata?: LocaleData,\n\t\tdomain: TextDomain = 'default' as TextDomain\n\t) => {\n\t\ttannin.data[ domain ] = {\n\t\t\t...tannin.data[ domain ],\n\t\t\t...data,\n\t\t} as TanninLocaleDomain;\n\n\t\t// Populate default domain configuration (supported locale date which omits\n\t\t// a plural forms expression).\n\t\ttannin.data[ domain ][ '' ] = {\n\t\t\t...DEFAULT_LOCALE_DATA[ '' ],\n\t\t\t...tannin.data[ domain ]?.[ '' ],\n\t\t};\n\n\t\t// Clean up cached plural forms functions cache as it might be updated.\n\t\tdelete tannin.pluralForms[ domain ];\n\t};\n\n\tconst setLocaleData: I18n< TextDomain >[ 'setLocaleData' ] = (\n\t\tdata,\n\t\tdomain\n\t) => {\n\t\tdoSetLocaleData( data, domain );\n\t\tnotifyListeners();\n\t};\n\n\tconst addLocaleData: I18n< TextDomain >[ 'addLocaleData' ] = (\n\t\tdata,\n\t\tdomain = 'default' as TextDomain\n\t) => {\n\t\ttannin.data[ domain ] = {\n\t\t\t...tannin.data[ domain ],\n\t\t\t...data,\n\t\t\t// Populate default domain configuration (supported locale date which omits\n\t\t\t// a plural forms expression).\n\t\t\t'': {\n\t\t\t\t...DEFAULT_LOCALE_DATA[ '' ],\n\t\t\t\t...tannin.data[ domain ]?.[ '' ],\n\t\t\t\t...data?.[ '' ],\n\t\t\t},\n\t\t} as TanninLocaleDomain;\n\n\t\t// Clean up cached plural forms functions cache as it might be updated.\n\t\tdelete tannin.pluralForms[ domain ];\n\n\t\tnotifyListeners();\n\t};\n\n\tconst resetLocaleData: I18n< TextDomain >[ 'resetLocaleData' ] = (\n\t\tdata,\n\t\tdomain\n\t) => {\n\t\t// Reset all current Tannin locale data.\n\t\ttannin.data = {};\n\n\t\t// Reset cached plural forms functions cache.\n\t\ttannin.pluralForms = {};\n\n\t\tsetLocaleData( data, domain );\n\t};\n\n\t/**\n\t * Wrapper for Tannin's `dcnpgettext`. Populates default locale data if not\n\t * otherwise previously assigned.\n\t *\n\t * @param domain   Domain to retrieve the translated text.\n\t * @param context  Context information for the translators.\n\t * @param single   Text to translate if non-plural. Used as\n\t *                 fallback return value on a caught error.\n\t * @param [plural] The text to be used if the number is\n\t *                 plural.\n\t * @param [number] The number to compare against to use\n\t *                 either the singular or plural form.\n\t *\n\t * @return The translated string.\n\t */\n\tconst dcnpgettext = (\n\t\tdomain = 'default' as TextDomain,\n\t\tcontext: string | void,\n\t\tsingle: string,\n\t\tplural?: string,\n\t\tnumber?: number\n\t): string => {\n\t\tif ( ! tannin.data[ domain ] ) {\n\t\t\t// Use `doSetLocaleData` to set silently, without notifying listeners.\n\t\t\tdoSetLocaleData( undefined, domain );\n\t\t}\n\n\t\treturn tannin.dcnpgettext( domain, context, single, plural, number );\n\t};\n\n\tconst getFilterDomain: getFilterDomain = ( domain ) => domain || 'default';\n\n\tconst __: I18n< TextDomain >[ '__' ] = ( text, domain ) => {\n\t\tlet translation = dcnpgettext( domain, undefined, text );\n\t\tif ( ! hooks ) {\n\t\t\treturn translation as TranslatableText< typeof text >;\n\t\t}\n\n\t\t/**\n\t\t * Filters text with its translation.\n\t\t *\n\t\t * @param translation Translated text.\n\t\t * @param text        Text to translate.\n\t\t * @param domain      Text domain. Unique identifier for retrieving translated strings.\n\t\t */\n\t\ttranslation = hooks.applyFilters(\n\t\t\t'i18n.gettext',\n\t\t\ttranslation,\n\t\t\ttext,\n\t\t\tdomain\n\t\t) as TranslatableText< typeof text >;\n\n\t\treturn hooks.applyFilters(\n\t\t\t'i18n.gettext_' + getFilterDomain( domain ),\n\t\t\ttranslation,\n\t\t\ttext,\n\t\t\tdomain\n\t\t) as TranslatableText< typeof text >;\n\t};\n\n\tconst _x: I18n< TextDomain >[ '_x' ] = ( text, context, domain ) => {\n\t\tlet translation = dcnpgettext( domain, context, text );\n\t\tif ( ! hooks ) {\n\t\t\treturn translation as TranslatableText< typeof text >;\n\t\t}\n\n\t\t/**\n\t\t * Filters text with its translation based on context information.\n\t\t *\n\t\t * @param translation Translated text.\n\t\t * @param text        Text to translate.\n\t\t * @param context     Context information for the translators.\n\t\t * @param domain      Text domain. Unique identifier for retrieving translated strings.\n\t\t */\n\t\ttranslation = hooks.applyFilters(\n\t\t\t'i18n.gettext_with_context',\n\t\t\ttranslation,\n\t\t\ttext,\n\t\t\tcontext,\n\t\t\tdomain\n\t\t) as TranslatableText< typeof text >;\n\n\t\treturn hooks.applyFilters(\n\t\t\t'i18n.gettext_with_context_' + getFilterDomain( domain ),\n\t\t\ttranslation,\n\t\t\ttext,\n\t\t\tcontext,\n\t\t\tdomain\n\t\t) as TranslatableText< typeof text >;\n\t};\n\n\tconst _n: I18n< TextDomain >[ '_n' ] = (\n\t\tsingle,\n\t\tplural,\n\t\tnumber,\n\t\tdomain\n\t) => {\n\t\tlet translation = dcnpgettext(\n\t\t\tdomain,\n\t\t\tundefined,\n\t\t\tsingle,\n\t\t\tplural,\n\t\t\tnumber\n\t\t);\n\t\tif ( ! hooks ) {\n\t\t\treturn translation as TranslatableText<\n\t\t\t\ttypeof single | typeof plural\n\t\t\t>;\n\t\t}\n\n\t\t/**\n\t\t * Filters the singular or plural form of a string.\n\t\t *\n\t\t * @param translation Translated text.\n\t\t * @param single      The text to be used if the number is singular.\n\t\t * @param plural      The text to be used if the number is plural.\n\t\t * @param number      The number to compare against to use either the singular or plural form.\n\t\t * @param domain      Text domain. Unique identifier for retrieving translated strings.\n\t\t */\n\t\ttranslation = hooks.applyFilters(\n\t\t\t'i18n.ngettext',\n\t\t\ttranslation,\n\t\t\tsingle,\n\t\t\tplural,\n\t\t\tnumber,\n\t\t\tdomain\n\t\t) as TranslatableText< typeof single | typeof plural >;\n\n\t\treturn hooks.applyFilters(\n\t\t\t'i18n.ngettext_' + getFilterDomain( domain ),\n\t\t\ttranslation,\n\t\t\tsingle,\n\t\t\tplural,\n\t\t\tnumber,\n\t\t\tdomain\n\t\t) as TranslatableText< typeof single | typeof plural >;\n\t};\n\n\tconst _nx: I18n< TextDomain >[ '_nx' ] = (\n\t\tsingle,\n\t\tplural,\n\t\tnumber,\n\t\tcontext,\n\t\tdomain\n\t) => {\n\t\tlet translation = dcnpgettext(\n\t\t\tdomain,\n\t\t\tcontext,\n\t\t\tsingle,\n\t\t\tplural,\n\t\t\tnumber\n\t\t);\n\t\tif ( ! hooks ) {\n\t\t\treturn translation as TranslatableText<\n\t\t\t\ttypeof single | typeof plural\n\t\t\t>;\n\t\t}\n\n\t\t/**\n\t\t * Filters the singular or plural form of a string with gettext context.\n\t\t *\n\t\t * @param translation Translated text.\n\t\t * @param single      The text to be used if the number is singular.\n\t\t * @param plural      The text to be used if the number is plural.\n\t\t * @param number      The number to compare against to use either the singular or plural form.\n\t\t * @param context     Context information for the translators.\n\t\t * @param domain      Text domain. Unique identifier for retrieving translated strings.\n\t\t */\n\t\ttranslation = hooks.applyFilters(\n\t\t\t'i18n.ngettext_with_context',\n\t\t\ttranslation,\n\t\t\tsingle,\n\t\t\tplural,\n\t\t\tnumber,\n\t\t\tcontext,\n\t\t\tdomain\n\t\t) as TranslatableText< typeof single | typeof plural >;\n\n\t\treturn hooks.applyFilters(\n\t\t\t'i18n.ngettext_with_context_' + getFilterDomain( domain ),\n\t\t\ttranslation,\n\t\t\tsingle,\n\t\t\tplural,\n\t\t\tnumber,\n\t\t\tcontext,\n\t\t\tdomain\n\t\t) as TranslatableText< typeof single | typeof plural >;\n\t};\n\n\tconst isRTL: I18n< TextDomain >[ 'isRTL' ] = () => {\n\t\treturn 'rtl' === _x( 'ltr', 'text direction' );\n\t};\n\n\tconst hasTranslation: I18n< TextDomain >[ 'hasTranslation' ] = (\n\t\tsingle,\n\t\tcontext,\n\t\tdomain\n\t) => {\n\t\tconst key = context ? context + '\\u0004' + single : single;\n\t\tlet result = !! tannin.data?.[ domain ?? 'default' ]?.[ key ];\n\t\tif ( hooks ) {\n\t\t\t/**\n\t\t\t * Filters the presence of a translation in the locale data.\n\t\t\t *\n\t\t\t * @param hasTranslation Whether the translation is present or not..\n\t\t\t * @param single         The singular form of the translated text (used as key in locale data)\n\t\t\t * @param context        Context information for the translators.\n\t\t\t * @param domain         Text domain. Unique identifier for retrieving translated strings.\n\t\t\t */\n\t\t\tresult = hooks.applyFilters(\n\t\t\t\t'i18n.has_translation',\n\t\t\t\tresult,\n\t\t\t\tsingle,\n\t\t\t\tcontext,\n\t\t\t\tdomain\n\t\t\t) as boolean;\n\n\t\t\tresult = hooks.applyFilters(\n\t\t\t\t'i18n.has_translation_' + getFilterDomain( domain ),\n\t\t\t\tresult,\n\t\t\t\tsingle,\n\t\t\t\tcontext,\n\t\t\t\tdomain\n\t\t\t) as boolean;\n\t\t}\n\t\treturn result;\n\t};\n\n\tif ( initialData ) {\n\t\tsetLocaleData( initialData, initialDomain );\n\t}\n\n\tif ( hooks ) {\n\t\t/**\n\t\t * @param hookName\n\t\t */\n\t\tconst onHookAddedOrRemoved = ( hookName: string ) => {\n\t\t\tif ( I18N_HOOK_REGEXP.test( hookName ) ) {\n\t\t\t\tnotifyListeners();\n\t\t\t}\n\t\t};\n\n\t\thooks.addAction( 'hookAdded', 'core/i18n', onHookAddedOrRemoved );\n\t\thooks.addAction( 'hookRemoved', 'core/i18n', onHookAddedOrRemoved );\n\t}\n\n\treturn {\n\t\tgetLocaleData,\n\t\tsetLocaleData,\n\t\taddLocaleData,\n\t\tresetLocaleData,\n\t\tsubscribe,\n\t\t__,\n\t\t_x,\n\t\t_n,\n\t\t_nx,\n\t\tisRTL,\n\t\thasTranslation,\n\t};\n};\n", "/**\n * Validate a namespace string.\n *\n * @param namespace The namespace to validate - should take the form\n *                  `vendor/plugin/function`.\n *\n * @return Whether the namespace is valid.\n */\nfunction validateNamespace( namespace: string ): boolean {\n\tif ( 'string' !== typeof namespace || '' === namespace ) {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.error( 'The namespace must be a non-empty string.' );\n\t\treturn false;\n\t}\n\n\tif ( ! /^[a-zA-Z][a-zA-Z0-9_.\\-\\/]*$/.test( namespace ) ) {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.error(\n\t\t\t'The namespace can only contain numbers, letters, dashes, periods, underscores and slashes.'\n\t\t);\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\nexport default validateNamespace;\n", "/**\n * Validate a hookName string.\n *\n * @param hookName The hook name to validate. Should be a non empty string containing\n *                 only numbers, letters, dashes, periods and underscores. Also,\n *                 the hook name cannot begin with `__`.\n *\n * @return Whether the hook name is valid.\n */\nfunction validateHookName( hookName: string ): boolean {\n\tif ( 'string' !== typeof hookName || '' === hookName ) {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.error( 'The hook name must be a non-empty string.' );\n\t\treturn false;\n\t}\n\n\tif ( /^__/.test( hookName ) ) {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.error( 'The hook name cannot begin with `__`.' );\n\t\treturn false;\n\t}\n\n\tif ( ! /^[a-zA-Z][a-zA-Z0-9_.-]*$/.test( hookName ) ) {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.error(\n\t\t\t'The hook name can only contain numbers, letters, dashes, periods and underscores.'\n\t\t);\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\nexport default validateHookName;\n", "/**\n * Internal dependencies\n */\nimport validateNamespace from './validateNamespace';\nimport validateHookName from './validateHookName';\nimport type { Callback, Hooks, StoreKey } from '.';\nimport type { Handler, HookInfo } from './types';\n\n/**\n *\n * Adds the hook to the appropriate hooks container.\n */\nexport type AddHook = (\n\t/**\n\t * Name of hook to add\n\t */\n\thookName: string,\n\t/**\n\t * The unique namespace identifying the callback in the form.\n\t */\n\tnamespace: string,\n\t/**\n\t * Function to call when the hook is run.\n\t */\n\tcallback: Callback,\n\t/**\n\t * Priority of this hook\n\t */\n\tpriority?: number\n) => void;\n\n/**\n * Returns a function which, when invoked, will add a hook.\n *\n * @param hooks    Hooks instance.\n * @param storeKey\n *\n * @return  Function that adds a new hook.\n */\nfunction createAddHook( hooks: Hooks, storeKey: StoreKey ): AddHook {\n\treturn function addHook( hookName, namespace, callback, priority = 10 ) {\n\t\tconst hooksStore = hooks[ storeKey ];\n\n\t\tif ( ! validateHookName( hookName ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( ! validateNamespace( namespace ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( 'function' !== typeof callback ) {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.error( 'The hook callback must be a function.' );\n\t\t\treturn;\n\t\t}\n\n\t\t// Validate numeric priority\n\t\tif ( 'number' !== typeof priority ) {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.error(\n\t\t\t\t'If specified, the hook priority must be a number.'\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tconst handler: Handler = { callback, priority, namespace };\n\n\t\tif ( hooksStore[ hookName ] ) {\n\t\t\t// Find the correct insert index of the new hook.\n\t\t\tconst handlers = hooksStore[ hookName ].handlers;\n\n\t\t\tlet i: number;\n\t\t\tfor ( i = handlers.length; i > 0; i-- ) {\n\t\t\t\tif ( priority >= handlers[ i - 1 ].priority ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( i === handlers.length ) {\n\t\t\t\t// If append, operate via direct assignment.\n\t\t\t\thandlers[ i ] = handler;\n\t\t\t} else {\n\t\t\t\t// Otherwise, insert before index via splice.\n\t\t\t\thandlers.splice( i, 0, handler );\n\t\t\t}\n\n\t\t\t// We may also be currently executing this hook.  If the callback\n\t\t\t// we're adding would come after the current callback, there's no\n\t\t\t// problem; otherwise we need to increase the execution index of\n\t\t\t// any other runs by 1 to account for the added element.\n\t\t\thooksStore.__current.forEach( ( hookInfo: HookInfo ) => {\n\t\t\t\tif (\n\t\t\t\t\thookInfo.name === hookName &&\n\t\t\t\t\thookInfo.currentIndex >= i\n\t\t\t\t) {\n\t\t\t\t\thookInfo.currentIndex++;\n\t\t\t\t}\n\t\t\t} );\n\t\t} else {\n\t\t\t// This is the first hook of its type.\n\t\t\thooksStore[ hookName ] = {\n\t\t\t\thandlers: [ handler ],\n\t\t\t\truns: 0,\n\t\t\t};\n\t\t}\n\n\t\tif ( hookName !== 'hookAdded' ) {\n\t\t\thooks.doAction(\n\t\t\t\t'hookAdded',\n\t\t\t\thookName,\n\t\t\t\tnamespace,\n\t\t\t\tcallback,\n\t\t\t\tpriority\n\t\t\t);\n\t\t}\n\t};\n}\n\nexport default createAddHook;\n", "/**\n * Internal dependencies\n */\nimport validateNamespace from './validateNamespace';\nimport validateHookName from './validateHookName';\nimport type { Hooks, StoreKey } from './types';\n\n/**\n * Removes the specified callback (or all callbacks) from the hook with a given hookName\n * and namespace.\n */\nexport type RemoveHook = (\n\t/**\n\t * The name of the hook to modify.\n\t */\n\thookName: string,\n\t/**\n\t * The unique namespace identifying the callback in the form `vendor/plugin/function`.\n\t */\n\tnamespace: string\n) => number | undefined;\n\n/**\n * Returns a function which, when invoked, will remove a specified hook or all\n * hooks by the given name.\n *\n * @param hooks             Hooks instance.\n * @param storeKey\n * @param [removeAll=false] Whether to remove all callbacks for a hookName,\n *                          without regard to namespace. Used to create\n *                          `removeAll*` functions.\n *\n * @return Function that removes hooks.\n */\nfunction createRemoveHook(\n\thooks: Hooks,\n\tstoreKey: StoreKey,\n\tremoveAll: boolean = false\n): RemoveHook {\n\treturn function removeHook( hookName, namespace ) {\n\t\tconst hooksStore = hooks[ storeKey ];\n\n\t\tif ( ! validateHookName( hookName ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( ! removeAll && ! validateNamespace( namespace ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Bail if no hooks exist by this name.\n\t\tif ( ! hooksStore[ hookName ] ) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet handlersRemoved = 0;\n\n\t\tif ( removeAll ) {\n\t\t\thandlersRemoved = hooksStore[ hookName ].handlers.length;\n\t\t\thooksStore[ hookName ] = {\n\t\t\t\truns: hooksStore[ hookName ].runs,\n\t\t\t\thandlers: [],\n\t\t\t};\n\t\t} else {\n\t\t\t// Try to find the specified callback to remove.\n\t\t\tconst handlers = hooksStore[ hookName ].handlers;\n\t\t\tfor ( let i = handlers.length - 1; i >= 0; i-- ) {\n\t\t\t\tif ( handlers[ i ].namespace === namespace ) {\n\t\t\t\t\thandlers.splice( i, 1 );\n\t\t\t\t\thandlersRemoved++;\n\t\t\t\t\t// This callback may also be part of a hook that is\n\t\t\t\t\t// currently executing.  If the callback we're removing\n\t\t\t\t\t// comes after the current callback, there's no problem;\n\t\t\t\t\t// otherwise we need to decrease the execution index of any\n\t\t\t\t\t// other runs by 1 to account for the removed element.\n\t\t\t\t\thooksStore.__current.forEach( ( hookInfo ) => {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\thookInfo.name === hookName &&\n\t\t\t\t\t\t\thookInfo.currentIndex >= i\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\thookInfo.currentIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( hookName !== 'hookRemoved' ) {\n\t\t\thooks.doAction( 'hookRemoved', hookName, namespace );\n\t\t}\n\n\t\treturn handlersRemoved;\n\t};\n}\n\nexport default createRemoveHook;\n", "/**\n * Internal dependencies\n */\nimport type { Hooks, StoreKey } from './types';\n/**\n *\n * Returns whether any handlers are attached for the given hookName and optional namespace.\n */\nexport type HasHook = (\n\t/**\n\t * The name of the hook to check for.\n\t */\n\thookname: string,\n\t/**\n\t * The unique namespace identifying the callback in the form `vendor/plugin/function`.\n\t */\n\tnamespace?: string\n) => boolean;\n\n/**\n * Returns a function which, when invoked, will return whether any handlers are\n * attached to a particular hook.\n *\n * @param hooks    Hooks instance.\n * @param storeKey\n *\n * @return  Function that returns whether any handlers are\n *                   attached to a particular hook and optional namespace.\n */\nfunction createHasHook( hooks: Hooks, storeKey: StoreKey ): HasHook {\n\treturn function hasHook( hookName, namespace ) {\n\t\tconst hooksStore = hooks[ storeKey ];\n\n\t\t// Use the namespace if provided.\n\t\tif ( 'undefined' !== typeof namespace ) {\n\t\t\treturn (\n\t\t\t\thookName in hooksStore &&\n\t\t\t\thooksStore[ hookName ].handlers.some(\n\t\t\t\t\t( hook ) => hook.namespace === namespace\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\treturn hookName in hooksStore;\n\t};\n}\n\nexport default createHasHook;\n", "/**\n * Internal dependencies\n */\nimport type { Hooks, StoreKey } from './types';\n\nexport type RunHook = (\n\thookName: string,\n\t...args: unknown[]\n) => undefined | unknown;\n\n/**\n * Returns a function which, when invoked, will execute all callbacks\n * registered to a hook of the specified type, optionally returning the final\n * value of the call chain.\n *\n * @param hooks          Hooks instance.\n * @param storeKey\n * @param returnFirstArg Whether each hook callback is expected to return its first argument.\n * @param async          Whether the hook callback should be run asynchronously\n *\n * @return Function that runs hook callbacks.\n */\nfunction createRunHook(\n\thooks: Hooks,\n\tstoreKey: StoreKey,\n\treturnFirstArg: boolean,\n\tasync: boolean\n): RunHook {\n\treturn function runHook( hookName, ...args ) {\n\t\tconst hooksStore = hooks[ storeKey ];\n\n\t\tif ( ! hooksStore[ hookName ] ) {\n\t\t\thooksStore[ hookName ] = {\n\t\t\t\thandlers: [],\n\t\t\t\truns: 0,\n\t\t\t};\n\t\t}\n\n\t\thooksStore[ hookName ].runs++;\n\n\t\tconst handlers = hooksStore[ hookName ].handlers;\n\n\t\t// The following code is stripped from production builds.\n\t\tif ( 'production' !== process.env.NODE_ENV ) {\n\t\t\t// Handle any 'all' hooks registered.\n\t\t\tif ( 'hookAdded' !== hookName && hooksStore.all ) {\n\t\t\t\thandlers.push( ...hooksStore.all.handlers );\n\t\t\t}\n\t\t}\n\n\t\tif ( ! handlers || ! handlers.length ) {\n\t\t\treturn returnFirstArg ? args[ 0 ] : undefined;\n\t\t}\n\n\t\tconst hookInfo = {\n\t\t\tname: hookName,\n\t\t\tcurrentIndex: 0,\n\t\t};\n\n\t\tasync function asyncRunner() {\n\t\t\ttry {\n\t\t\t\thooksStore.__current.add( hookInfo );\n\t\t\t\tlet result = returnFirstArg ? args[ 0 ] : undefined;\n\t\t\t\twhile ( hookInfo.currentIndex < handlers.length ) {\n\t\t\t\t\tconst handler = handlers[ hookInfo.currentIndex ];\n\t\t\t\t\tresult = await handler.callback.apply( null, args );\n\t\t\t\t\tif ( returnFirstArg ) {\n\t\t\t\t\t\targs[ 0 ] = result;\n\t\t\t\t\t}\n\t\t\t\t\thookInfo.currentIndex++;\n\t\t\t\t}\n\t\t\t\treturn returnFirstArg ? result : undefined;\n\t\t\t} finally {\n\t\t\t\thooksStore.__current.delete( hookInfo );\n\t\t\t}\n\t\t}\n\n\t\tfunction syncRunner() {\n\t\t\ttry {\n\t\t\t\thooksStore.__current.add( hookInfo );\n\t\t\t\tlet result = returnFirstArg ? args[ 0 ] : undefined;\n\t\t\t\twhile ( hookInfo.currentIndex < handlers.length ) {\n\t\t\t\t\tconst handler = handlers[ hookInfo.currentIndex ];\n\t\t\t\t\tresult = handler.callback.apply( null, args );\n\t\t\t\t\tif ( returnFirstArg ) {\n\t\t\t\t\t\targs[ 0 ] = result;\n\t\t\t\t\t}\n\t\t\t\t\thookInfo.currentIndex++;\n\t\t\t\t}\n\t\t\t\treturn returnFirstArg ? result : undefined;\n\t\t\t} finally {\n\t\t\t\thooksStore.__current.delete( hookInfo );\n\t\t\t}\n\t\t}\n\n\t\treturn ( async ? asyncRunner : syncRunner )();\n\t};\n}\n\nexport default createRunHook;\n", "/**\n * Internal dependencies\n */\nimport type { Hooks, StoreKey } from './types';\n\n/**\n * Returns a function which, when invoked, will return the name of the\n * currently running hook, or `null` if no hook of the given type is currently\n * running.\n *\n * @param hooks    Hooks instance.\n * @param storeKey\n *\n * @return Function that returns the current hook name or null.\n */\nfunction createCurrentHook(\n\thooks: Hooks,\n\tstoreKey: StoreKey\n): () => string | null {\n\treturn function currentHook() {\n\t\tconst hooksStore = hooks[ storeKey ];\n\t\tconst currentArray = Array.from( hooksStore.__current );\n\t\treturn currentArray.at( -1 )?.name ?? null;\n\t};\n}\n\nexport default createCurrentHook;\n", "/**\n * Internal dependencies\n */\nimport type { Hooks, StoreKey } from './types';\n\n/**\n * Returns whether a hook is currently being executed.\n *\n */\nexport type DoingHook = (\n\t/**\n\t * The name of the hook to check for.\n\t * If omitted, will check for any hook being executed.\n\t */ hookName?: string\n) => boolean;\n\n/**\n * Returns a function which, when invoked, will return whether a hook is\n * currently being executed.\n *\n * @param hooks    Hooks instance.\n * @param storeKey\n *\n * @return Function that returns whether a hook is currently\n *                     being executed.\n */\nfunction createDoingHook( hooks: Hooks, storeKey: StoreKey ): DoingHook {\n\treturn function doingHook( hookName ) {\n\t\tconst hooksStore = hooks[ storeKey ];\n\n\t\t// If the hookName was not passed, check for any current hook.\n\t\tif ( 'undefined' === typeof hookName ) {\n\t\t\treturn hooksStore.__current.size > 0;\n\t\t}\n\n\t\t// Find if the `hookName` hook is in `__current`.\n\t\treturn Array.from( hooksStore.__current ).some(\n\t\t\t( hook ) => hook.name === hookName\n\t\t);\n\t};\n}\n\nexport default createDoingHook;\n", "/**\n * Internal dependencies\n */\nimport validateHookName from './validateHookName';\nimport type { Hooks, StoreKey } from './types';\n\n/**\n *\n * Returns the number of times an action has been fired.\n *\n */\nexport type DidHook = (\n\t/**\n\t * The hook name to check.\n\t */\n\thookName: string\n) => number | undefined;\n\n/**\n * Returns a function which, when invoked, will return the number of times a\n * hook has been called.\n *\n * @param hooks    Hooks instance.\n * @param storeKey\n *\n * @return  Function that returns a hook's call count.\n */\nfunction createDidHook( hooks: Hooks, storeKey: StoreKey ): DidHook {\n\treturn function didHook( hookName ) {\n\t\tconst hooksStore = hooks[ storeKey ];\n\n\t\tif ( ! validateHookName( hookName ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn hooksStore[ hookName ] && hooksStore[ hookName ].runs\n\t\t\t? hooksStore[ hookName ].runs\n\t\t\t: 0;\n\t};\n}\n\nexport default createDidHook;\n", "/**\n * Internal dependencies\n */\nimport createAddHook from './createAddHook';\nimport createRemoveHook from './createRemoveHook';\nimport createHasHook from './createHasHook';\nimport createRunHook from './createRunHook';\nimport createCurrentHook from './createCurrentHook';\nimport createDoingHook from './createDoingHook';\nimport createDidHook from './createDidHook';\nimport type { Store } from './types';\n\n/**\n * Internal class for constructing hooks. Use `createHooks()` function\n *\n * Note, it is necessary to expose this class to make its type public.\n *\n * @private\n */\nexport class _Hooks {\n\tpublic actions: Store;\n\tpublic filters: Store;\n\n\tpublic addAction: ReturnType< typeof createAddHook >;\n\tpublic addFilter: ReturnType< typeof createAddHook >;\n\tpublic removeAction: ReturnType< typeof createRemoveHook >;\n\tpublic removeFilter: ReturnType< typeof createRemoveHook >;\n\tpublic hasAction: ReturnType< typeof createHasHook >;\n\tpublic hasFilter: ReturnType< typeof createHasHook >;\n\tpublic removeAllActions: ReturnType< typeof createRemoveHook >;\n\tpublic removeAllFilters: ReturnType< typeof createRemoveHook >;\n\tpublic doAction: ReturnType< typeof createRunHook >;\n\tpublic doActionAsync: ReturnType< typeof createRunHook >;\n\tpublic applyFilters: ReturnType< typeof createRunHook >;\n\tpublic applyFiltersAsync: ReturnType< typeof createRunHook >;\n\tpublic currentAction: ReturnType< typeof createCurrentHook >;\n\tpublic currentFilter: ReturnType< typeof createCurrentHook >;\n\tpublic doingAction: ReturnType< typeof createDoingHook >;\n\tpublic doingFilter: ReturnType< typeof createDoingHook >;\n\tpublic didAction: ReturnType< typeof createDidHook >;\n\tpublic didFilter: ReturnType< typeof createDidHook >;\n\n\tconstructor() {\n\t\tthis.actions = Object.create( null );\n\t\tthis.actions.__current = new Set();\n\n\t\tthis.filters = Object.create( null );\n\t\tthis.filters.__current = new Set();\n\n\t\tthis.addAction = createAddHook( this, 'actions' );\n\t\tthis.addFilter = createAddHook( this, 'filters' );\n\t\tthis.removeAction = createRemoveHook( this, 'actions' );\n\t\tthis.removeFilter = createRemoveHook( this, 'filters' );\n\t\tthis.hasAction = createHasHook( this, 'actions' );\n\t\tthis.hasFilter = createHasHook( this, 'filters' );\n\t\tthis.removeAllActions = createRemoveHook( this, 'actions', true );\n\t\tthis.removeAllFilters = createRemoveHook( this, 'filters', true );\n\t\tthis.doAction = createRunHook( this, 'actions', false, false );\n\t\tthis.doActionAsync = createRunHook( this, 'actions', false, true );\n\t\tthis.applyFilters = createRunHook( this, 'filters', true, false );\n\t\tthis.applyFiltersAsync = createRunHook( this, 'filters', true, true );\n\t\tthis.currentAction = createCurrentHook( this, 'actions' );\n\t\tthis.currentFilter = createCurrentHook( this, 'filters' );\n\t\tthis.doingAction = createDoingHook( this, 'actions' );\n\t\tthis.doingFilter = createDoingHook( this, 'filters' );\n\t\tthis.didAction = createDidHook( this, 'actions' );\n\t\tthis.didFilter = createDidHook( this, 'filters' );\n\t}\n}\n\nexport type Hooks = _Hooks;\n\n/**\n * Returns an instance of the hooks object.\n *\n * @return A Hooks instance.\n */\nfunction createHooks(): Hooks {\n\treturn new _Hooks();\n}\n\nexport default createHooks;\n", "/**\n * Internal dependencies\n */\nimport createHooks from './createHooks';\n\nexport * from './types';\n\nexport const defaultHooks = createHooks();\n\nconst {\n\taddAction,\n\taddFilter,\n\tremoveAction,\n\tremoveFilter,\n\thasAction,\n\thasFilter,\n\tremoveAllActions,\n\tremoveAllFilters,\n\tdoAction,\n\tdoActionAsync,\n\tapplyFilters,\n\tapplyFiltersAsync,\n\tcurrentAction,\n\tcurrentFilter,\n\tdoingAction,\n\tdoingFilter,\n\tdidAction,\n\tdidFilter,\n\tactions,\n\tfilters,\n} = defaultHooks;\n\nexport {\n\tcreateHooks,\n\taddAction,\n\taddFilter,\n\tremoveAction,\n\tremoveFilter,\n\thasAction,\n\thasFilter,\n\tremoveAllActions,\n\tremoveAllFilters,\n\tdoAction,\n\tdoActionAsync,\n\tapplyFilters,\n\tapplyFiltersAsync,\n\tcurrentAction,\n\tcurrentFilter,\n\tdoingAction,\n\tdoingFilter,\n\tdidAction,\n\tdidFilter,\n\tactions,\n\tfilters,\n};\n", "/**\n * Internal dependencies\n */\nimport { createI18n } from './create-i18n';\n\n/**\n * WordPress dependencies\n */\nimport { defaultHooks } from '@wordpress/hooks';\nimport {\n\tLocaleData,\n\tSubscribeCallback,\n\tTranslatableText,\n\tUnsubscribeCallback,\n} from './types';\n\nconst i18n = createI18n( undefined, undefined, defaultHooks );\n\n/**\n * Default, singleton instance of `I18n`.\n */\nexport default i18n;\n\n/*\n * Comments in this file are duplicated from ./i18n due to\n * https://github.com/WordPress/gutenberg/pull/20318#issuecomment-590837722\n */\n\n/**\n * Returns locale data by domain in a Jed-formatted JSON object shape.\n *\n * @see http://messageformat.github.io/Jed/\n *\n * @param { string | undefined } [domain] Domain for which to get the data.\n * @return { LocaleData } Locale data.\n */\nexport const getLocaleData = i18n.getLocaleData.bind( i18n );\n\n/**\n * Merges locale data into the Tannin instance by domain. Accepts data in a\n * Jed-formatted JSON object shape.\n *\n * @see http://messageformat.github.io/Jed/\n *\n * @param {LocaleData }        [data]   Locale data configuration.\n * @param {string | undefined} [domain] Domain for which configuration applies.\n */\nexport const setLocaleData = i18n.setLocaleData.bind( i18n );\n\n/**\n * Resets all current Tannin instance locale data and sets the specified\n * locale data for the domain. Accepts data in a Jed-formatted JSON object shape.\n *\n * @see http://messageformat.github.io/Jed/\n *\n * @param {LocaleData}         [data]   Locale data configuration.\n * @param {string | undefined} [domain] Domain for which configuration applies.\n */\nexport const resetLocaleData = i18n.resetLocaleData.bind( i18n );\n\n/**\n * Subscribes to changes of locale data\n *\n * @param {SubscribeCallback} callback Subscription callback\n * @return {UnsubscribeCallback} Unsubscribe callback\n */\nexport const subscribe = i18n.subscribe.bind( i18n );\n\n/**\n * Retrieve the translation of text.\n *\n * @see https://developer.wordpress.org/reference/functions/__/\n *\n * @template {string} Text\n *\n * @param {Text}               text   Text to translate.\n * @param {string | undefined} domain Domain to retrieve the translated text.\n *\n * @return {TranslatableText<Text>} Translated text.\n */\nexport const __ = i18n.__.bind( i18n );\n\n/**\n * Retrieve translated string with gettext context.\n *\n * @see https://developer.wordpress.org/reference/functions/_x/\n *\n * @template {string} Text\n *\n * @param {Text}               text    Text to translate.\n * @param {string}             context Context information for the translators.\n * @param {string | undefined} domain  Domain to retrieve the translated text.\n *\n * @return {TranslatableText<Text>} Translated context string without pipe.\n */\nexport const _x = i18n._x.bind( i18n );\n\n/**\n * Translates and retrieves the singular or plural form based on the supplied\n * number.\n *\n * @see https://developer.wordpress.org/reference/functions/_n/\n *\n * @template {string} Single\n * @template {string} Plural\n *\n * @param {Single}             single The text to be used if the number is singular.\n * @param {Plural}             plural The text to be used if the number is plural.\n * @param {number}             number The number to compare against to use either the\n *                                    singular or plural form.\n * @param {string | undefined} domain Domain to retrieve the translated text.\n *\n * @return {TranslatableText<Single | Plural>} The translated singular or plural form.\n */\nexport const _n = i18n._n.bind( i18n );\n\n/**\n * Translates and retrieves the singular or plural form based on the supplied\n * number, with gettext context.\n *\n * @see https://developer.wordpress.org/reference/functions/_nx/\n *\n * @template {string} Single\n * @template {string} Plural\n * @param {Single}             single   The text to be used if the number is singular.\n *\n * @param {Single}             single   The text to be used if the number is singular.\n * @param {Plural}             plural   The text to be used if the number is plural.\n * @param {number}             number   The number to compare against to use either the\n *                                      singular or plural form.\n * @param {string}             context  Context information for the translators.\n * @param {string | undefined} [domain] Domain to retrieve the translated text.\n *\n * @return {TranslatableText<Single | Plural>} The translated singular or plural form.\n */\nexport const _nx = i18n._nx.bind( i18n );\n\n/**\n * Check if current locale is RTL.\n *\n * **RTL (Right To Left)** is a locale property indicating that text is written from right to left.\n * For example, the `he` locale (for Hebrew) specifies right-to-left. Arabic (ar) is another common\n * language written RTL. The opposite of RTL, LTR (Left To Right) is used in other languages,\n * including English (`en`, `en-US`, `en-GB`, etc.), Spanish (`es`), and French (`fr`).\n *\n * @return {boolean} Whether locale is RTL.\n */\nexport const isRTL = i18n.isRTL.bind( i18n );\n\n/**\n * Check if there is a translation for a given string (in singular form).\n *\n * @param {string} single  Singular form of the string to look up.\n * @param {string} context Context information for the translators.\n * @param {string} domain  Domain to retrieve the translated text.\n *\n * @return {boolean} Whether the translation exists or not.\n */\nexport const hasTranslation = i18n.hasTranslation.bind( i18n );\n"],
  "mappings": "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",
  "names": ["sprintf", "format", "args", "_sprintf", "PATTERN", "postfix", "evaluate", "DEFAULT_LOCALE_DATA", "plural_forms", "n", "I18N_HOOK_REGEXP", "createI18n", "initialData", "initialDomain", "hooks", "tannin", "Tannin", "listeners", "Set", "notifyListeners", "forEach", "listener", "subscribe", "callback", "add", "delete", "getLocaleData", "domain", "data", "doSetLocaleData", "pluralForms", "setLocaleData", "addLocaleData", "resetLocaleData", "dcnpgettext", "context", "single", "plural", "number", "undefined", "getFilterDomain", "__", "text", "translation", "applyFilters", "_x", "_n", "_nx", "isRTL", "hasTranslation", "key", "result", "onHookAddedOrRemoved", "hookName", "test", "addAction", "validateNamespace", "namespace", "console", "error", "test", "validateHookName", "hookName", "console", "error", "test", "createAddHook", "hooks", "storeKey", "addHook", "hookName", "namespace", "callback", "priority", "hooksStore", "validateHookName", "validateNamespace", "console", "error", "handler", "handlers", "i", "length", "splice", "__current", "forEach", "hookInfo", "name", "currentIndex", "runs", "doAction", "createRemoveHook", "hooks", "storeKey", "removeAll", "removeHook", "hookName", "namespace", "hooksStore", "validateHookName", "validateNamespace", "handlersRemoved", "handlers", "length", "runs", "i", "splice", "__current", "forEach", "hookInfo", "name", "currentIndex", "doAction", "createHasHook", "hooks", "storeKey", "hasHook", "hookName", "namespace", "hooksStore", "handlers", "some", "hook", "createRunHook", "hooks", "storeKey", "returnFirstArg", "async", "runHook", "hookName", "args", "hooksStore", "handlers", "runs", "all", "push", "length", "undefined", "hookInfo", "name", "currentIndex", "asyncRunner", "__current", "add", "result", "handler", "callback", "apply", "delete", "syncRunner", "createCurrentHook", "hooks", "storeKey", "currentHook", "_currentArray$at$name", "hooksStore", "currentArray", "Array", "from", "__current", "at", "name", "createDoingHook", "hooks", "storeKey", "doingHook", "hookName", "hooksStore", "__current", "size", "Array", "from", "some", "hook", "name", "createDidHook", "hooks", "storeKey", "didHook", "hookName", "hooksStore", "validateHookName", "runs", "_Hooks", "constructor", "actions", "Object", "create", "__current", "Set", "filters", "addAction", "createAddHook", "addFilter", "removeAction", "createRemoveHook", "removeFilter", "hasAction", "createHasHook", "hasFilter", "removeAllActions", "removeAllFilters", "doAction", "createRunHook", "doActionAsync", "applyFilters", "applyFiltersAsync", "currentAction", "createCurrentHook", "currentFilter", "doingAction", "createDoingHook", "doingFilter", "didAction", "createDidHook", "didFilter", "createHooks", "defaultHooks", "createHooks", "addAction", "addFilter", "removeAction", "removeFilter", "hasAction", "hasFilter", "removeAllActions", "removeAllFilters", "doAction", "doActionAsync", "applyFilters", "applyFiltersAsync", "currentAction", "currentFilter", "doingAction", "doingFilter", "didAction", "didFilter", "actions", "filters", "i18n", "createI18n", "undefined", "defaultHooks", "getLocaleData", "bind", "setLocaleData", "resetLocaleData", "subscribe", "__", "_x", "_n", "_nx", "isRTL", "hasTranslation"]
}

{
  "version": 3,
  "sources": ["../../../../packages/auth-client/dist/client.js", "../../../../packages/auth-client/dist/cookie-client.js", "../../../../packages/auth-client/dist/sso-client.js"],
  "sourcesContent": ["import axios from 'axios';\nexport class AuthClient {\n    constructor(baseURL) {\n        this.isRefreshing = false;\n        this.refreshSubscribers = [];\n        this.baseURL = baseURL;\n        this.api = axios.create({\n            baseURL: this.baseURL,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        });\n        // Add auth token to requests\n        this.api.interceptors.request.use((config) => {\n            // Check multiple possible token locations\n            // Priority: accessToken > token > authToken > admin-auth-storage\n            let token = localStorage.getItem('accessToken') ||\n                localStorage.getItem('token') ||\n                localStorage.getItem('authToken');\n            // Also check admin-auth-storage for token\n            if (!token) {\n                const authStorage = localStorage.getItem('admin-auth-storage');\n                if (authStorage) {\n                    try {\n                        const parsed = JSON.parse(authStorage);\n                        if (parsed.state?.accessToken || parsed.state?.token) {\n                            token = parsed.state.accessToken || parsed.state.token;\n                        }\n                    }\n                    catch {\n                        // Ignore parse errors\n                    }\n                }\n            }\n            if (token) {\n                config.headers.Authorization = `Bearer ${token}`;\n            }\n            return config;\n        });\n        // Add response interceptor for auto-refresh\n        this.api.interceptors.response.use((response) => response, async (error) => {\n            const originalRequest = error.config;\n            // Check if error is 401 and not already retried\n            if (error.response?.status === 401 && !originalRequest._retry) {\n                if (this.isRefreshing) {\n                    // Wait for token refresh\n                    return new Promise((resolve) => {\n                        this.refreshSubscribers.push((token) => {\n                            originalRequest.headers.Authorization = `Bearer ${token}`;\n                            resolve(this.api.request(originalRequest));\n                        });\n                    });\n                }\n                originalRequest._retry = true;\n                this.isRefreshing = true;\n                try {\n                    const refreshToken = localStorage.getItem('refreshToken');\n                    if (refreshToken) {\n                        // Call refresh endpoint - remove /v1 from baseURL for auth endpoints\n                        const refreshUrl = this.baseURL.includes('api.neture.co.kr')\n                            ? 'https://api.neture.co.kr/api/auth/refresh'\n                            : `${this.baseURL.replace('/v1', '')}/auth/refresh`;\n                        const response = await axios.post(refreshUrl, { refreshToken });\n                        const { accessToken, refreshToken: newRefreshToken } = response.data;\n                        // Update tokens\n                        localStorage.setItem('accessToken', accessToken);\n                        if (newRefreshToken) {\n                            localStorage.setItem('refreshToken', newRefreshToken);\n                        }\n                        // Update auth storage if exists\n                        const authStorage = localStorage.getItem('admin-auth-storage');\n                        if (authStorage) {\n                            try {\n                                const parsed = JSON.parse(authStorage);\n                                if (parsed.state) {\n                                    parsed.state.token = accessToken;\n                                    parsed.state.accessToken = accessToken;\n                                    if (newRefreshToken) {\n                                        parsed.state.refreshToken = newRefreshToken;\n                                    }\n                                    localStorage.setItem('admin-auth-storage', JSON.stringify(parsed));\n                                }\n                            }\n                            catch {\n                                // Ignore parse errors\n                            }\n                        }\n                        // Notify subscribers\n                        this.refreshSubscribers.forEach(callback => callback(accessToken));\n                        this.refreshSubscribers = [];\n                        // Retry original request\n                        originalRequest.headers.Authorization = `Bearer ${accessToken}`;\n                        return this.api.request(originalRequest);\n                    }\n                }\n                catch (refreshError) {\n                    // Refresh failed, clear tokens and redirect to login\n                    this.clearAllTokens();\n                    // Show user-friendly message before redirect\n                    if (typeof window !== 'undefined') {\n                        const errorData = refreshError?.response?.data;\n                        if (errorData?.code === 'TOKEN_EXPIRED') {\n                            console.warn('Session expired, redirecting to login');\n                        }\n                        else {\n                            console.warn('Authentication failed, redirecting to login');\n                        }\n                        // Redirect to login page\n                        window.location.href = '/login';\n                    }\n                    return Promise.reject(refreshError);\n                }\n                finally {\n                    this.isRefreshing = false;\n                }\n            }\n            return Promise.reject(error);\n        });\n    }\n    async login(credentials) {\n        // For production API server, use the correct auth endpoint\n        let authUrl;\n        if (this.baseURL.includes('api.neture.co.kr')) {\n            // Production API server - use /api/auth/login\n            authUrl = 'https://api.neture.co.kr/api/auth/login';\n        }\n        else {\n            // Development - remove /v1 from baseURL for auth endpoints\n            authUrl = `${this.baseURL.replace('/v1', '')}/auth/login`;\n        }\n        const response = await axios.post(authUrl, credentials);\n        return response.data;\n    }\n    // Clear all authentication tokens from all storage locations\n    clearAllTokens() {\n        localStorage.removeItem('accessToken');\n        localStorage.removeItem('refreshToken');\n        localStorage.removeItem('authToken');\n        localStorage.removeItem('token');\n        localStorage.removeItem('admin-auth-storage');\n        // Also clear any cookies if present\n        if (typeof document !== 'undefined') {\n            document.cookie = 'accessToken=; Max-Age=0; path=/';\n            document.cookie = 'refreshToken=; Max-Age=0; path=/';\n        }\n    }\n    async logout() {\n        try {\n            // For production API server, use the correct auth endpoint\n            let authUrl;\n            if (this.baseURL.includes('api.neture.co.kr')) {\n                // Production API server - use /api/auth/logout\n                authUrl = 'https://api.neture.co.kr/api/auth/logout';\n            }\n            else {\n                // Development - remove /v1 from baseURL for auth endpoints\n                authUrl = `${this.baseURL.replace('/v1', '')}/auth/logout`;\n            }\n            // Get token for authorization\n            const token = localStorage.getItem('accessToken') || localStorage.getItem('token');\n            if (token) {\n                await axios.post(authUrl, {}, {\n                    headers: {\n                        'Authorization': `Bearer ${token}`\n                    }\n                });\n            }\n        }\n        catch (error) {\n            // Even if logout fails (e.g., token expired), continue with local cleanup\n            // This is normal if token expired\n        }\n    }\n    async checkSession() {\n        try {\n            const response = await this.api.get('/accounts/sso/check');\n            return response.data;\n        }\n        catch (error) {\n            return { isAuthenticated: false };\n        }\n    }\n}\n// Singleton instance\n// Use environment-specific API URL\nconst getApiUrl = () => {\n    // Check if we're in a browser environment\n    if (typeof window !== 'undefined') {\n        // Try to get from environment variables first\n        const envApiUrl = window.__ENV__?.VITE_API_URL ||\n            (typeof import.meta !== 'undefined' && import.meta.env?.VITE_API_URL);\n        if (envApiUrl) {\n            // Add /api/v1 as the base path for API calls\n            return envApiUrl.endsWith('/api/v1') ? envApiUrl :\n                envApiUrl.endsWith('/api') ? `${envApiUrl}/v1` :\n                    `${envApiUrl}/api/v1`;\n        }\n        // Auto-detect based on current location for development\n        if (window.location.hostname === 'localhost' ||\n            window.location.hostname === '127.0.0.1' ||\n            window.location.hostname.includes('.local')) {\n            return 'http://localhost:3002/api/v1';\n        }\n    }\n    // Default to production API server with /api/v1 path\n    return 'https://api.neture.co.kr/api/v1';\n};\nexport const authClient = new AuthClient(getApiUrl());\n", "import axios from 'axios';\nexport class CookieAuthClient {\n    constructor(baseURL) {\n        this.refreshPromise = null;\n        this.currentToken = null;\n        this.baseURL = baseURL;\n        this.api = axios.create({\n            baseURL: this.baseURL,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            withCredentials: true, // Important for cookies\n        });\n        // Response interceptor to handle token refresh\n        this.api.interceptors.response.use((response) => response, async (error) => {\n            const originalRequest = error.config;\n            if (error.response?.status === 401 && !originalRequest._retry) {\n                originalRequest._retry = true;\n                // If already refreshing, wait for it\n                if (this.refreshPromise) {\n                    const success = await this.refreshPromise;\n                    if (success) {\n                        return this.api.request(originalRequest);\n                    }\n                    throw error;\n                }\n                // Start refresh\n                this.refreshPromise = this.refreshToken();\n                const success = await this.refreshPromise;\n                this.refreshPromise = null;\n                if (success) {\n                    return this.api.request(originalRequest);\n                }\n            }\n            return Promise.reject(error);\n        });\n    }\n    async login(credentials) {\n        const response = await this.api.post('/auth/v2/login', credentials);\n        // Store token if returned (for WebSocket auth)\n        if (response.data.token) {\n            this.currentToken = response.data.token;\n        }\n        return response.data;\n    }\n    async register(data) {\n        const response = await this.api.post('/auth/v2/register', data);\n        return response.data;\n    }\n    async logout() {\n        try {\n            await this.api.post('/auth/v2/logout');\n        }\n        catch (error) {\n            // Even if logout fails, we should clear local state\n            console.error('Logout error:', error);\n        }\n        finally {\n            this.currentToken = null;\n        }\n    }\n    async logoutAll() {\n        await this.api.post('/auth/v2/logout-all');\n        this.currentToken = null;\n    }\n    async refreshToken() {\n        try {\n            const response = await this.api.post('/auth/v2/refresh');\n            return response.data.success;\n        }\n        catch (error) {\n            return false;\n        }\n    }\n    async getCurrentUser() {\n        try {\n            const response = await this.api.get('/auth/v2/me');\n            return response.data.user;\n        }\n        catch (error) {\n            return null;\n        }\n    }\n    getApiUrl() {\n        return this.baseURL;\n    }\n    getAccessToken() {\n        return this.currentToken;\n    }\n    // Cross-tab communication for session sync\n    setupSessionSync() {\n        if (typeof window === 'undefined')\n            return;\n        // Listen for storage events from other tabs\n        window.addEventListener('storage', (event) => {\n            if (event.key === 'auth-logout') {\n                // Another tab logged out, we should too\n                window.location.reload();\n            }\n            else if (event.key === 'auth-login') {\n                // Another tab logged in, refresh our session\n                this.refreshToken();\n            }\n        });\n    }\n    // Notify other tabs about auth changes\n    broadcastAuthChange(type) {\n        if (typeof window === 'undefined')\n            return;\n        // Use localStorage to trigger storage event in other tabs\n        const key = `auth-${type}`;\n        localStorage.setItem(key, Date.now().toString());\n        // Clean up after a moment\n        setTimeout(() => localStorage.removeItem(key), 100);\n    }\n    // Enhanced login with session sync\n    async loginWithSync(credentials) {\n        const response = await this.login(credentials);\n        this.broadcastAuthChange('login');\n        return response;\n    }\n    // Enhanced logout with session sync\n    async logoutWithSync() {\n        await this.logout();\n        this.broadcastAuthChange('logout');\n    }\n}\n// Export singleton instance\nexport const cookieAuthClient = new CookieAuthClient(typeof window !== 'undefined' && window.location.hostname === 'localhost'\n    ? 'http://localhost:4000/api/v1'\n    : '/api/v1');\n// Auto-setup session sync\nif (typeof window !== 'undefined') {\n    cookieAuthClient.setupSessionSync();\n}\n", "export class SSOClient {\n    constructor(config) {\n        this.checkInterval = null;\n        /**\n         * Handle storage events from other tabs\n         */\n        this.handleStorageEvent = (event) => {\n            if (event.key === 'sso:logout') {\n                // Another tab logged out\n                this.handleLogout();\n            }\n            else if (event.key === 'sso:login') {\n                // Another tab logged in\n                this.checkSession();\n            }\n        };\n        this.config = {\n            checkInterval: 30000, // Check every 30 seconds\n            ...config\n        };\n    }\n    /**\n     * Initialize SSO monitoring\n     */\n    initialize(onSessionChange) {\n        this.onSessionChange = onSessionChange;\n        // Listen for storage events from other tabs\n        if (typeof window !== 'undefined') {\n            window.addEventListener('storage', this.handleStorageEvent);\n        }\n        // Start periodic session checks\n        this.startSessionMonitoring();\n        // Check session immediately\n        this.checkSession();\n    }\n    /**\n     * Clean up resources\n     */\n    destroy() {\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('storage', this.handleStorageEvent);\n        }\n        if (this.checkInterval) {\n            clearInterval(this.checkInterval);\n            this.checkInterval = null;\n        }\n    }\n    /**\n     * Start monitoring session status\n     */\n    startSessionMonitoring() {\n        if (this.checkInterval) {\n            clearInterval(this.checkInterval);\n        }\n        this.checkInterval = setInterval(() => {\n            this.checkSession();\n        }, this.config.checkInterval);\n    }\n    /**\n     * Check current session status\n     */\n    async checkSession() {\n        try {\n            const response = await fetch(`${this.config.apiUrl}/auth/v2/me`, {\n                credentials: 'include',\n                headers: {\n                    'Content-Type': 'application/json',\n                }\n            });\n            if (response.ok) {\n                const data = await response.json();\n                const user = data.user;\n                this.onSessionChange?.(user);\n                return user;\n            }\n            else {\n                this.onSessionChange?.(null);\n                return null;\n            }\n        }\n        catch (error) {\n            console.error('Session check error:', error);\n            this.onSessionChange?.(null);\n            return null;\n        }\n    }\n    /**\n     * Broadcast login event to other tabs\n     */\n    broadcastLogin() {\n        if (typeof window !== 'undefined') {\n            localStorage.setItem('sso:login', Date.now().toString());\n            localStorage.removeItem('sso:login');\n        }\n    }\n    /**\n     * Broadcast logout event to other tabs\n     */\n    broadcastLogout() {\n        if (typeof window !== 'undefined') {\n            localStorage.setItem('sso:logout', Date.now().toString());\n            localStorage.removeItem('sso:logout');\n        }\n    }\n    /**\n     * Handle logout from another tab/app\n     */\n    handleLogout() {\n        // Clear any local auth state\n        this.onSessionChange?.(null);\n        // Optionally reload the page\n        if (this.config.domain) {\n            window.location.href = '/login';\n        }\n    }\n    /**\n     * Get session cookie value\n     */\n    getSessionId() {\n        if (typeof document === 'undefined')\n            return null;\n        const match = document.cookie.match(/sessionId=([^;]+)/);\n        return match ? match[1] : null;\n    }\n    /**\n     * Check if user has an active session\n     */\n    hasSession() {\n        return !!this.getSessionId();\n    }\n}\n// Export singleton instance with default config\nexport const ssoClient = new SSOClient({\n    apiUrl: typeof window !== 'undefined' && window.location.hostname === 'localhost'\n        ? 'http://localhost:4000/api/v1'\n        : '/api/v1'\n});\n"],
  "mappings": "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",
  "names": ["success"]
}

{
  "version": 3,
  "sources": ["../../../../node_modules/@wordpress/i18n/build-module/@wordpress/i18n/src/sprintf.ts", "../../../../node_modules/@wordpress/i18n/build-module/@wordpress/i18n/src/create-i18n.ts", "../../../../node_modules/@wordpress/i18n/build-module/@wordpress/i18n/src/default-i18n.ts"],
  "sourcesContent": ["/**\n * External dependencies\n */\n// Disable reason: `eslint-plugin-import` doesn't support `exports` (https://github.com/import-js/eslint-plugin-import/issues/1810)\n// eslint-disable-next-line import/no-unresolved\nimport _sprintf from '@tannin/sprintf';\n\n/**\n * Internal dependencies\n */\nimport type { DistributeSprintfArgs, TranslatableText } from './types';\n\nexport function sprintf< T extends string >(\n\tformat: T | TranslatableText< T >,\n\t...args: DistributeSprintfArgs< T >\n): string;\nexport function sprintf< T extends string >(\n\tformat: T | TranslatableText< T >,\n\targs: DistributeSprintfArgs< T >\n): string;\n\n/**\n * Returns a formatted string.\n *\n * @param format The format of the string to generate.\n * @param args   Arguments to apply to the format.\n *\n * @see https://www.npmjs.com/package/@tannin/sprintf\n *\n * @return The formatted string.\n */\nexport function sprintf< T extends string >(\n\tformat: T | TranslatableText< T >,\n\t...args: DistributeSprintfArgs< T >\n): string {\n\treturn _sprintf( format as T, ...( args as DistributeSprintfArgs< T > ) );\n}\n", "/**\n * External dependencies\n */\nimport type { TanninLocaleDomain } from 'tannin';\nimport Tannin from 'tannin';\n/**\n * Internal dependencies\n */\nimport type {\n\tgetFilterDomain,\n\tI18n,\n\tLocaleData,\n\tSubscribeCallback,\n\tTranslatableText,\n\tUnsubscribeCallback,\n} from './types';\n/**\n * WordPress dependencies\n */\nimport type { Hooks } from '@wordpress/hooks';\n/**\n * Default locale data to use for Tannin domain when not otherwise provided.\n * Assumes an English plural forms expression.\n */\nconst DEFAULT_LOCALE_DATA: LocaleData = {\n\t'': {\n\t\tplural_forms( n: number ) {\n\t\t\treturn n === 1 ? 0 : 1;\n\t\t},\n\t},\n};\n\n/*\n * Regular expression that matches i18n hooks like `i18n.gettext`, `i18n.ngettext`,\n * `i18n.gettext_domain` or `i18n.ngettext_with_context` or `i18n.has_translation`.\n */\nconst I18N_HOOK_REGEXP = /^i18n\\.(n?gettext|has_translation)(_|$)/;\n\n/**\n * Create an i18n instance\n *\n * @param [initialData]   Locale data configuration.\n * @param [initialDomain] Domain for which configuration applies.\n * @param [hooks]         Hooks implementation.\n *\n * @return I18n instance.\n */\nexport const createI18n = < TextDomain extends string >(\n\tinitialData?: LocaleData< TextDomain >,\n\tinitialDomain?: TextDomain,\n\thooks?: Hooks\n): I18n< TextDomain > => {\n\t/**\n\t * The underlying instance of Tannin to which exported functions interface.\n\t */\n\tconst tannin = new Tannin( {} );\n\n\tconst listeners = new Set< () => void >();\n\n\tconst notifyListeners = () => {\n\t\tlisteners.forEach( ( listener ) => listener() );\n\t};\n\n\t/**\n\t * Subscribe to changes of locale data.\n\t *\n\t * @param callback Subscription callback.\n\t * @return Unsubscribe callback.\n\t */\n\tconst subscribe = ( callback: SubscribeCallback ): UnsubscribeCallback => {\n\t\tlisteners.add( callback );\n\t\treturn () => listeners.delete( callback );\n\t};\n\n\tconst getLocaleData: I18n< TextDomain >[ 'getLocaleData' ] = (\n\t\tdomain = 'default' as TextDomain\n\t) => tannin.data[ domain ] as LocaleData< TextDomain >;\n\n\t/**\n\t * @param [data]\n\t * @param [domain]\n\t */\n\tconst doSetLocaleData = (\n\t\tdata?: LocaleData,\n\t\tdomain: TextDomain = 'default' as TextDomain\n\t) => {\n\t\ttannin.data[ domain ] = {\n\t\t\t...tannin.data[ domain ],\n\t\t\t...data,\n\t\t} as TanninLocaleDomain;\n\n\t\t// Populate default domain configuration (supported locale date which omits\n\t\t// a plural forms expression).\n\t\ttannin.data[ domain ][ '' ] = {\n\t\t\t...DEFAULT_LOCALE_DATA[ '' ],\n\t\t\t...tannin.data[ domain ]?.[ '' ],\n\t\t};\n\n\t\t// Clean up cached plural forms functions cache as it might be updated.\n\t\tdelete tannin.pluralForms[ domain ];\n\t};\n\n\tconst setLocaleData: I18n< TextDomain >[ 'setLocaleData' ] = (\n\t\tdata,\n\t\tdomain\n\t) => {\n\t\tdoSetLocaleData( data, domain );\n\t\tnotifyListeners();\n\t};\n\n\tconst addLocaleData: I18n< TextDomain >[ 'addLocaleData' ] = (\n\t\tdata,\n\t\tdomain = 'default' as TextDomain\n\t) => {\n\t\ttannin.data[ domain ] = {\n\t\t\t...tannin.data[ domain ],\n\t\t\t...data,\n\t\t\t// Populate default domain configuration (supported locale date which omits\n\t\t\t// a plural forms expression).\n\t\t\t'': {\n\t\t\t\t...DEFAULT_LOCALE_DATA[ '' ],\n\t\t\t\t...tannin.data[ domain ]?.[ '' ],\n\t\t\t\t...data?.[ '' ],\n\t\t\t},\n\t\t} as TanninLocaleDomain;\n\n\t\t// Clean up cached plural forms functions cache as it might be updated.\n\t\tdelete tannin.pluralForms[ domain ];\n\n\t\tnotifyListeners();\n\t};\n\n\tconst resetLocaleData: I18n< TextDomain >[ 'resetLocaleData' ] = (\n\t\tdata,\n\t\tdomain\n\t) => {\n\t\t// Reset all current Tannin locale data.\n\t\ttannin.data = {};\n\n\t\t// Reset cached plural forms functions cache.\n\t\ttannin.pluralForms = {};\n\n\t\tsetLocaleData( data, domain );\n\t};\n\n\t/**\n\t * Wrapper for Tannin's `dcnpgettext`. Populates default locale data if not\n\t * otherwise previously assigned.\n\t *\n\t * @param domain   Domain to retrieve the translated text.\n\t * @param context  Context information for the translators.\n\t * @param single   Text to translate if non-plural. Used as\n\t *                 fallback return value on a caught error.\n\t * @param [plural] The text to be used if the number is\n\t *                 plural.\n\t * @param [number] The number to compare against to use\n\t *                 either the singular or plural form.\n\t *\n\t * @return The translated string.\n\t */\n\tconst dcnpgettext = (\n\t\tdomain = 'default' as TextDomain,\n\t\tcontext: string | void,\n\t\tsingle: string,\n\t\tplural?: string,\n\t\tnumber?: number\n\t): string => {\n\t\tif ( ! tannin.data[ domain ] ) {\n\t\t\t// Use `doSetLocaleData` to set silently, without notifying listeners.\n\t\t\tdoSetLocaleData( undefined, domain );\n\t\t}\n\n\t\treturn tannin.dcnpgettext( domain, context, single, plural, number );\n\t};\n\n\tconst getFilterDomain: getFilterDomain = ( domain ) => domain || 'default';\n\n\tconst __: I18n< TextDomain >[ '__' ] = ( text, domain ) => {\n\t\tlet translation = dcnpgettext( domain, undefined, text );\n\t\tif ( ! hooks ) {\n\t\t\treturn translation as TranslatableText< typeof text >;\n\t\t}\n\n\t\t/**\n\t\t * Filters text with its translation.\n\t\t *\n\t\t * @param translation Translated text.\n\t\t * @param text        Text to translate.\n\t\t * @param domain      Text domain. Unique identifier for retrieving translated strings.\n\t\t */\n\t\ttranslation = hooks.applyFilters(\n\t\t\t'i18n.gettext',\n\t\t\ttranslation,\n\t\t\ttext,\n\t\t\tdomain\n\t\t) as TranslatableText< typeof text >;\n\n\t\treturn hooks.applyFilters(\n\t\t\t'i18n.gettext_' + getFilterDomain( domain ),\n\t\t\ttranslation,\n\t\t\ttext,\n\t\t\tdomain\n\t\t) as TranslatableText< typeof text >;\n\t};\n\n\tconst _x: I18n< TextDomain >[ '_x' ] = ( text, context, domain ) => {\n\t\tlet translation = dcnpgettext( domain, context, text );\n\t\tif ( ! hooks ) {\n\t\t\treturn translation as TranslatableText< typeof text >;\n\t\t}\n\n\t\t/**\n\t\t * Filters text with its translation based on context information.\n\t\t *\n\t\t * @param translation Translated text.\n\t\t * @param text        Text to translate.\n\t\t * @param context     Context information for the translators.\n\t\t * @param domain      Text domain. Unique identifier for retrieving translated strings.\n\t\t */\n\t\ttranslation = hooks.applyFilters(\n\t\t\t'i18n.gettext_with_context',\n\t\t\ttranslation,\n\t\t\ttext,\n\t\t\tcontext,\n\t\t\tdomain\n\t\t) as TranslatableText< typeof text >;\n\n\t\treturn hooks.applyFilters(\n\t\t\t'i18n.gettext_with_context_' + getFilterDomain( domain ),\n\t\t\ttranslation,\n\t\t\ttext,\n\t\t\tcontext,\n\t\t\tdomain\n\t\t) as TranslatableText< typeof text >;\n\t};\n\n\tconst _n: I18n< TextDomain >[ '_n' ] = (\n\t\tsingle,\n\t\tplural,\n\t\tnumber,\n\t\tdomain\n\t) => {\n\t\tlet translation = dcnpgettext(\n\t\t\tdomain,\n\t\t\tundefined,\n\t\t\tsingle,\n\t\t\tplural,\n\t\t\tnumber\n\t\t);\n\t\tif ( ! hooks ) {\n\t\t\treturn translation as TranslatableText<\n\t\t\t\ttypeof single | typeof plural\n\t\t\t>;\n\t\t}\n\n\t\t/**\n\t\t * Filters the singular or plural form of a string.\n\t\t *\n\t\t * @param translation Translated text.\n\t\t * @param single      The text to be used if the number is singular.\n\t\t * @param plural      The text to be used if the number is plural.\n\t\t * @param number      The number to compare against to use either the singular or plural form.\n\t\t * @param domain      Text domain. Unique identifier for retrieving translated strings.\n\t\t */\n\t\ttranslation = hooks.applyFilters(\n\t\t\t'i18n.ngettext',\n\t\t\ttranslation,\n\t\t\tsingle,\n\t\t\tplural,\n\t\t\tnumber,\n\t\t\tdomain\n\t\t) as TranslatableText< typeof single | typeof plural >;\n\n\t\treturn hooks.applyFilters(\n\t\t\t'i18n.ngettext_' + getFilterDomain( domain ),\n\t\t\ttranslation,\n\t\t\tsingle,\n\t\t\tplural,\n\t\t\tnumber,\n\t\t\tdomain\n\t\t) as TranslatableText< typeof single | typeof plural >;\n\t};\n\n\tconst _nx: I18n< TextDomain >[ '_nx' ] = (\n\t\tsingle,\n\t\tplural,\n\t\tnumber,\n\t\tcontext,\n\t\tdomain\n\t) => {\n\t\tlet translation = dcnpgettext(\n\t\t\tdomain,\n\t\t\tcontext,\n\t\t\tsingle,\n\t\t\tplural,\n\t\t\tnumber\n\t\t);\n\t\tif ( ! hooks ) {\n\t\t\treturn translation as TranslatableText<\n\t\t\t\ttypeof single | typeof plural\n\t\t\t>;\n\t\t}\n\n\t\t/**\n\t\t * Filters the singular or plural form of a string with gettext context.\n\t\t *\n\t\t * @param translation Translated text.\n\t\t * @param single      The text to be used if the number is singular.\n\t\t * @param plural      The text to be used if the number is plural.\n\t\t * @param number      The number to compare against to use either the singular or plural form.\n\t\t * @param context     Context information for the translators.\n\t\t * @param domain      Text domain. Unique identifier for retrieving translated strings.\n\t\t */\n\t\ttranslation = hooks.applyFilters(\n\t\t\t'i18n.ngettext_with_context',\n\t\t\ttranslation,\n\t\t\tsingle,\n\t\t\tplural,\n\t\t\tnumber,\n\t\t\tcontext,\n\t\t\tdomain\n\t\t) as TranslatableText< typeof single | typeof plural >;\n\n\t\treturn hooks.applyFilters(\n\t\t\t'i18n.ngettext_with_context_' + getFilterDomain( domain ),\n\t\t\ttranslation,\n\t\t\tsingle,\n\t\t\tplural,\n\t\t\tnumber,\n\t\t\tcontext,\n\t\t\tdomain\n\t\t) as TranslatableText< typeof single | typeof plural >;\n\t};\n\n\tconst isRTL: I18n< TextDomain >[ 'isRTL' ] = () => {\n\t\treturn 'rtl' === _x( 'ltr', 'text direction' );\n\t};\n\n\tconst hasTranslation: I18n< TextDomain >[ 'hasTranslation' ] = (\n\t\tsingle,\n\t\tcontext,\n\t\tdomain\n\t) => {\n\t\tconst key = context ? context + '\\u0004' + single : single;\n\t\tlet result = !! tannin.data?.[ domain ?? 'default' ]?.[ key ];\n\t\tif ( hooks ) {\n\t\t\t/**\n\t\t\t * Filters the presence of a translation in the locale data.\n\t\t\t *\n\t\t\t * @param hasTranslation Whether the translation is present or not..\n\t\t\t * @param single         The singular form of the translated text (used as key in locale data)\n\t\t\t * @param context        Context information for the translators.\n\t\t\t * @param domain         Text domain. Unique identifier for retrieving translated strings.\n\t\t\t */\n\t\t\tresult = hooks.applyFilters(\n\t\t\t\t'i18n.has_translation',\n\t\t\t\tresult,\n\t\t\t\tsingle,\n\t\t\t\tcontext,\n\t\t\t\tdomain\n\t\t\t) as boolean;\n\n\t\t\tresult = hooks.applyFilters(\n\t\t\t\t'i18n.has_translation_' + getFilterDomain( domain ),\n\t\t\t\tresult,\n\t\t\t\tsingle,\n\t\t\t\tcontext,\n\t\t\t\tdomain\n\t\t\t) as boolean;\n\t\t}\n\t\treturn result;\n\t};\n\n\tif ( initialData ) {\n\t\tsetLocaleData( initialData, initialDomain );\n\t}\n\n\tif ( hooks ) {\n\t\t/**\n\t\t * @param hookName\n\t\t */\n\t\tconst onHookAddedOrRemoved = ( hookName: string ) => {\n\t\t\tif ( I18N_HOOK_REGEXP.test( hookName ) ) {\n\t\t\t\tnotifyListeners();\n\t\t\t}\n\t\t};\n\n\t\thooks.addAction( 'hookAdded', 'core/i18n', onHookAddedOrRemoved );\n\t\thooks.addAction( 'hookRemoved', 'core/i18n', onHookAddedOrRemoved );\n\t}\n\n\treturn {\n\t\tgetLocaleData,\n\t\tsetLocaleData,\n\t\taddLocaleData,\n\t\tresetLocaleData,\n\t\tsubscribe,\n\t\t__,\n\t\t_x,\n\t\t_n,\n\t\t_nx,\n\t\tisRTL,\n\t\thasTranslation,\n\t};\n};\n", "/**\n * Internal dependencies\n */\nimport { createI18n } from './create-i18n';\n\n/**\n * WordPress dependencies\n */\nimport { defaultHooks } from '@wordpress/hooks';\nimport {\n\tLocaleData,\n\tSubscribeCallback,\n\tTranslatableText,\n\tUnsubscribeCallback,\n} from './types';\n\nconst i18n = createI18n( undefined, undefined, defaultHooks );\n\n/**\n * Default, singleton instance of `I18n`.\n */\nexport default i18n;\n\n/*\n * Comments in this file are duplicated from ./i18n due to\n * https://github.com/WordPress/gutenberg/pull/20318#issuecomment-590837722\n */\n\n/**\n * Returns locale data by domain in a Jed-formatted JSON object shape.\n *\n * @see http://messageformat.github.io/Jed/\n *\n * @param { string | undefined } [domain] Domain for which to get the data.\n * @return { LocaleData } Locale data.\n */\nexport const getLocaleData = i18n.getLocaleData.bind( i18n );\n\n/**\n * Merges locale data into the Tannin instance by domain. Accepts data in a\n * Jed-formatted JSON object shape.\n *\n * @see http://messageformat.github.io/Jed/\n *\n * @param {LocaleData }        [data]   Locale data configuration.\n * @param {string | undefined} [domain] Domain for which configuration applies.\n */\nexport const setLocaleData = i18n.setLocaleData.bind( i18n );\n\n/**\n * Resets all current Tannin instance locale data and sets the specified\n * locale data for the domain. Accepts data in a Jed-formatted JSON object shape.\n *\n * @see http://messageformat.github.io/Jed/\n *\n * @param {LocaleData}         [data]   Locale data configuration.\n * @param {string | undefined} [domain] Domain for which configuration applies.\n */\nexport const resetLocaleData = i18n.resetLocaleData.bind( i18n );\n\n/**\n * Subscribes to changes of locale data\n *\n * @param {SubscribeCallback} callback Subscription callback\n * @return {UnsubscribeCallback} Unsubscribe callback\n */\nexport const subscribe = i18n.subscribe.bind( i18n );\n\n/**\n * Retrieve the translation of text.\n *\n * @see https://developer.wordpress.org/reference/functions/__/\n *\n * @template {string} Text\n *\n * @param {Text}               text   Text to translate.\n * @param {string | undefined} domain Domain to retrieve the translated text.\n *\n * @return {TranslatableText<Text>} Translated text.\n */\nexport const __ = i18n.__.bind( i18n );\n\n/**\n * Retrieve translated string with gettext context.\n *\n * @see https://developer.wordpress.org/reference/functions/_x/\n *\n * @template {string} Text\n *\n * @param {Text}               text    Text to translate.\n * @param {string}             context Context information for the translators.\n * @param {string | undefined} domain  Domain to retrieve the translated text.\n *\n * @return {TranslatableText<Text>} Translated context string without pipe.\n */\nexport const _x = i18n._x.bind( i18n );\n\n/**\n * Translates and retrieves the singular or plural form based on the supplied\n * number.\n *\n * @see https://developer.wordpress.org/reference/functions/_n/\n *\n * @template {string} Single\n * @template {string} Plural\n *\n * @param {Single}             single The text to be used if the number is singular.\n * @param {Plural}             plural The text to be used if the number is plural.\n * @param {number}             number The number to compare against to use either the\n *                                    singular or plural form.\n * @param {string | undefined} domain Domain to retrieve the translated text.\n *\n * @return {TranslatableText<Single | Plural>} The translated singular or plural form.\n */\nexport const _n = i18n._n.bind( i18n );\n\n/**\n * Translates and retrieves the singular or plural form based on the supplied\n * number, with gettext context.\n *\n * @see https://developer.wordpress.org/reference/functions/_nx/\n *\n * @template {string} Single\n * @template {string} Plural\n * @param {Single}             single   The text to be used if the number is singular.\n *\n * @param {Single}             single   The text to be used if the number is singular.\n * @param {Plural}             plural   The text to be used if the number is plural.\n * @param {number}             number   The number to compare against to use either the\n *                                      singular or plural form.\n * @param {string}             context  Context information for the translators.\n * @param {string | undefined} [domain] Domain to retrieve the translated text.\n *\n * @return {TranslatableText<Single | Plural>} The translated singular or plural form.\n */\nexport const _nx = i18n._nx.bind( i18n );\n\n/**\n * Check if current locale is RTL.\n *\n * **RTL (Right To Left)** is a locale property indicating that text is written from right to left.\n * For example, the `he` locale (for Hebrew) specifies right-to-left. Arabic (ar) is another common\n * language written RTL. The opposite of RTL, LTR (Left To Right) is used in other languages,\n * including English (`en`, `en-US`, `en-GB`, etc.), Spanish (`es`), and French (`fr`).\n *\n * @return {boolean} Whether locale is RTL.\n */\nexport const isRTL = i18n.isRTL.bind( i18n );\n\n/**\n * Check if there is a translation for a given string (in singular form).\n *\n * @param {string} single  Singular form of the string to look up.\n * @param {string} context Context information for the translators.\n * @param {string} domain  Domain to retrieve the translated text.\n *\n * @return {boolean} Whether the translation exists or not.\n */\nexport const hasTranslation = i18n.hasTranslation.bind( i18n );\n"],
  "mappings": "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",
  "names": ["sprintf", "format", "args", "_sprintf", "DEFAULT_LOCALE_DATA", "plural_forms", "n", "I18N_HOOK_REGEXP", "createI18n", "initialData", "initialDomain", "hooks", "tannin", "Tannin", "listeners", "Set", "notifyListeners", "forEach", "listener", "subscribe", "callback", "add", "delete", "getLocaleData", "domain", "data", "doSetLocaleData", "pluralForms", "setLocaleData", "addLocaleData", "resetLocaleData", "dcnpgettext", "context", "single", "plural", "number", "undefined", "getFilterDomain", "__", "text", "translation", "applyFilters", "_x", "_n", "_nx", "isRTL", "hasTranslation", "key", "result", "onHookAddedOrRemoved", "hookName", "test", "addAction", "i18n", "createI18n", "undefined", "defaultHooks", "getLocaleData", "bind", "setLocaleData", "resetLocaleData", "subscribe", "__", "_x", "_n", "_nx", "isRTL", "hasTranslation"]
}

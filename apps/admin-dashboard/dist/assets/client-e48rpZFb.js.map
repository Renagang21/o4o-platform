{"version":3,"file":"client-e48rpZFb.js","sources":["../../src/api/client.ts"],"sourcesContent":["import axios from 'axios'\nimport toast from 'react-hot-toast'\n\nconst API_BASE_URL = import.meta.env.VITE_API_URL || 'https://api.neture.co.kr'\n\nexport const apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n})\n\n// Request interceptor\napiClient.interceptors.request.use(\n  (config) => {\n    // 공개 엔드포인트 목록 (인증 헤더 불필요)\n    const publicEndpoints = [\n      '/api/v1/settings/homepage',\n      '/api/public/',\n      '/api/v1/settings/test'\n    ];\n    \n    // 현재 요청이 공개 엔드포인트인지 확인\n    const isPublicEndpoint = publicEndpoints.some(endpoint => \n      config.url?.includes(endpoint)\n    );\n    \n    // 공개 엔드포인트가 아닌 경우에만 인증 토큰 추가\n    if (!isPublicEndpoint) {\n      // Add auth token if available\n      // 토큰 조회 우선순위: accessToken > token > authToken > admin-auth-storage\n      let token = localStorage.getItem('accessToken') || \n                  localStorage.getItem('token') || \n                  localStorage.getItem('authToken')\n      \n      // 위의 키들에서 토큰을 찾지 못했으면 admin-auth-storage에서 확인\n      if (!token) {\n        const adminStorage = localStorage.getItem('admin-auth-storage')\n        if (adminStorage) {\n          try {\n            const parsed = JSON.parse(adminStorage)\n            if (parsed.state?.accessToken || parsed.state?.token) {\n              token = parsed.state.accessToken || parsed.state.token\n            }\n          } catch {\n      // Removed // console.warn\n          }\n        }\n      }\n      \n      // 토큰이 있으면 헤더에 추가\n      if (token) {\n        config.headers['Authorization'] = `Bearer ${token}`\n      }\n    }\n    \n    return config\n  },\n  (error) => {\n    return Promise.reject(error)\n  }\n)\n\n// Response interceptor\napiClient.interceptors.response.use(\n  (response) => {\n    return response\n  },\n  (error) => {\n    if (error.response?.status === 401) {\n      // 현재 경로가 로그인 페이지가 아닌 경우에만 리다이렉트\n      const currentPath = window.location.pathname\n      if (currentPath !== '/login') {\n        // 모든 가능한 토큰 키 확인\n        const accessToken = localStorage.getItem('accessToken')\n        const token = localStorage.getItem('token')\n        const authToken = localStorage.getItem('authToken')\n        const adminStorage = localStorage.getItem('admin-auth-storage')\n        \n        // 토큰이 전혀 없는 경우에만 로그인으로 리다이렉트\n        if (!accessToken && !token && !authToken && !adminStorage) {\n          localStorage.removeItem('admin-auth-storage')\n          localStorage.removeItem('accessToken')\n          localStorage.removeItem('token')\n          localStorage.removeItem('authToken')\n          localStorage.removeItem('refreshToken')\n          localStorage.removeItem('user')\n          window.location.href = '/login'\n          toast.error('세션이 만료되었습니다. 다시 로그인해주세요.')\n        } else {\n          // 토큰은 있지만 401이 발생한 경우 - 토큰이 만료되었을 가능성\n          toast.error('인증이 만료되었습니다. 다시 로그인해주세요.')\n          // 모든 토큰 제거하고 리다이렉트\n          localStorage.removeItem('admin-auth-storage')\n          localStorage.removeItem('accessToken')\n          localStorage.removeItem('token')\n          localStorage.removeItem('authToken')\n          localStorage.removeItem('refreshToken')\n          localStorage.removeItem('user')\n          setTimeout(() => {\n            window.location.href = '/login'\n          }, 1000) // 토스트 메시지를 볼 시간을 주기 위해 약간의 딜레이\n        }\n      }\n    } else if (error.response?.status === 403) {\n      toast.error('접근 권한이 없습니다.')\n    } else if (error.response?.status >= 500) {\n      toast.error('서버 오류가 발생했습니다.')\n    } else if (error.code === 'ECONNABORTED') {\n      toast.error('요청 시간이 초과되었습니다.')\n    }\n    \n    return Promise.reject(error)\n  }\n)\n\nexport default apiClient"],"names":["API_BASE_URL","apiClient","axios","config","endpoint","token","adminStorage","parsed","error","response","accessToken","authToken","toast"],"mappings":"8FAGA,MAAMA,EAAe,+BAERC,EAAYC,EAAM,OAAO,CACpC,QAASF,EACT,QAAS,IACT,QAAS,CACP,eAAgB,kBAAA,CAEpB,CAAC,EAGDC,EAAU,aAAa,QAAQ,IAC5BE,GAAW,CAcV,GAAI,CAZoB,CACtB,4BACA,eACA,uBAAA,EAIuC,KAAKC,GAC5CD,EAAO,KAAK,SAASC,CAAQ,CAAA,EAIR,CAGrB,IAAIC,EAAQ,aAAa,QAAQ,aAAa,GAClC,aAAa,QAAQ,OAAO,GAC5B,aAAa,QAAQ,WAAW,EAG5C,GAAI,CAACA,EAAO,CACV,MAAMC,EAAe,aAAa,QAAQ,oBAAoB,EAC9D,GAAIA,EACF,GAAI,CACF,MAAMC,EAAS,KAAK,MAAMD,CAAY,GAClCC,EAAO,OAAO,aAAeA,EAAO,OAAO,SAC7CF,EAAQE,EAAO,MAAM,aAAeA,EAAO,MAAM,MAErD,MAAQ,CAER,CAEJ,CAGIF,IACFF,EAAO,QAAQ,cAAmB,UAAUE,CAAK,GAErD,CAEA,OAAOF,CACT,EACCK,GACQ,QAAQ,OAAOA,CAAK,CAE/B,EAGAP,EAAU,aAAa,SAAS,IAC7BQ,GACQA,EAERD,GAAU,CACT,GAAIA,EAAM,UAAU,SAAW,KAG7B,GADoB,OAAO,SAAS,WAChB,SAAU,CAE5B,MAAME,EAAc,aAAa,QAAQ,aAAa,EAChDL,EAAQ,aAAa,QAAQ,OAAO,EACpCM,EAAY,aAAa,QAAQ,WAAW,EAC5CL,EAAe,aAAa,QAAQ,oBAAoB,EAG1D,CAACI,GAAe,CAACL,GAAS,CAACM,GAAa,CAACL,GAC3C,aAAa,WAAW,oBAAoB,EAC5C,aAAa,WAAW,aAAa,EACrC,aAAa,WAAW,OAAO,EAC/B,aAAa,WAAW,WAAW,EACnC,aAAa,WAAW,cAAc,EACtC,aAAa,WAAW,MAAM,EAC9B,OAAO,SAAS,KAAO,SACvBM,EAAM,MAAM,0BAA0B,IAGtCA,EAAM,MAAM,0BAA0B,EAEtC,aAAa,WAAW,oBAAoB,EAC5C,aAAa,WAAW,aAAa,EACrC,aAAa,WAAW,OAAO,EAC/B,aAAa,WAAW,WAAW,EACnC,aAAa,WAAW,cAAc,EACtC,aAAa,WAAW,MAAM,EAC9B,WAAW,IAAM,CACf,OAAO,SAAS,KAAO,QACzB,EAAG,GAAI,EAEX,OACSJ,EAAM,UAAU,SAAW,IACpCI,EAAM,MAAM,cAAc,EACjBJ,EAAM,UAAU,QAAU,IACnCI,EAAM,MAAM,gBAAgB,EACnBJ,EAAM,OAAS,gBACxBI,EAAM,MAAM,iBAAiB,EAG/B,OAAO,QAAQ,OAAOJ,CAAK,CAC7B,CACF"}
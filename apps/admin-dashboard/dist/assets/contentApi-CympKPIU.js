import{u as t}from"./unified-client-DTaHHfiV.js";class a{static async getPosts(a=1,e=20,s){const n={page:a,pageSize:e,...s};return(await t.content.posts.list(n)).data}static async getPost(a){return(await t.content.posts.get(a)).data}static async createPost(a){return(await t.content.posts.create(a)).data}static async updatePost(a,e){return(await t.content.posts.update(a,e)).data}static async deletePost(a){return(await t.content.posts.delete(a)).data}static async clonePost(a){return(await t.raw.post(`/v1/content/posts/${a}/clone`)).data}static async bulkUpdatePosts(a,e){return(await t.raw.patch("/v1/content/posts/bulk",{ids:a,data:e})).data}static async bulkDeletePosts(a){return(await t.raw.delete("/v1/content/posts/bulk",{data:{ids:a}})).data}static async getPostPreview(a){return(await t.raw.get(`/v1/content/posts/${a}/preview`)).data}static async savePostDraft(a,e){return(await t.raw.post(`/v1/content/posts/${a}/autosave`,{content:e})).data}static async getPostRevisions(a){return(await t.raw.get(`/v1/content/posts/${a}/revisions`)).data}static async restorePostRevision(a,e){return(await t.raw.post(`/v1/content/posts/${a}/revisions/${e}/restore`)).data}static async getPages(a=1,e=20,s){const n={page:a,pageSize:e,...s};return(await t.raw.get("/v1/content/pages",{params:n})).data}static async getPage(a){return(await t.raw.get(`/v1/content/pages/${a}`)).data}static async createPage(a){return(await t.raw.post("/v1/content/pages",a)).data}static async updatePage(a,e){return(await t.raw.put(`/v1/content/pages/${a}`,e)).data}static async deletePage(a){return(await t.raw.delete(`/v1/content/pages/${a}`)).data}static async clonePage(a){return(await t.raw.post(`/v1/content/pages/${a}/clone`)).data}static async bulkUpdatePages(a,e){return(await t.raw.patch("/v1/content/pages/bulk",{ids:a,data:e})).data}static async bulkDeletePages(a){return(await t.raw.delete("/v1/content/pages/bulk",{data:{ids:a}})).data}static async savePageDraft(a,e){return(await t.raw.post(`/v1/content/pages/${a}/autosave`,{content:e})).data}static async getPagePreview(a){return(await t.raw.get(`/v1/content/pages/${a}/preview`)).data}static async getPageRevisions(a){return(await t.raw.get(`/v1/content/pages/${a}/revisions`)).data}static async restorePageRevision(a,e){return(await t.raw.post(`/v1/content/pages/${a}/revisions/${e}/restore`)).data}static async getPageTree(){return(await t.raw.get("/v1/content/pages/tree")).data}static async getCategories(a=!0){return(await t.content.categories.list({hierarchical:a})).data}static async getCategory(a){return(await t.content.categories.get(a)).data}static async createCategory(a){return(await t.content.categories.create(a)).data}static async updateCategory(a,e){return(await t.content.categories.update(a,e)).data}static async deleteCategory(a){return(await t.content.categories.delete(a)).data}static async reorderCategories(a){return(await t.raw.patch("/admin/categories/reorder",{categories:a})).data}static async getTags(){return(await t.raw.get("/v1/content/tags")).data}static async getTag(a){return(await t.raw.get(`/v1/content/tags/${a}`)).data}static async createTag(a){return(await t.raw.post("/v1/content/tags",a)).data}static async updateTag(a,e){return(await t.raw.put(`/v1/content/tags/${a}`,e)).data}static async deleteTag(a){return(await t.raw.delete(`/v1/content/tags/${a}`)).data}static async mergeTags(a,e){return(await t.raw.post(`/admin/tags/${a}/merge/${e}`)).data}static async getMediaFiles(a=1,e=50,s,n,r){const i={page:a,pageSize:e,...s&&{folderId:s},...n&&{type:n},...r&&{search:r}};return(await t.content.media.list(i)).data}static async getMediaFile(a){return(await t.content.media.get(a)).data}static async uploadFiles(a,e,s){const n=new FormData;a.forEach(t=>{n.append("files",t)}),e&&n.append("folderId",e);return(await t.raw.post("/v1/content/media/upload",n,{headers:{"Content-Type":"multipart/form-data"}})).data}static async updateMediaFile(a,e){return(await t.content.media.update(a,e)).data}static async deleteMediaFile(a){return(await t.content.media.delete(a)).data}static async bulkDeleteMediaFiles(a){return(await t.raw.delete("/v1/content/media/bulk",{data:{ids:a}})).data}static async getMediaFolders(){return(await t.raw.get("/v1/content/media/folders")).data}static async createMediaFolder(a){return(await t.raw.post("/v1/content/media/folders",a)).data}static async updateMediaFolder(a,e){return(await t.raw.put(`/v1/content/media/folders/${a}`,e)).data}static async deleteMediaFolder(a){return(await t.raw.delete(`/v1/content/media/folders/${a}`)).data}static async getFieldGroups(){return(await t.raw.get("/admin/custom-fields/groups")).data}static async getFieldGroup(a){return(await t.raw.get(`/admin/custom-fields/groups/${a}`)).data}static async createFieldGroup(a){return(await t.raw.post("/admin/custom-fields/groups",a)).data}static async updateFieldGroup(a,e){return(await t.raw.put(`/admin/custom-fields/groups/${a}`,e)).data}static async deleteFieldGroup(a){return(await t.raw.delete(`/admin/custom-fields/groups/${a}`)).data}static async exportFieldGroups(a){return(await t.raw.post("/admin/custom-fields/export",{ids:a})).data}static async importFieldGroups(a){return(await t.raw.post("/admin/custom-fields/import",a)).data}static async getTemplates(a){const e=a?`?type=${a}`:"";return(await t.raw.get(`/admin/templates${e}`)).data}static async getTemplate(a){return(await t.raw.get(`/admin/templates/${a}`)).data}static async createTemplate(a){return(await t.raw.post("/admin/templates",a)).data}static async updateTemplate(a,e){return(await t.raw.put(`/admin/templates/${a}`,e)).data}static async deleteTemplate(a){return(await t.raw.delete(`/admin/templates/${a}`)).data}static async getMenus(){return(await t.raw.get("/admin/menus")).data}static async getMenu(a){return(await t.raw.get(`/admin/menus/${a}`)).data}static async createMenu(a){return(await t.raw.post("/admin/menus",a)).data}static async updateMenu(a,e){return(await t.raw.put(`/admin/menus/${a}`,e)).data}static async deleteMenu(a){return(await t.raw.delete(`/admin/menus/${a}`)).data}static async getAuthors(){return(await t.content.authors.list()).data}static async generateSlug(a,e="post"){return(await t.raw.post("/admin/utils/generate-slug",{title:a,type:e})).data}static async validateSlug(a,e="post",s){const n=new URLSearchParams({slug:a,type:e});s&&n.append("excludeId",s);return(await t.raw.get(`/admin/utils/validate-slug?${n}`)).data}static async searchContent(a,e){const s=new URLSearchParams({query:a});e&&e.forEach(t=>s.append("types",t));return(await t.raw.get(`/admin/search?${s}`)).data}static async getContentStats(){return(await t.raw.get("/admin/stats")).data}}export{a as C};

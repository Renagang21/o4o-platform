import{u as s}from"./unified-client-BxtdLyLu.js";class d{static async getPosts(t=1,e=20,a){const n={page:t,pageSize:e,...a};return(await s.content.posts.list(n)).data}static async getPost(t){return(await s.content.posts.get(t)).data}static async createPost(t){return(await s.content.posts.create(t)).data}static async updatePost(t,e){return(await s.content.posts.update(t,e)).data}static async deletePost(t){return(await s.content.posts.delete(t)).data}static async clonePost(t){return(await s.raw.post(`/v1/content/posts/${t}/clone`)).data}static async bulkUpdatePosts(t,e){return(await s.raw.patch("/v1/content/posts/bulk",{ids:t,data:e})).data}static async bulkDeletePosts(t){return(await s.raw.delete("/v1/content/posts/bulk",{data:{ids:t}})).data}static async getPostPreview(t){return(await s.raw.get(`/v1/content/posts/${t}/preview`)).data}static async savePostDraft(t,e){return(await s.raw.post(`/v1/content/posts/${t}/autosave`,{content:e})).data}static async getPostRevisions(t){return(await s.raw.get(`/v1/content/posts/${t}/revisions`)).data}static async restorePostRevision(t,e){return(await s.raw.post(`/v1/content/posts/${t}/revisions/${e}/restore`)).data}static async getPages(t=1,e=20,a){const n={page:t,pageSize:e,...a};return(await s.raw.get("/v1/content/pages",{params:n})).data}static async getPage(t){return(await s.raw.get(`/v1/content/pages/${t}`)).data}static async createPage(t){return(await s.raw.post("/v1/content/pages",t)).data}static async updatePage(t,e){return(await s.raw.put(`/v1/content/pages/${t}`,e)).data}static async deletePage(t){return(await s.raw.delete(`/v1/content/pages/${t}`)).data}static async clonePage(t){return(await s.raw.post(`/v1/content/pages/${t}/clone`)).data}static async bulkUpdatePages(t,e){return(await s.raw.patch("/v1/content/pages/bulk",{ids:t,data:e})).data}static async bulkDeletePages(t){return(await s.raw.delete("/v1/content/pages/bulk",{data:{ids:t}})).data}static async savePageDraft(t,e){return(await s.raw.post(`/v1/content/pages/${t}/autosave`,{content:e})).data}static async getPagePreview(t){return(await s.raw.get(`/v1/content/pages/${t}/preview`)).data}static async getPageRevisions(t){return(await s.raw.get(`/v1/content/pages/${t}/revisions`)).data}static async restorePageRevision(t,e){return(await s.raw.post(`/v1/content/pages/${t}/revisions/${e}/restore`)).data}static async getPageTree(){return(await s.raw.get("/v1/content/pages/tree")).data}static async getCategories(t=!0){return(await s.content.categories.list({hierarchical:t})).data}static async getCategory(t){return(await s.content.categories.get(t)).data}static async createCategory(t){return(await s.content.categories.create(t)).data}static async updateCategory(t,e){return(await s.content.categories.update(t,e)).data}static async deleteCategory(t){return(await s.content.categories.delete(t)).data}static async reorderCategories(t){return(await s.raw.patch("/admin/categories/reorder",{categories:t})).data}static async getTags(){return(await s.raw.get("/v1/content/tags")).data}static async getTag(t){return(await s.raw.get(`/v1/content/tags/${t}`)).data}static async createTag(t){return(await s.raw.post("/v1/content/tags",t)).data}static async updateTag(t,e){return(await s.raw.put(`/v1/content/tags/${t}`,e)).data}static async deleteTag(t){return(await s.raw.delete(`/v1/content/tags/${t}`)).data}static async mergeTags(t,e){return(await s.raw.post(`/admin/tags/${t}/merge/${e}`)).data}static async getMediaFiles(t=1,e=50,a,n,r){const o={page:t,pageSize:e,...a&&{folderId:a},...n&&{type:n},...r&&{search:r}};return(await s.content.media.list(o)).data}static async getMediaFile(t){return(await s.content.media.get(t)).data}static async uploadFiles(t,e,a){const n=new FormData;return t.forEach(o=>{n.append("files",o)}),e&&n.append("folderId",e),(await s.raw.post("/v1/content/media/upload",n,{headers:{"Content-Type":"multipart/form-data"}})).data}static async updateMediaFile(t,e){return(await s.content.media.update(t,e)).data}static async deleteMediaFile(t){return(await s.content.media.delete(t)).data}static async bulkDeleteMediaFiles(t){return(await s.raw.delete("/v1/content/media/bulk",{data:{ids:t}})).data}static async getMediaFolders(){return(await s.raw.get("/v1/content/media/folders")).data}static async createMediaFolder(t){return(await s.raw.post("/v1/content/media/folders",t)).data}static async updateMediaFolder(t,e){return(await s.raw.put(`/v1/content/media/folders/${t}`,e)).data}static async deleteMediaFolder(t){return(await s.raw.delete(`/v1/content/media/folders/${t}`)).data}static async getFieldGroups(){return(await s.raw.get("/admin/custom-fields/groups")).data}static async getFieldGroup(t){return(await s.raw.get(`/admin/custom-fields/groups/${t}`)).data}static async createFieldGroup(t){return(await s.raw.post("/admin/custom-fields/groups",t)).data}static async updateFieldGroup(t,e){return(await s.raw.put(`/admin/custom-fields/groups/${t}`,e)).data}static async deleteFieldGroup(t){return(await s.raw.delete(`/admin/custom-fields/groups/${t}`)).data}static async exportFieldGroups(t){return(await s.raw.post("/admin/custom-fields/export",{ids:t})).data}static async importFieldGroups(t){return(await s.raw.post("/admin/custom-fields/import",t)).data}static async getTemplates(t){const e=t?`?type=${t}`:"";return(await s.raw.get(`/admin/templates${e}`)).data}static async getTemplate(t){return(await s.raw.get(`/admin/templates/${t}`)).data}static async createTemplate(t){return(await s.raw.post("/admin/templates",t)).data}static async updateTemplate(t,e){return(await s.raw.put(`/admin/templates/${t}`,e)).data}static async deleteTemplate(t){return(await s.raw.delete(`/admin/templates/${t}`)).data}static async getMenus(){return(await s.raw.get("/admin/menus")).data}static async getMenu(t){return(await s.raw.get(`/admin/menus/${t}`)).data}static async createMenu(t){return(await s.raw.post("/admin/menus",t)).data}static async updateMenu(t,e){return(await s.raw.put(`/admin/menus/${t}`,e)).data}static async deleteMenu(t){return(await s.raw.delete(`/admin/menus/${t}`)).data}static async getAuthors(){return(await s.content.authors.list()).data}static async generateSlug(t,e="post"){return(await s.raw.post("/admin/utils/generate-slug",{title:t,type:e})).data}static async validateSlug(t,e="post",a){const n=new URLSearchParams({slug:t,type:e});return a&&n.append("excludeId",a),(await s.raw.get(`/admin/utils/validate-slug?${n}`)).data}static async searchContent(t,e){const a=new URLSearchParams({query:t});return e&&e.forEach(r=>a.append("types",r)),(await s.raw.get(`/admin/search?${a}`)).data}static async getContentStats(){return(await s.raw.get("/admin/stats")).data}}export{d as C};

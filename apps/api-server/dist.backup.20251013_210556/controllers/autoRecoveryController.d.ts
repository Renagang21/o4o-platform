import { Request, Response } from 'express';
export declare class AutoRecoveryController {
    getAutoRecoveryStatus(req: Request, res: Response): Promise<void>;
    getRecoveryStats(req: Request, res: Response): Promise<void>;
    getActiveRecoveries(req: Request, res: Response): Promise<void>;
    getRecoveryHistory(req: Request, res: Response): Promise<void>;
    enableAutoRecovery(req: Request, res: Response): Promise<void>;
    disableAutoRecovery(req: Request, res: Response): Promise<void>;
    testRecoveryAction(req: Request, res: Response): Promise<void>;
    getCircuitBreakerStatus(req: Request, res: Response): Promise<void>;
    getAllCircuits(req: Request, res: Response): Promise<void>;
    getCircuitStats(req: Request, res: Response): Promise<void>;
    resetCircuit(req: Request, res: Response): Promise<void>;
    resetAllCircuits(req: Request, res: Response): Promise<void>;
    forceOpenCircuit(req: Request, res: Response): Promise<void>;
    getGracefulDegradationStatus(req: Request, res: Response): Promise<void>;
    getActiveDegradations(req: Request, res: Response): Promise<void>;
    getFeatureStates(req: Request, res: Response): Promise<void>;
    activateDegradation(req: Request, res: Response): Promise<void>;
    revertDegradation(req: Request, res: Response): Promise<void>;
    enableGracefulDegradation(req: Request, res: Response): Promise<void>;
    disableGracefulDegradation(req: Request, res: Response): Promise<void>;
    getIncidentEscalationStatus(req: Request, res: Response): Promise<void>;
    getActiveEscalations(req: Request, res: Response): Promise<void>;
    acknowledgeEscalation(req: Request, res: Response): Promise<void>;
    resolveEscalation(req: Request, res: Response): Promise<void>;
    getSelfHealingStatus(req: Request, res: Response): Promise<void>;
    getSystemHealth(req: Request, res: Response): Promise<void>;
    getHealingHistory(req: Request, res: Response): Promise<void>;
    getActiveHealingAttempts(req: Request, res: Response): Promise<void>;
    enableSelfHealing(req: Request, res: Response): Promise<void>;
    disableSelfHealing(req: Request, res: Response): Promise<void>;
    forceHealing(req: Request, res: Response): Promise<void>;
    getDeploymentMonitoringStatus(req: Request, res: Response): Promise<void>;
    getActiveDeployments(req: Request, res: Response): Promise<void>;
    getDeploymentHistory(req: Request, res: Response): Promise<void>;
    getDeployment(req: Request, res: Response): Promise<void>;
    trackDeployment(req: Request, res: Response): Promise<void>;
    rollbackDeployment(req: Request, res: Response): Promise<void>;
    enableAutoRollback(req: Request, res: Response): Promise<void>;
    disableAutoRollback(req: Request, res: Response): Promise<void>;
    getSystemOverview(req: Request, res: Response): Promise<void>;
    private calculateOverallHealth;
}
export declare const autoRecoveryController: AutoRecoveryController;
//# sourceMappingURL=autoRecoveryController.d.ts.map
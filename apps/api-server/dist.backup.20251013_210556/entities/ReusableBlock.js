"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReusableBlock = void 0;
const typeorm_1 = require("typeorm");
const User_1 = require("./User");
let ReusableBlock = class ReusableBlock {
    // Virtual method to increment usage
    incrementUsage() {
        this.usageCount += 1;
        this.lastUsedAt = new Date();
    }
    // Virtual method to check if user can edit
    canEdit(userId) {
        if (!this.isEditable)
            return false;
        if (this.authorId === userId)
            return true;
        if (this.isGlobal)
            return false; // Global blocks might need special permissions
        return false;
    }
    // Virtual method to generate slug from title
    static generateSlug(title) {
        return title
            .toLowerCase()
            .replace(/[^a-z0-9]+/g, '-')
            .replace(/(^-|-$)/g, '');
    }
    // Virtual method to create preview data
    generatePreview(html, css) {
        this.preview = {
            html: html.substring(0, 1000), // Limit preview HTML
            css: css === null || css === void 0 ? void 0 : css.substring(0, 500),
            width: 400,
            height: 300,
            screenshot: null // Will be generated by a separate service
        };
    }
};
exports.ReusableBlock = ReusableBlock;
__decorate([
    (0, typeorm_1.PrimaryGeneratedColumn)('uuid'),
    __metadata("design:type", String)
], ReusableBlock.prototype, "id", void 0);
__decorate([
    (0, typeorm_1.Column)({ length: 255 }),
    (0, typeorm_1.Index)(),
    __metadata("design:type", String)
], ReusableBlock.prototype, "title", void 0);
__decorate([
    (0, typeorm_1.Column)({ unique: true, length: 255 }),
    (0, typeorm_1.Index)(),
    __metadata("design:type", String)
], ReusableBlock.prototype, "slug", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'text', nullable: true }),
    __metadata("design:type", String)
], ReusableBlock.prototype, "description", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'json' }),
    __metadata("design:type", Array)
], ReusableBlock.prototype, "content", void 0);
__decorate([
    (0, typeorm_1.Column)({
        type: 'enum',
        enum: ['active', 'archived', 'draft'],
        default: 'active'
    }),
    (0, typeorm_1.Index)(),
    __metadata("design:type", String)
], ReusableBlock.prototype, "status", void 0);
__decorate([
    (0, typeorm_1.Column)({ nullable: true }),
    (0, typeorm_1.Index)(),
    __metadata("design:type", String)
], ReusableBlock.prototype, "category", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'simple-array', nullable: true }),
    __metadata("design:type", Array)
], ReusableBlock.prototype, "tags", void 0);
__decorate([
    (0, typeorm_1.Column)({ default: 0 }),
    __metadata("design:type", Number)
], ReusableBlock.prototype, "usageCount", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'timestamp', nullable: true }),
    __metadata("design:type", Date
    // Whether this block is shared across the platform
    )
], ReusableBlock.prototype, "lastUsedAt", void 0);
__decorate([
    (0, typeorm_1.Column)({ default: false }),
    __metadata("design:type", Boolean)
], ReusableBlock.prototype, "isGlobal", void 0);
__decorate([
    (0, typeorm_1.Column)({ default: true }),
    __metadata("design:type", Boolean)
], ReusableBlock.prototype, "isEditable", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'json', nullable: true }),
    __metadata("design:type", Object)
], ReusableBlock.prototype, "preview", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'uuid' }),
    (0, typeorm_1.Index)(),
    __metadata("design:type", String)
], ReusableBlock.prototype, "authorId", void 0);
__decorate([
    (0, typeorm_1.ManyToOne)(() => User_1.User),
    (0, typeorm_1.JoinColumn)({ name: 'author_id' }),
    __metadata("design:type", User_1.User)
], ReusableBlock.prototype, "author", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'uuid', nullable: true }),
    __metadata("design:type", String)
], ReusableBlock.prototype, "lastModifiedBy", void 0);
__decorate([
    (0, typeorm_1.ManyToOne)(() => User_1.User, { nullable: true }),
    (0, typeorm_1.JoinColumn)({ name: 'lastModifiedBy' }),
    __metadata("design:type", User_1.User
    // Revision history
    )
], ReusableBlock.prototype, "lastModifier", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'json', nullable: true }),
    __metadata("design:type", Array)
], ReusableBlock.prototype, "revisions", void 0);
__decorate([
    (0, typeorm_1.Column)({ default: 'private' }),
    __metadata("design:type", String)
], ReusableBlock.prototype, "visibility", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'json', nullable: true }),
    __metadata("design:type", Object)
], ReusableBlock.prototype, "metadata", void 0);
__decorate([
    (0, typeorm_1.CreateDateColumn)(),
    __metadata("design:type", Date)
], ReusableBlock.prototype, "createdAt", void 0);
__decorate([
    (0, typeorm_1.UpdateDateColumn)(),
    __metadata("design:type", Date
    // Virtual method to increment usage
    )
], ReusableBlock.prototype, "updatedAt", void 0);
exports.ReusableBlock = ReusableBlock = __decorate([
    (0, typeorm_1.Entity)('reusable_blocks')
], ReusableBlock);
//# sourceMappingURL=ReusableBlock.js.map
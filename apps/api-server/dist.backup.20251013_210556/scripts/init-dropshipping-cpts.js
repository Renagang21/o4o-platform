"use strict";
/**
 * Script to initialize Dropshipping CPTs in the database
 * Run this script using ts-node from the api-server directory
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const connection_1 = require("../database/connection");
const CustomPostType_1 = require("../entities/CustomPostType");
const logger_1 = __importDefault(require("../utils/logger"));
const DROPSHIPPING_CPTS = [
    {
        slug: 'ds_supplier',
        name: 'Í≥µÍ∏âÏûê',
        description: 'ÎìúÎ°≠Ïâ¨Ìïë ÏÉÅÌíà Í≥µÍ∏âÏûê',
        icon: 'store',
        menuPosition: 25,
        public: false,
        hasArchive: false,
        showInMenu: true,
        supports: ['title', 'editor', 'custom-fields', 'revisions'],
        taxonomies: [],
        capabilityType: 'post',
        rewrite: { slug: 'ds-supplier' },
        labels: {
            add_new: 'ÏÉà Í≥µÍ∏âÏûê Ï∂îÍ∞Ä',
            add_new_item: 'ÏÉà Í≥µÍ∏âÏûê Ï∂îÍ∞Ä',
            edit_item: 'Í≥µÍ∏âÏûê Ìé∏Ïßë',
            new_item: 'ÏÉà Í≥µÍ∏âÏûê',
            view_item: 'Í≥µÍ∏âÏûê Î≥¥Í∏∞',
            search_items: 'Í≥µÍ∏âÏûê Í≤ÄÏÉâ',
            not_found: 'Í≥µÍ∏âÏûêÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§',
            not_found_in_trash: 'Ìú¥ÏßÄÌÜµÏóêÏÑú Í≥µÍ∏âÏûêÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§',
        },
        active: true
    },
    {
        slug: 'ds_partner',
        name: 'ÌååÌä∏ÎÑà',
        description: 'ÎìúÎ°≠Ïâ¨Ìïë Ï†úÌú¥ ÌååÌä∏ÎÑà',
        icon: 'groups',
        menuPosition: 26,
        public: false,
        hasArchive: false,
        showInMenu: true,
        supports: ['title', 'editor', 'custom-fields', 'revisions', 'thumbnail'],
        taxonomies: [],
        capabilityType: 'post',
        rewrite: { slug: 'ds-partner' },
        labels: {
            add_new: 'ÏÉà ÌååÌä∏ÎÑà Ï∂îÍ∞Ä',
            add_new_item: 'ÏÉà ÌååÌä∏ÎÑà Ï∂îÍ∞Ä',
            edit_item: 'ÌååÌä∏ÎÑà Ìé∏Ïßë',
            new_item: 'ÏÉà ÌååÌä∏ÎÑà',
            view_item: 'ÌååÌä∏ÎÑà Î≥¥Í∏∞',
            search_items: 'ÌååÌä∏ÎÑà Í≤ÄÏÉâ',
            not_found: 'ÌååÌä∏ÎÑàÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§',
            not_found_in_trash: 'Ìú¥ÏßÄÌÜµÏóêÏÑú ÌååÌä∏ÎÑàÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§',
        },
        active: true
    },
    {
        slug: 'ds_product',
        name: 'ÎìúÎ°≠Ïâ¨Ìïë ÏÉÅÌíà',
        description: 'ÎìúÎ°≠Ïâ¨Ìïë ÌîåÎû´Ìèº ÏÉÅÌíà',
        icon: 'cart',
        menuPosition: 24,
        public: true,
        hasArchive: true,
        showInMenu: true,
        supports: ['title', 'editor', 'custom-fields', 'revisions', 'thumbnail', 'excerpt'],
        taxonomies: ['ds_product_category', 'ds_product_tag'],
        capabilityType: 'post',
        rewrite: { slug: 'ds-products' },
        labels: {
            add_new: 'ÏÉà ÏÉÅÌíà Ï∂îÍ∞Ä',
            add_new_item: 'ÏÉà ÏÉÅÌíà Ï∂îÍ∞Ä',
            edit_item: 'ÏÉÅÌíà Ìé∏Ïßë',
            new_item: 'ÏÉà ÏÉÅÌíà',
            view_item: 'ÏÉÅÌíà Î≥¥Í∏∞',
            search_items: 'ÏÉÅÌíà Í≤ÄÏÉâ',
            not_found: 'ÏÉÅÌíàÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§',
            not_found_in_trash: 'Ìú¥ÏßÄÌÜµÏóêÏÑú ÏÉÅÌíàÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§',
        },
        active: true
    },
    {
        slug: 'ds_commission_policy',
        name: 'ÏàòÏàòÎ£å Ï†ïÏ±Ö',
        description: 'ÎìúÎ°≠Ïâ¨Ìïë ÏàòÏàòÎ£å Ï†ïÏ±Ö',
        icon: 'money-alt',
        menuPosition: 27,
        public: false,
        hasArchive: false,
        showInMenu: true,
        supports: ['title', 'editor', 'custom-fields', 'revisions'],
        taxonomies: [],
        capabilityType: 'post',
        rewrite: { slug: 'ds-commission-policy' },
        labels: {
            add_new: 'ÏÉà Ï†ïÏ±Ö Ï∂îÍ∞Ä',
            add_new_item: 'ÏÉà ÏàòÏàòÎ£å Ï†ïÏ±Ö Ï∂îÍ∞Ä',
            edit_item: 'ÏàòÏàòÎ£å Ï†ïÏ±Ö Ìé∏Ïßë',
            new_item: 'ÏÉà ÏàòÏàòÎ£å Ï†ïÏ±Ö',
            view_item: 'ÏàòÏàòÎ£å Ï†ïÏ±Ö Î≥¥Í∏∞',
            search_items: 'ÏàòÏàòÎ£å Ï†ïÏ±Ö Í≤ÄÏÉâ',
            not_found: 'ÏàòÏàòÎ£å Ï†ïÏ±ÖÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§',
            not_found_in_trash: 'Ìú¥ÏßÄÌÜµÏóêÏÑú ÏàòÏàòÎ£å Ï†ïÏ±ÖÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§',
        },
        active: true
    }
];
async function initializeDropshippingCPTs() {
    try {
        logger_1.default.info('üîå Initializing database connection...');
        await connection_1.AppDataSource.initialize();
        logger_1.default.info('‚úÖ Database connected!');
        const cptRepository = connection_1.AppDataSource.getRepository(CustomPostType_1.CustomPostType);
        // Check existing CPTs
        logger_1.default.info('üìä Checking existing Dropshipping CPTs...');
        const existingCPTs = await cptRepository
            .createQueryBuilder('cpt')
            .where('cpt.slug LIKE :pattern', { pattern: 'ds_%' })
            .getMany();
        logger_1.default.info(`Found ${existingCPTs.length} existing dropshipping CPTs`);
        if (existingCPTs.length > 0) {
            logger_1.default.info('Existing CPTs:');
            existingCPTs.forEach(cpt => {
                logger_1.default.info(`  - ${cpt.name} (${cpt.slug}) - Active: ${cpt.active}`);
            });
            // Update inactive CPTs
            const inactiveCPTs = existingCPTs.filter(cpt => !cpt.active);
            if (inactiveCPTs.length > 0) {
                logger_1.default.info(`‚ö†Ô∏è  Found ${inactiveCPTs.length} inactive CPTs. Activating them...`);
                for (const cpt of inactiveCPTs) {
                    cpt.active = true;
                    await cptRepository.save(cpt);
                    logger_1.default.info(`  ‚úÖ Activated: ${cpt.name}`);
                }
            }
        }
        // Create missing CPTs
        let createdCount = 0;
        for (const cptData of DROPSHIPPING_CPTS) {
            const existing = await cptRepository.findOne({
                where: { slug: cptData.slug }
            });
            if (!existing) {
                const cpt = cptRepository.create(cptData);
                await cptRepository.save(cpt);
                logger_1.default.info(`‚úÖ Created CPT: ${cptData.name} (${cptData.slug})`);
                createdCount++;
            }
            else if (!existing.active) {
                // Make sure it's active
                existing.active = true;
                await cptRepository.save(existing);
                logger_1.default.info(`‚úÖ Activated existing CPT: ${cptData.name} (${cptData.slug})`);
            }
            else {
                logger_1.default.info(`‚ÑπÔ∏è  CPT already exists and is active: ${cptData.name} (${cptData.slug})`);
            }
        }
        if (createdCount > 0) {
            logger_1.default.info(`‚úÖ Created ${createdCount} new CPTs`);
        }
        // Final status check
        logger_1.default.info('üìä Final status of all CPTs:');
        const allCPTs = await cptRepository.find({
            order: { createdAt: 'DESC' }
        });
        logger_1.default.info(`Total CPTs: ${allCPTs.length}`);
        logger_1.default.info(`Active CPTs: ${allCPTs.filter(c => c.active).length}`);
        logger_1.default.info(`Dropshipping CPTs: ${allCPTs.filter(c => c.slug.startsWith('ds_')).length}`);
        logger_1.default.info(`Active Dropshipping CPTs: ${allCPTs.filter(c => c.slug.startsWith('ds_') && c.active).length}`);
        logger_1.default.info('‚ú® Dropshipping CPTs initialization completed!');
    }
    catch (error) {
        logger_1.default.error('‚ùå Error:', error);
    }
    finally {
        if (connection_1.AppDataSource.isInitialized) {
            await connection_1.AppDataSource.destroy();
        }
    }
}
// Run the initialization
initializeDropshippingCPTs();
//# sourceMappingURL=init-dropshipping-cpts.js.map
# User Management Endpoints

/users:
  get:
    tags:
      - Users
    summary: 사용자 목록 조회
    description: 페이지네이션과 필터링을 지원하는 사용자 목록 조회
    operationId: getUsers
    security:
      - bearerAuth: []
    parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      - $ref: '#/components/parameters/orderParam'
      - $ref: '#/components/parameters/searchParam'
      - name: role
        in: query
        description: 사용자 역할 필터
        schema:
          type: string
          enum: [super_admin, admin, vendor, seller, customer, business]
      - name: status
        in: query
        description: 계정 상태 필터
        schema:
          type: string
          enum: [active, inactive, pending, approved, suspended]
    responses:
      '200':
        description: 사용자 목록 조회 성공
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/PaginatedResponse'
                - type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/User'
      '401':
        $ref: '#/components/responses/UnauthorizedError'
      '403':
        $ref: '#/components/responses/ForbiddenError'

  post:
    tags:
      - Users
    summary: 새 사용자 생성
    description: 관리자가 새로운 사용자 계정을 생성합니다
    operationId: createUser
    security:
      - bearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [email, password, name, role]
            properties:
              email:
                type: string
                format: email
              password:
                type: string
                format: password
                minLength: 8
              name:
                type: string
              firstName:
                type: string
              lastName:
                type: string
              role:
                type: string
                enum: [admin, vendor, seller, customer, business]
              status:
                type: string
                enum: [active, pending]
                default: active
              permissions:
                type: array
                items:
                  type: string
              businessInfo:
                type: object
                properties:
                  companyName:
                    type: string
                  businessNumber:
                    type: string
                  businessType:
                    type: string
                  address:
                    type: string
                  phone:
                    type: string
    responses:
      '201':
        description: 사용자 생성 성공
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                data:
                  $ref: '#/components/schemas/User'
      '400':
        $ref: '#/components/responses/ValidationError'
      '401':
        $ref: '#/components/responses/UnauthorizedError'
      '403':
        $ref: '#/components/responses/ForbiddenError'
      '409':
        description: 이메일 중복
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
            example:
              success: false
              error: 이미 등록된 이메일입니다
              code: VAL_DUPLICATE_ENTRY

/users/{id}:
  get:
    tags:
      - Users
    summary: 특정 사용자 조회
    description: ID로 특정 사용자 정보를 조회합니다
    operationId: getUserById
    security:
      - bearerAuth: []
    parameters:
      - $ref: '#/components/parameters/idParam'
    responses:
      '200':
        description: 사용자 조회 성공
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                data:
                  $ref: '#/components/schemas/User'
      '401':
        $ref: '#/components/responses/UnauthorizedError'
      '403':
        $ref: '#/components/responses/ForbiddenError'
      '404':
        $ref: '#/components/responses/NotFoundError'

  put:
    tags:
      - Users
    summary: 사용자 정보 수정
    description: 사용자 정보를 업데이트합니다
    operationId: updateUser
    security:
      - bearerAuth: []
    parameters:
      - $ref: '#/components/parameters/idParam'
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
              name:
                type: string
              firstName:
                type: string
              lastName:
                type: string
              avatar:
                type: string
                format: uri
              role:
                type: string
                enum: [admin, vendor, seller, customer, business]
              status:
                type: string
                enum: [active, inactive, pending, approved, suspended]
              permissions:
                type: array
                items:
                  type: string
              businessInfo:
                type: object
                properties:
                  companyName:
                    type: string
                  businessNumber:
                    type: string
                  businessType:
                    type: string
                  address:
                    type: string
                  phone:
                    type: string
    responses:
      '200':
        description: 사용자 수정 성공
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                data:
                  $ref: '#/components/schemas/User'
      '400':
        $ref: '#/components/responses/ValidationError'
      '401':
        $ref: '#/components/responses/UnauthorizedError'
      '403':
        $ref: '#/components/responses/ForbiddenError'
      '404':
        $ref: '#/components/responses/NotFoundError'

  delete:
    tags:
      - Users
    summary: 사용자 삭제
    description: 사용자 계정을 삭제합니다
    operationId: deleteUser
    security:
      - bearerAuth: []
    parameters:
      - $ref: '#/components/parameters/idParam'
    responses:
      '200':
        description: 사용자 삭제 성공
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                message:
                  type: string
                  example: 사용자가 성공적으로 삭제되었습니다
      '401':
        $ref: '#/components/responses/UnauthorizedError'
      '403':
        $ref: '#/components/responses/ForbiddenError'
      '404':
        $ref: '#/components/responses/NotFoundError'

/users/{id}/suspend:
  post:
    tags:
      - Users
    summary: 사용자 계정 정지
    description: 사용자 계정을 일시 정지합니다
    operationId: suspendUser
    security:
      - bearerAuth: []
    parameters:
      - $ref: '#/components/parameters/idParam'
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              reason:
                type: string
                description: 정지 사유
              duration:
                type: integer
                description: 정지 기간 (일)
                minimum: 1
              notifyUser:
                type: boolean
                description: 사용자에게 이메일 알림 여부
                default: true
    responses:
      '200':
        description: 계정 정지 성공
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                message:
                  type: string
                  example: 계정이 정지되었습니다
                data:
                  type: object
                  properties:
                    suspendedUntil:
                      type: string
                      format: date-time
      '401':
        $ref: '#/components/responses/UnauthorizedError'
      '403':
        $ref: '#/components/responses/ForbiddenError'
      '404':
        $ref: '#/components/responses/NotFoundError'

/users/{id}/activate:
  post:
    tags:
      - Users
    summary: 사용자 계정 활성화
    description: 정지된 계정을 활성화합니다
    operationId: activateUser
    security:
      - bearerAuth: []
    parameters:
      - $ref: '#/components/parameters/idParam'
    responses:
      '200':
        description: 계정 활성화 성공
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                message:
                  type: string
                  example: 계정이 활성화되었습니다
      '401':
        $ref: '#/components/responses/UnauthorizedError'
      '403':
        $ref: '#/components/responses/ForbiddenError'
      '404':
        $ref: '#/components/responses/NotFoundError'

/users/{id}/password:
  put:
    tags:
      - Users
    summary: 비밀번호 변경
    description: 사용자 비밀번호를 변경합니다
    operationId: changePassword
    security:
      - bearerAuth: []
    parameters:
      - $ref: '#/components/parameters/idParam'
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [currentPassword, newPassword]
            properties:
              currentPassword:
                type: string
                format: password
                description: 현재 비밀번호
              newPassword:
                type: string
                format: password
                minLength: 8
                description: 새 비밀번호
    responses:
      '200':
        description: 비밀번호 변경 성공
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                message:
                  type: string
                  example: 비밀번호가 성공적으로 변경되었습니다
      '400':
        $ref: '#/components/responses/ValidationError'
      '401':
        $ref: '#/components/responses/UnauthorizedError'
      '403':
        description: 잘못된 현재 비밀번호
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
            example:
              success: false
              error: 현재 비밀번호가 일치하지 않습니다
              code: AUTH_INVALID_CREDENTIALS

/users/{id}/permissions:
  get:
    tags:
      - Users
    summary: 사용자 권한 조회
    description: 사용자의 권한 목록을 조회합니다
    operationId: getUserPermissions
    security:
      - bearerAuth: []
    parameters:
      - $ref: '#/components/parameters/idParam'
    responses:
      '200':
        description: 권한 조회 성공
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                data:
                  type: object
                  properties:
                    role:
                      type: string
                      enum: [super_admin, admin, vendor, seller, customer, business]
                    permissions:
                      type: array
                      items:
                        type: string
                      example: ['read:posts', 'write:posts', 'delete:posts']
      '401':
        $ref: '#/components/responses/UnauthorizedError'
      '403':
        $ref: '#/components/responses/ForbiddenError'
      '404':
        $ref: '#/components/responses/NotFoundError'

  put:
    tags:
      - Users
    summary: 사용자 권한 수정
    description: 사용자의 권한을 업데이트합니다
    operationId: updateUserPermissions
    security:
      - bearerAuth: []
    parameters:
      - $ref: '#/components/parameters/idParam'
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              permissions:
                type: array
                items:
                  type: string
                description: 권한 목록
                example: ['read:posts', 'write:posts', 'delete:posts']
    responses:
      '200':
        description: 권한 수정 성공
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                message:
                  type: string
                  example: 권한이 성공적으로 업데이트되었습니다
      '401':
        $ref: '#/components/responses/UnauthorizedError'
      '403':
        $ref: '#/components/responses/ForbiddenError'
      '404':
        $ref: '#/components/responses/NotFoundError'

/users/bulk:
  post:
    tags:
      - Users
    summary: 대량 사용자 생성
    description: CSV 또는 JSON 형식으로 여러 사용자를 한 번에 생성합니다
    operationId: bulkCreateUsers
    security:
      - bearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [users]
            properties:
              users:
                type: array
                items:
                  type: object
                  required: [email, name, role]
                  properties:
                    email:
                      type: string
                      format: email
                    name:
                      type: string
                    role:
                      type: string
                      enum: [customer, vendor, business]
                    password:
                      type: string
                      description: 비밀번호 (제공하지 않으면 자동 생성)
              sendWelcomeEmail:
                type: boolean
                default: true
                description: 환영 이메일 전송 여부
    responses:
      '201':
        description: 대량 생성 성공
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                data:
                  type: object
                  properties:
                    created:
                      type: integer
                      description: 생성된 사용자 수
                    failed:
                      type: integer
                      description: 실패한 사용자 수
                    errors:
                      type: array
                      items:
                        type: object
                        properties:
                          email:
                            type: string
                          error:
                            type: string
      '400':
        $ref: '#/components/responses/ValidationError'
      '401':
        $ref: '#/components/responses/UnauthorizedError'
      '403':
        $ref: '#/components/responses/ForbiddenError'
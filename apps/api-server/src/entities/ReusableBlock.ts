import { Entity, PrimaryGeneratedColumn, Column, CreateDateColumn, UpdateDateColumn, ManyToOne, JoinColumn, Index } from 'typeorm'
import { User } from './User.js'

export interface BlockContent {
  id: string
  type: string
  data: unknown
  innerBlocks?: BlockContent[]
}

export interface ReusableBlockRevision {
  id: string
  timestamp: string
  author: string
  changes: Partial<ReusableBlock>
  blockData: BlockContent[]
}

@Entity('reusable_blocks')
export class ReusableBlock {
  @PrimaryGeneratedColumn('uuid')
  id!: string

  @Column({ length: 255 })
  @Index()
  title!: string

  @Column({ unique: true, length: 255 })
  @Index()
  slug!: string

  @Column({ type: 'text', nullable: true })
  description!: string

  @Column({ type: 'json' })
  content!: BlockContent[]

  @Column({ 
    type: 'enum', 
    enum: ['active', 'archived', 'draft'],
    default: 'active'
  })
  @Index()
  status!: string

  // Category for organizing blocks
  @Column({ nullable: true })
  @Index()  
  category!: string

  // Tags for better searchability
  @Column({ type: 'simple-array', nullable: true })
  tags!: string[]

  // Usage tracking
  @Column({ default: 0 })
  usageCount!: number

  @Column({ type: 'timestamp', nullable: true })
  lastUsedAt!: Date

  // Whether this block is shared across the platform
  @Column({ default: false })
  isGlobal!: boolean

  // Whether this block can be edited after creation
  @Column({ default: true })
  isEditable!: boolean

  // Preview/thumbnail data
  @Column({ type: 'json', nullable: true })
  preview!: {
    html?: string
    css?: string
    screenshot?: string
    width?: number
    height?: number
  }

  // Author and modification tracking
  @Column({ type: 'uuid' })
  @Index()
  authorId!: string

  @ManyToOne(() => User)
  @JoinColumn({ name: 'author_id' })
  author!: User

  @Column({ type: 'uuid', nullable: true })
  lastModifiedBy!: string

  @ManyToOne(() => User, { nullable: true })
  @JoinColumn({ name: 'lastModifiedBy' })
  lastModifier!: User

  // Revision history
  @Column({ type: 'json', nullable: true })
  revisions!: ReusableBlockRevision[]

  // Access control
  @Column({ default: 'private' })
  visibility!: 'private' | 'public' | 'organization'

  // Block metadata
  @Column({ type: 'json', nullable: true })
  metadata!: {
    version?: string
    compatibility?: string[]
    requirements?: string[]
    keywords?: string[]
    difficulty?: 'beginner' | 'intermediate' | 'advanced'
    [key: string]: unknown
  }

  @CreateDateColumn()
  createdAt!: Date

  @UpdateDateColumn()
  updatedAt!: Date

  // Virtual method to increment usage
  incrementUsage(): void {
    this.usageCount += 1
    this.lastUsedAt = new Date()
  }

  // Virtual method to check if user can edit
  canEdit(userId: string): boolean {
    if (!this.isEditable) return false
    if (this.authorId === userId) return true
    if (this.isGlobal) return false // Global blocks might need special permissions
    return false
  }

  // Virtual method to generate slug from title
  static generateSlug(title: string): string {
    return title
      .toLowerCase()
      .replace(/[^a-z0-9]+/g, '-')
      .replace(/(^-|-$)/g, '')
  }

  // Virtual method to create preview data
  generatePreview(html: string, css?: string): void {
    this.preview = {
      html: html.substring(0, 1000), // Limit preview HTML
      css: css?.substring(0, 500),
      width: 400,
      height: 300,
      screenshot: null // Will be generated by a separate service
    }
  }
}
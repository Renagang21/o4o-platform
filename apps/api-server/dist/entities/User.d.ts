import { UserRole, UserStatus } from '../types/auth';
import { BusinessInfo } from '../types/user';
import { RefreshToken } from './RefreshToken';
import { ApprovalLog } from './ApprovalLog';
import { LinkedAccount } from './LinkedAccount';
import { AccountActivity } from './AccountActivity';
export { UserRole, UserStatus };
export declare class User {
    id: string;
    email: string;
    password: string;
    firstName?: string;
    lastName?: string;
    name?: string;
    avatar?: string;
    status: UserStatus;
    businessInfo?: BusinessInfo;
    role: UserRole;
    roles: string[];
    permissions: string[];
    isActive: boolean;
    isEmailVerified: boolean;
    refreshTokenFamily?: string;
    lastLoginAt?: Date;
    lastLoginIp?: string;
    loginAttempts: number;
    lockedUntil?: Date;
    betaUserId?: string;
    domain?: string;
    createdAt: Date;
    updatedAt: Date;
    approvedAt?: Date;
    approvedBy?: string;
    provider?: string;
    provider_id?: string;
    get isLocked(): boolean;
    get fullName(): string;
    refreshTokens: RefreshToken[];
    approvalLogs: ApprovalLog[];
    linkedAccounts: LinkedAccount[];
    accountActivities: AccountActivity[];
    adminActions: ApprovalLog[];
    hashPassword(): Promise<void>;
    validatePassword(password: string): Promise<boolean>;
    hasRole(role: UserRole | string): boolean;
    hasAnyRole(roles: (UserRole | string)[]): boolean;
    isAdmin(): boolean;
    isPending(): boolean;
    isActiveUser(): boolean;
    toPublicData(): {
        id: string;
        email: string;
        firstName: string;
        lastName: string;
        fullName: string;
        role: UserRole;
        roles: string[];
        status: UserStatus;
        permissions: string[];
        isActive: boolean;
        isEmailVerified: boolean;
        lastLoginAt: Date;
        createdAt: Date;
        updatedAt: Date;
    };
}
//# sourceMappingURL=User.d.ts.map
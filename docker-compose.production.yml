version: '3.8'

services:
  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:15-alpine
    container_name: o4o-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-o4o_platform}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - backend

  # Redis 캐시
  redis:
    image: redis:7-alpine
    container_name: o4o-redis-prod
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: always
    networks:
      - backend

  # API 서버
  api-server:
    build:
      context: ./services/api-server
      dockerfile: Dockerfile
    container_name: o4o-api-prod
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-o4o_platform}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      AI_SERVICE_URL: ${AI_SERVICE_URL}
      AI_SERVICE_API_KEY: ${AI_SERVICE_API_KEY}
      CORS_ORIGIN: ${CORS_ORIGIN:-https://o4o-platform.com}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
    networks:
      - backend
      - frontend

  # 웹 앱
  web-app:
    build:
      context: ./services/main-site
      dockerfile: Dockerfile
    container_name: o4o-web-prod
    environment:
      NODE_ENV: production
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./certs:/etc/nginx/certs:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - api-server
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
    networks:
      - frontend

  # Nginx 리버스 프록시 (추가 보안)
  nginx-proxy:
    image: nginx:alpine
    container_name: o4o-nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certs:/etc/nginx/certs:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - web-app
      - api-server
    restart: always
    networks:
      - frontend

  # 모니터링 (Prometheus)
  prometheus:
    image: prom/prometheus:latest
    container_name: o4o-prometheus-prod
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    restart: always
    networks:
      - monitoring

  # 메트릭 수집 (Grafana)
  grafana:
    image: grafana/grafana:latest
    container_name: o4o-grafana-prod
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    restart: always
    networks:
      - monitoring

  # 로그 수집 (Loki)
  loki:
    image: grafana/loki:latest
    container_name: o4o-loki-prod
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    restart: always
    networks:
      - monitoring

  # 백업 서비스
  backup:
    image: postgres:15-alpine
    container_name: o4o-backup-prod
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: |
      sh -c '
        while true; do
          sleep 86400  # 24시간마다 실행
          /backup.sh
        done
      '
    depends_on:
      - postgres
    restart: always
    networks:
      - backend

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
  monitoring:
    driver: bridge

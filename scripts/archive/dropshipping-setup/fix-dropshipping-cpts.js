#!/usr/bin/env node

/**
 * Script to fix Dropshipping CPTs in the database
 * This will check and update the active status of dropshipping CPTs
 */

import pg from 'pg';
const { Client } = pg;

async function fixDropshippingCPTs() {
  const client = new Client({
    host: '43.202.242.215',
    port: 5432,
    user: 'o4o_user',
    password: 'o4o@2024!',
    database: 'o4o_platform'
  });

  try {
    console.log('üîå Connecting to database...');
    await client.connect();
    console.log('‚úÖ Connected to database\n');

    // 1. First, check if dropshipping CPTs exist
    console.log('üìä Checking existing Dropshipping CPTs...\n');
    const checkQuery = `
      SELECT slug, name, active, created_at
      FROM custom_post_types 
      WHERE slug IN ('ds_supplier', 'ds_partner', 'ds_product', 'ds_commission_policy')
      ORDER BY created_at DESC
    `;
    
    const checkResult = await client.query(checkQuery);
    
    if (checkResult.rows.length === 0) {
      console.log('‚ùå No dropshipping CPTs found. Creating them...\n');
      
      // Insert dropshipping CPTs
      const insertQuery = `
        INSERT INTO custom_post_types (id, slug, name, description, icon, active, public, has_archive, show_in_menu, supports, taxonomies, menu_position, capability_type, rewrite, created_at, updated_at, labels)
        VALUES 
        (gen_random_uuid(), 'ds_supplier', 'Í≥µÍ∏âÏûê', 'ÎìúÎ°≠Ïâ¨Ìïë ÏÉÅÌíà Í≥µÍ∏âÏûê', 'store', true, false, false, true, '["title","editor","custom-fields","revisions"]'::jsonb, '[]'::jsonb, 25, 'post', '{"slug":"ds-supplier"}'::jsonb, NOW(), NOW(), '{"add_new": "ÏÉà Í≥µÍ∏âÏûê Ï∂îÍ∞Ä", "add_new_item": "ÏÉà Í≥µÍ∏âÏûê Ï∂îÍ∞Ä", "edit_item": "Í≥µÍ∏âÏûê Ìé∏Ïßë", "new_item": "ÏÉà Í≥µÍ∏âÏûê", "view_item": "Í≥µÍ∏âÏûê Î≥¥Í∏∞", "search_items": "Í≥µÍ∏âÏûê Í≤ÄÏÉâ", "not_found": "Í≥µÍ∏âÏûêÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§", "not_found_in_trash": "Ìú¥ÏßÄÌÜµÏóêÏÑú Í≥µÍ∏âÏûêÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§"}'::jsonb),
        (gen_random_uuid(), 'ds_partner', 'ÌååÌä∏ÎÑà', 'ÎìúÎ°≠Ïâ¨Ìïë Ï†úÌú¥ ÌååÌä∏ÎÑà', 'groups', true, false, false, true, '["title","editor","custom-fields","revisions","thumbnail"]'::jsonb, '[]'::jsonb, 26, 'post', '{"slug":"ds-partner"}'::jsonb, NOW(), NOW(), '{"add_new": "ÏÉà ÌååÌä∏ÎÑà Ï∂îÍ∞Ä", "add_new_item": "ÏÉà ÌååÌä∏ÎÑà Ï∂îÍ∞Ä", "edit_item": "ÌååÌä∏ÎÑà Ìé∏Ïßë", "new_item": "ÏÉà ÌååÌä∏ÎÑà", "view_item": "ÌååÌä∏ÎÑà Î≥¥Í∏∞", "search_items": "ÌååÌä∏ÎÑà Í≤ÄÏÉâ", "not_found": "ÌååÌä∏ÎÑàÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§", "not_found_in_trash": "Ìú¥ÏßÄÌÜµÏóêÏÑú ÌååÌä∏ÎÑàÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§"}'::jsonb),
        (gen_random_uuid(), 'ds_product', 'ÎìúÎ°≠Ïâ¨Ìïë ÏÉÅÌíà', 'ÎìúÎ°≠Ïâ¨Ìïë ÌîåÎû´Ìèº ÏÉÅÌíà', 'cart', true, true, true, true, '["title","editor","custom-fields","revisions","thumbnail","excerpt"]'::jsonb, '["ds_product_category","ds_product_tag"]'::jsonb, 24, 'post', '{"slug":"ds-products"}'::jsonb, NOW(), NOW(), '{"add_new": "ÏÉà ÏÉÅÌíà Ï∂îÍ∞Ä", "add_new_item": "ÏÉà ÏÉÅÌíà Ï∂îÍ∞Ä", "edit_item": "ÏÉÅÌíà Ìé∏Ïßë", "new_item": "ÏÉà ÏÉÅÌíà", "view_item": "ÏÉÅÌíà Î≥¥Í∏∞", "search_items": "ÏÉÅÌíà Í≤ÄÏÉâ", "not_found": "ÏÉÅÌíàÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§", "not_found_in_trash": "Ìú¥ÏßÄÌÜµÏóêÏÑú ÏÉÅÌíàÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§"}'::jsonb),
        (gen_random_uuid(), 'ds_commission_policy', 'ÏàòÏàòÎ£å Ï†ïÏ±Ö', 'ÎìúÎ°≠Ïâ¨Ìïë ÏàòÏàòÎ£å Ï†ïÏ±Ö', 'money-alt', true, false, false, true, '["title","editor","custom-fields","revisions"]'::jsonb, '[]'::jsonb, 27, 'post', '{"slug":"ds-commission-policy"}'::jsonb, NOW(), NOW(), '{"add_new": "ÏÉà Ï†ïÏ±Ö Ï∂îÍ∞Ä", "add_new_item": "ÏÉà ÏàòÏàòÎ£å Ï†ïÏ±Ö Ï∂îÍ∞Ä", "edit_item": "ÏàòÏàòÎ£å Ï†ïÏ±Ö Ìé∏Ïßë", "new_item": "ÏÉà ÏàòÏàòÎ£å Ï†ïÏ±Ö", "view_item": "ÏàòÏàòÎ£å Ï†ïÏ±Ö Î≥¥Í∏∞", "search_items": "ÏàòÏàòÎ£å Ï†ïÏ±Ö Í≤ÄÏÉâ", "not_found": "ÏàòÏàòÎ£å Ï†ïÏ±ÖÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§", "not_found_in_trash": "Ìú¥ÏßÄÌÜµÏóêÏÑú ÏàòÏàòÎ£å Ï†ïÏ±ÖÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§"}'::jsonb)
        ON CONFLICT (slug) DO NOTHING
      `;
      
      await client.query(insertQuery);
      console.log('‚úÖ Dropshipping CPTs created!\n');
      
    } else {
      console.log(`Found ${checkResult.rows.length} dropshipping CPTs:\n`);
      console.table(checkResult.rows);
      
      // Check if any are inactive
      const inactiveCPTs = checkResult.rows.filter(row => !row.active);
      
      if (inactiveCPTs.length > 0) {
        console.log(`\n‚ö†Ô∏è  Found ${inactiveCPTs.length} inactive CPTs. Activating them...\n`);
        
        // Update inactive CPTs to active
        const updateQuery = `
          UPDATE custom_post_types 
          SET active = true, updated_at = NOW()
          WHERE slug IN ('ds_supplier', 'ds_partner', 'ds_product', 'ds_commission_policy')
          AND active = false
        `;
        
        const updateResult = await client.query(updateQuery);
        console.log(`‚úÖ Updated ${updateResult.rowCount} CPTs to active state\n`);
      } else {
        console.log('‚úÖ All dropshipping CPTs are already active!\n');
      }
    }

    // Final check - show all dropshipping CPTs
    console.log('üìä Final status of Dropshipping CPTs:\n');
    const finalResult = await client.query(checkQuery);
    console.table(finalResult.rows);

    // Also check total CPT count
    const countQuery = `
      SELECT 
        COUNT(*) as total_cpts,
        COUNT(CASE WHEN active = true THEN 1 END) as active_cpts,
        COUNT(CASE WHEN slug LIKE 'ds_%' THEN 1 END) as dropshipping_cpts
      FROM custom_post_types
    `;
    const countResult = await client.query(countQuery);
    console.log('\nüìä CPT Statistics:');
    console.table(countResult.rows);

  } catch (error) {
    console.error('‚ùå Error:', error.message);
    if (error.code === 'ECONNREFUSED') {
      console.error('   Database connection refused. Check your database settings.');
    }
  } finally {
    await client.end();
    console.log('\n‚ú® Database operation completed!');
  }
}

// Run the fix
fixDropshippingCPTs();
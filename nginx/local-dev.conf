# O4O Platform - 개발환경 Nginx API Gateway 설정
# 포트 통합: 3000(main-site) + 3001(admin) + 4000(api) → 8080 단일 포트
# WSL Ubuntu 환경 최적화 설정

# 기본 설정
worker_processes auto;
error_log /var/log/nginx/o4o-dev-error.log warn;
pid /var/run/nginx/nginx-o4o-dev.pid;

events {
    worker_connections 1024;
    use epoll;
}

http {
    # MIME 타입 설정
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # 로그 포맷 정의
    log_format o4o_dev '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status $body_bytes_sent '
                       '"$http_referer" "$http_user_agent" '
                       'rt=$request_time upstream="$upstream_addr" '
                       'upstream_status="$upstream_status"';

    access_log /var/log/nginx/o4o-dev-access.log o4o_dev;

    # 기본 성능 설정
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 20M;

    # Gzip 압축 (개발환경 - 가벼운 설정)
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml;

    # 업스트림 서버 정의
    upstream main_site {
        # React 개발 서버 (Vite)
        server 127.0.0.1:3000 max_fails=3 fail_timeout=30s;
        keepalive 8;
    }

    upstream admin_dashboard {
        # React 관리자 대시보드
        server 127.0.0.1:3001 max_fails=3 fail_timeout=30s;
        keepalive 8;
    }

    upstream api_server {
        # Express.js API 서버
        server 127.0.0.1:4000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # 메인 서버 블록 - 통합 엔트리포인트
    server {
        listen 8080;
        server_name localhost local-dev.neture.co.kr;

        # 보안 헤더 (개발환경)
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        
        # 개발환경 식별 헤더
        add_header X-O4O-Environment "development" always;
        add_header X-O4O-Gateway "nginx-local-dev" always;

        # API 서버 라우팅 (/api/*)
        location /api/ {
            # API 서버로 프록시
            proxy_pass http://api_server;
            
            # 프록시 헤더 설정
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;

            # Connection 헤더 처리 (Keep-Alive)
            proxy_set_header Connection "";
            proxy_http_version 1.1;

            # 타임아웃 설정 (개발환경 - 긴 디버깅 시간 고려)
            proxy_connect_timeout 10s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # 버퍼링 설정
            proxy_buffering on;
            proxy_buffer_size 8k;
            proxy_buffers 16 8k;

            # 쿠키 도메인 변환 (SSO 지원)
            proxy_cookie_domain localhost $host;
            proxy_cookie_domain 127.0.0.1 $host;

            # 에러 처리
            proxy_intercept_errors off;
            proxy_next_upstream error timeout;
        }

        # 관리자 대시보드 라우팅 (/admin/*)
        location /admin/ {
            # URL 재작성: /admin/xxx → /xxx
            rewrite ^/admin/(.*)$ /$1 break;
            
            # Admin Dashboard로 프록시
            proxy_pass http://admin_dashboard;
            
            # 프록시 헤더 설정
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;

            # HMR (Hot Module Replacement) 지원
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_http_version 1.1;

            # Vite 개발 서버 최적화
            proxy_cache_bypass $http_upgrade;
            proxy_redirect off;

            # 타임아웃 설정
            proxy_connect_timeout 5s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;

            # 쿠키 도메인 변환
            proxy_cookie_domain localhost $host;
            proxy_cookie_path / /admin/;
        }

        # 관리자 대시보드 루트 접근 처리
        location = /admin {
            return 301 /admin/;
        }

        # 정적 자산 최적화 - Admin Dashboard
        location ~* ^/admin/.*\.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            rewrite ^/admin/(.*)$ /$1 break;
            proxy_pass http://admin_dashboard;
            
            # 캐싱 헤더 (개발환경 - 짧은 캐시)
            expires 5m;
            add_header Cache-Control "public, must-revalidate";
            
            # 압축 활성화
            gzip_static on;
        }

        # 메인 사이트 라우팅 (/ - 최하위 우선순위)
        location / {
            # Main Site로 프록시
            proxy_pass http://main_site;
            
            # 프록시 헤더 설정
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;

            # HMR 지원
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_http_version 1.1;

            # Vite 개발 서버 최적화
            proxy_cache_bypass $http_upgrade;
            proxy_redirect off;

            # 타임아웃 설정
            proxy_connect_timeout 5s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;

            # 쿠키 도메인 변환
            proxy_cookie_domain localhost $host;
        }

        # 정적 자산 최적화 - Main Site
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            proxy_pass http://main_site;
            
            # 캐싱 헤더 (개발환경)
            expires 5m;
            add_header Cache-Control "public, must-revalidate";
            
            # 압축
            gzip_static on;
        }

        # 헬스체크 엔드포인트
        location /health {
            access_log off;
            return 200 "OK - O4O Platform Development Gateway\n";
            add_header Content-Type text/plain;
        }

        # Nginx 상태 (개발용)
        location /nginx-status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow ::1;
            deny all;
        }

        # 개발용 정보 페이지
        location /dev-info {
            access_log off;
            return 200 "O4O Platform Development Gateway
Server: $server_name:$server_port
Time: $time_local
Upstreams:
- Main Site: http://127.0.0.1:3000
- Admin Dashboard: http://127.0.0.1:3001  
- API Server: http://127.0.0.1:4000

Routing:
- /admin/* → Admin Dashboard
- /api/* → API Server
- /* → Main Site
";
            add_header Content-Type text/plain;
        }

        # 에러 페이지 커스터마이징
        error_page 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }

        # 404 에러 처리 (SPA 라우팅 지원)
        error_page 404 = @spa_fallback;
        location @spa_fallback {
            # 관리자 경로인 경우 admin dashboard로
            if ($uri ~* ^/admin) {
                rewrite ^/admin/(.*)$ /admin/ last;
            }
            # 그외는 main site로
            rewrite ^.*$ / last;
        }
    }

    # SSL 설정 (향후 HTTPS 개발환경용)
    # server {
    #     listen 8443 ssl http2;
    #     server_name localhost local-dev.neture.co.kr;
    #     
    #     ssl_certificate /etc/ssl/certs/localhost.crt;
    #     ssl_certificate_key /etc/ssl/private/localhost.key;
    #     
    #     # 위의 server 블록 설정 동일하게 적용
    # }
}

# 주요 특징:
# 1. 통합 라우팅: 8080 포트로 모든 서비스 접근
# 2. HMR 지원: React/Vite 개발서버의 실시간 리로드
# 3. 쿠키 공유: SSO 인증을 위한 도메인 설정
# 4. 에러 처리: SPA 라우팅 호환성
# 5. 개발 편의: 상태 확인 및 디버깅 엔드포인트
# 6. WSL 최적화: Ubuntu 환경에 맞는 설정
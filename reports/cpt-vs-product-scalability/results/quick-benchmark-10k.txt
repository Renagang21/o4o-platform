Timing is on.
========================================
Scenario 1: SKU Lookup
========================================
Option A:
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.29..8.30 rows=1 width=1651) (actual time=0.038..0.038 rows=1 loops=1)
   Buffers: shared hit=3
   ->  Index Scan using benchmark_products_sku_key on benchmark_products  (cost=0.29..8.30 rows=1 width=1651) (actual time=0.037..0.037 rows=1 loops=1)
         Index Cond: ((sku)::text = 'SKU-00005000'::text)
         Buffers: shared hit=3
 Planning:
   Buffers: shared hit=349
 Planning Time: 0.875 ms
 Execution Time: 0.067 ms
(9 rows)

Time: 2.036 ms
Option B:
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.29..8.30 rows=1 width=2011) (actual time=0.066..0.066 rows=1 loops=1)
   Buffers: shared hit=1 read=2
   ->  Index Scan using idx_custom_posts_sku on custom_posts  (cost=0.29..8.30 rows=1 width=2011) (actual time=0.065..0.065 rows=1 loops=1)
         Index Cond: (("customFields" ->> 'sku'::text) = 'SKU-00005000'::text)
         Buffers: shared hit=1 read=2
 Planning:
   Buffers: shared hit=287
 Planning Time: 0.655 ms
 Execution Time: 0.077 ms
(9 rows)

Time: 1.179 ms
Option C:
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.29..8.30 rows=1 width=1102) (actual time=0.026..0.027 rows=1 loops=1)
   Buffers: shared hit=1 read=2
   ->  Index Scan using mv_product_search_sku_idx on mv_product_search  (cost=0.29..8.30 rows=1 width=1102) (actual time=0.026..0.026 rows=1 loops=1)
         Index Cond: (sku = 'SKU-00005000'::text)
         Buffers: shared hit=1 read=2
 Planning:
   Buffers: shared hit=317
 Planning Time: 0.602 ms
 Execution Time: 0.036 ms
(9 rows)

Time: 1.208 ms
========================================
Scenario 2: Price Range + In-Stock
========================================
Option A:
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.29..242.83 rows=50 width=40) (actual time=0.042..0.427 rows=50 loops=1)
   Buffers: shared hit=78
   ->  Index Scan using idx_products_price on benchmark_products  (cost=0.29..3944.05 rows=813 width=40) (actual time=0.042..0.423 rows=50 loops=1)
         Index Cond: ((recommended_price >= '50000'::numeric) AND (recommended_price <= '150000'::numeric))
         Filter: (track_inventory AND (inventory > 0) AND ((status)::text = 'active'::text))
         Rows Removed by Filter: 26
         Buffers: shared hit=78
 Planning:
   Buffers: shared hit=58
 Planning Time: 0.159 ms
 Execution Time: 0.436 ms
(11 rows)

Time: 1.212 ms
Option B:
                                                                                                                                                                           QUERY PLAN                                                                                                                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=481.82..481.95 rows=50 width=64) (actual time=2.858..2.864 rows=50 loops=1)
   Buffers: shared hit=611 read=33
   ->  Sort  (cost=481.82..482.20 rows=151 width=64) (actual time=2.857..2.860 rows=50 loops=1)
         Sort Key: ((("customFields" ->> 'recommendedPrice'::text))::numeric)
         Sort Method: top-N heapsort  Memory: 31kB
         Buffers: shared hit=611 read=33
         ->  Bitmap Heap Scan on custom_posts  (cost=40.09..476.80 rows=151 width=64) (actual time=0.947..2.537 rows=831 loops=1)
               Recheck Cond: (((("customFields" ->> 'recommendedPrice'::text))::numeric >= '50000'::numeric) AND ((("customFields" ->> 'recommendedPrice'::text))::numeric <= '150000'::numeric) AND (("customFields" ->> 'trackInventory'::text))::boolean AND ((("customFields" ->> 'inventory'::text))::integer > 0) AND ((status)::text = 'publish'::text))
               Heap Blocks: exact=608
               Buffers: shared hit=608 read=33
               ->  Bitmap Index Scan on idx_custom_posts_inventory_price  (cost=0.00..40.05 rows=151 width=0) (actual time=0.867..0.867 rows=831 loops=1)
                     Index Cond: (((("customFields" ->> 'recommendedPrice'::text))::numeric >= '50000'::numeric) AND ((("customFields" ->> 'recommendedPrice'::text))::numeric <= '150000'::numeric))
                     Buffers: shared read=33
 Planning:
   Buffers: shared hit=42
 Planning Time: 0.249 ms
 Execution Time: 2.900 ms
(17 rows)

Time: 3.685 ms
Option C:
                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.28..173.05 rows=50 width=40) (actual time=0.038..0.285 rows=50 loops=1)
   Buffers: shared hit=57 read=3
   ->  Index Scan Backward using mv_product_search_price_desc_idx on mv_product_search  (cost=0.28..2816.31 rows=815 width=40) (actual time=0.037..0.281 rows=50 loops=1)
         Index Cond: ((recommended_price >= '50000'::numeric) AND (recommended_price <= '150000'::numeric))
         Filter: (track_inventory AND (inventory > 0))
         Rows Removed by Filter: 6
         Buffers: shared hit=57 read=3
 Planning:
   Buffers: shared hit=3
 Planning Time: 0.166 ms
 Execution Time: 0.294 ms
(11 rows)

Time: 0.814 ms
========================================
Scenario 3: Category Pagination
========================================
Option A:
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=71.91..71.96 rows=18 width=44) (actual time=0.131..0.133 rows=20 loops=1)
   Buffers: shared hit=24
   ->  Sort  (cost=71.91..71.96 rows=18 width=44) (actual time=0.130..0.131 rows=20 loops=1)
         Sort Key: created_at DESC
         Sort Method: quicksort  Memory: 26kB
         Buffers: shared hit=24
         ->  Bitmap Heap Scan on benchmark_products  (cost=4.47..71.54 rows=18 width=44) (actual time=0.023..0.117 rows=20 loops=1)
               Recheck Cond: ((category_id = '17d2e364-cdf0-4e1f-82eb-4a823967a25f'::uuid) AND ((status)::text = 'active'::text))
               Heap Blocks: exact=19
               Buffers: shared hit=21
               ->  Bitmap Index Scan on idx_products_category_status  (cost=0.00..4.46 rows=18 width=0) (actual time=0.013..0.013 rows=20 loops=1)
                     Index Cond: ((category_id = '17d2e364-cdf0-4e1f-82eb-4a823967a25f'::uuid) AND ((status)::text = 'active'::text))
                     Buffers: shared hit=2
 Planning:
   Buffers: shared hit=4
 Planning Time: 0.076 ms
 Execution Time: 0.145 ms
(17 rows)

Time: 0.683 ms
Option B:
                                                                                QUERY PLAN                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=56.67..56.71 rows=14 width=68) (actual time=0.043..0.044 rows=11 loops=1)
   Buffers: shared hit=11 read=2
   ->  Sort  (cost=56.67..56.71 rows=14 width=68) (actual time=0.042..0.043 rows=11 loops=1)
         Sort Key: "createdAt" DESC
         Sort Method: quicksort  Memory: 25kB
         Buffers: shared hit=11 read=2
         ->  Bitmap Heap Scan on custom_posts  (cost=4.43..56.40 rows=14 width=68) (actual time=0.025..0.038 rows=11 loops=1)
               Recheck Cond: (((("customFields" ->> 'categoryId'::text))::uuid = '17d2e364-cdf0-4e1f-82eb-4a823967a25f'::uuid) AND ((status)::text = 'publish'::text))
               Heap Blocks: exact=11
               Buffers: shared hit=11 read=2
               ->  Bitmap Index Scan on idx_custom_posts_category  (cost=0.00..4.42 rows=14 width=0) (actual time=0.019..0.019 rows=11 loops=1)
                     Index Cond: (((("customFields" ->> 'categoryId'::text))::uuid = '17d2e364-cdf0-4e1f-82eb-4a823967a25f'::uuid) AND ((status)::text = 'publish'::text))
                     Buffers: shared read=2
 Planning:
   Buffers: shared hit=3
 Planning Time: 0.104 ms
 Execution Time: 0.062 ms
(17 rows)

Time: 0.522 ms
Option C:
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=56.81..56.84 rows=14 width=44) (actual time=0.080..0.081 rows=11 loops=1)
   Buffers: shared hit=11 read=2
   ->  Sort  (cost=56.81..56.84 rows=14 width=44) (actual time=0.079..0.080 rows=11 loops=1)
         Sort Key: created_at DESC
         Sort Method: quicksort  Memory: 25kB
         Buffers: shared hit=11 read=2
         ->  Bitmap Heap Scan on mv_product_search  (cost=4.43..56.54 rows=14 width=44) (actual time=0.030..0.074 rows=11 loops=1)
               Recheck Cond: ((category_id = '17d2e364-cdf0-4e1f-82eb-4a823967a25f'::uuid) AND ((status)::text = 'publish'::text))
               Heap Blocks: exact=11
               Buffers: shared hit=11 read=2
               ->  Bitmap Index Scan on mv_product_search_category_idx  (cost=0.00..4.42 rows=14 width=0) (actual time=0.021..0.021 rows=11 loops=1)
                     Index Cond: ((category_id = '17d2e364-cdf0-4e1f-82eb-4a823967a25f'::uuid) AND ((status)::text = 'publish'::text))
                     Buffers: shared read=2
 Planning Time: 0.090 ms
 Execution Time: 0.093 ms
(15 rows)

Time: 0.521 ms
========================================
Table Sizes
========================================
     table_name     | rows  | total_size | table_size | indexes_size 
--------------------+-------+------------+------------+--------------
 benchmark_products | 10000 | 23 MB      | 15 MB      | 7536 kB
 custom_posts       | 10000 | 26 MB      | 10000 kB   | 16 MB
 mv_product_search  | 10000 | 16 MB      | 12 MB      | 4704 kB
(3 rows)

Time: 5.910 ms
